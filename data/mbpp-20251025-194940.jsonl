{"benchmark": "mbpp-sanitized", "task_id": "14", "prompt": "Write a python function to find the volume of a triangular prism.", "reference_code": "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) ", "test_imports": [], "test_list": ["assert find_Volume(10,8,6) == 240", "assert find_Volume(3,2,2) == 6", "assert find_Volume(1,2,1) == 1"], "model_id": "anthropic/claude-haiku-4.5", "generated_code": "```python\ndef triangular_prism_volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n    \n    Args:\n        base: The base of the triangular face (in units)\n        height: The height of the triangular face (in units)\n        length: The length/depth of the prism (in units)\n    \n    Returns:\n        The volume of the triangular prism (in cubic units)\n    \n    Formula: Volume = (1/2 * base * height) * length\n    \"\"\"\n    triangle_area = 0.5 * base * height\n    volume = triangle_area * length\n    return volume\n\n\n# Example usage\nif __name__ == \"__main__\":\n    # Example 1: base=5, height=4, length=10\n    vol1 = triangular_prism_volume(5, 4, 10)\n    print(f\"Volume of triangular prism (base=5, height=4, length=10): {vol1} cubic units\")\n    \n    # Example 2: base=3, height=6, length=8\n    vol2 = triangular_prism_volume(3, 6, 8)\n    print(f\"Volume of triangular prism (base=3, height=6, length=8): {vol2} cubic units\")\n    \n    # Example 3: base=7, height=5, length=12\n    vol3 = triangular_prism_volume(7, 5, 12)\n    print(f\"Volume of triangular prism (base=7, height=5, length=12): {vol3} cubic units\")\n```\n\n**Output:**\n```\nVolume of triangular prism (base=5, height=4, length=10): 100.0 cubic units\nVolume of triangular prism (base=3, height=6, length=8): 72.0 cubic units\nVolume of triangular prism (base=7, height=5, length=12): 210.0 cubic units\n```\n\nThe function calculates the volume using the formula:\n- **Volume = (1/2 × base × height) × length**\n\nWhere:\n- `base` and `height` are the dimensions of the triangular cross-section\n- `length` is the depth/length of the prism"}
{"benchmark": "mbpp-sanitized", "task_id": "12", "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "reference_code": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result", "test_imports": [], "test_list": ["assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"], "model_id": "anthropic/claude-haiku-4.5", "generated_code": "```python\ndef sort_matrix_by_row_sum(matrix):\n    \"\"\"\n    Sort a matrix in ascending order according to the sum of its rows.\n    \n    Args:\n        matrix: A list of lists representing the matrix\n        \n    Returns:\n        A new matrix sorted by row sums in ascending order\n    \"\"\"\n    return sorted(matrix, key=sum)\n\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test 1: Basic matrix\n    matrix1 = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [1, 1, 1]\n    ]\n    print(\"Original matrix 1:\")\n    for row in matrix1:\n        print(row)\n    print(\"Sorted by row sum:\")\n    result1 = sort_matrix_by_row_sum(matrix1)\n    for row in result1:\n        print(row)\n    print()\n    \n    # Test 2: Matrix with negative numbers\n    matrix2 = [\n        [5, -2, 3],\n        [-1, 0, 1],\n        [10, 10, 10]\n    ]\n    print(\"Original matrix 2:\")\n    for row in matrix2:\n        print(row)\n    print(\"Sorted by row sum:\")\n    result2 = sort_matrix_by_row_sum(matrix2)\n    for row in result2:\n        print(row)\n    print()\n    \n    # Test 3: Single row\n    matrix3 = [[5, 3, 8]]\n    print(\"Original matrix 3:\")\n    for row in matrix3:\n        print(row)\n    print(\"Sorted by row sum:\")\n    result3 = sort_matrix_by_row_sum(matrix3)\n    for row in result3:\n        print(row)\n    print()\n    \n    # Test 4: Matrix with equal row sums\n    matrix4 = [\n        [1, 2, 3],\n        [2, 2, 2],\n        [6, 0, 0]\n    ]\n    print(\"Original matrix 4:\")\n    for row in matrix4:\n        print(row)\n    print(\"Sorted by row sum:\")\n    result4 = sort_matrix_by_row_sum(matrix4)\n    for row in result4:\n        print(row)\n```\n\n**Explanation:**\n\nThe function `sort_matrix_by_row_sum()` uses Python's built-in `sorted()` function with a `key` parameter:\n\n- **`key=sum`**: This tells `sorted()` to use the sum of each row as the sorting criterion\n- The function returns a new sorted matrix without modifying the original\n- Time complexity: O(n*m*log(n)) where n is the number of rows and m is the number of columns\n- Space complexity: O(n*m) for the new sorted matrix\n\n**Key features:**\n- Works with positive, negative, and zero values\n- Handles matrices of any size\n- Maintains row integrity (doesn't sort elements within rows)\n- Stable sort (rows with equal sums maintain their relative order)"}
{"benchmark": "mbpp-sanitized", "task_id": "11", "prompt": "Write a python function to remove first and last occurrence of a given character from the string.", "reference_code": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ", "test_imports": [], "test_list": ["assert remove_Occ(\"hello\",\"l\") == \"heo\"", "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"", "assert remove_Occ(\"PHP\",\"P\") == \"H\""], "model_id": "anthropic/claude-haiku-4.5", "generated_code": "```python\ndef remove_first_last_occurrence(string, char):\n    \"\"\"\n    Remove first and last occurrence of a given character from the string.\n    \n    Args:\n        string: The input string\n        char: The character to remove\n    \n    Returns:\n        The modified string with first and last occurrence of char removed\n    \"\"\"\n    if char not in string:\n        return string\n    \n    # Find first occurrence\n    first_index = string.find(char)\n    \n    # Find last occurrence\n    last_index = string.rfind(char)\n    \n    # If first and last are the same (only one occurrence), remove it\n    if first_index == last_index:\n        return string[:first_index] + string[first_index + 1:]\n    \n    # Remove last occurrence first (to avoid index shifting issues)\n    string = string[:last_index] + string[last_index + 1:]\n    \n    # Remove first occurrence\n    string = string[:first_index] + string[first_index + 1:]\n    \n    return string\n\n\n# Test cases\nif __name__ == \"__main__\":\n    print(remove_first_last_occurrence(\"hello\", \"l\"))  # \"heo\"\n    print(remove_first_last_occurrence(\"abcabc\", \"a\"))  # \"bcabc\" -> \"bcbc\"\n    print(remove_first_last_occurrence(\"programming\", \"m\"))  # \"prograin\"\n    print(remove_first_last_occurrence(\"aaa\", \"a\"))  # \"a\"\n    print(remove_first_last_occurrence(\"xyz\", \"a\"))  # \"xyz\"\n    print(remove_first_last_occurrence(\"a\", \"a\"))  # \"\"\n```\n\n**Alternative solution using string methods:**\n\n```python\ndef remove_first_last_occurrence_v2(string, char):\n    \"\"\"\n    Remove first and last occurrence of a given character from the string.\n    Using replace method with count parameter.\n    \"\"\"\n    if char not in string:\n        return string\n    \n    # Count occurrences\n    count = string.count(char)\n    \n    if count == 1:\n        return string.replace(char, \"\", 1)\n    \n    # Replace first occurrence\n    string = string.replace(char, \"\", 1)\n    \n    # Replace last occurrence\n    string = string[::-1].replace(char, \"\", 1)[::-1]\n    \n    return string\n\n\n# Test cases\nif __name__ == \"__main__\":\n    print(remove_first_last_occurrence_v2(\"hello\", \"l\"))  # \"heo\"\n    print(remove_first_last_occurrence_v2(\"abcabc\", \"a\"))  # \"bcbc\"\n    print(remove_first_last_occurrence_v2(\"programming\", \"m\"))  # \"prograin\"\n    print(remove_first_last_occurrence_v2(\"aaa\", \"a\"))  # \"a\"\n    print(remove_first_last_occurrence_v2(\"xyz\", \"a\"))  # \"xyz\"\n    print(remove_first_last_occurrence_v2(\"a\", \"a\"))  # \"\"\n```\n\nBoth solutions:\n- **First version**: Uses `find()` and `rfind()` to locate first and last occurrences, then removes them\n- **Second version**: Uses `replace()` with count parameter and string reversal for a more concise approach\n\nChoose the first version for clarity or the second for conciseness. Both handle edge cases like:\n- Character not in string\n- Only one occurrence of the character\n- Multiple occurrences of the character"}
{"benchmark": "mbpp-sanitized", "task_id": "14", "prompt": "Write a python function to find the volume of a triangular prism.", "reference_code": "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) ", "test_imports": [], "test_list": ["assert find_Volume(10,8,6) == 240", "assert find_Volume(3,2,2) == 6", "assert find_Volume(1,2,1) == 1"], "model_id": "openai/gpt-5", "generated_code": "def triangular_prism_volume(base: float, triangle_height: float, prism_length: float) -> float:\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Volume = 0.5 * base * triangle_height * prism_length\n\n    Args:\n        base: Length of the triangle's base.\n        triangle_height: Height of the triangle corresponding to the base.\n        prism_length: Length (depth) of the prism between the triangular faces.\n\n    Returns:\n        The volume of the triangular prism.\n\n    Raises:\n        ValueError: If any dimension is negative.\n    \"\"\"\n    for name, value in ((\"base\", base), (\"triangle_height\", triangle_height), (\"prism_length\", prism_length)):\n        if value < 0:\n            raise ValueError(f\"{name} must be non-negative\")\n    return 0.5 * base * triangle_height * prism_length"}
{"benchmark": "mbpp-sanitized", "task_id": "11", "prompt": "Write a python function to remove first and last occurrence of a given character from the string.", "reference_code": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ", "test_imports": [], "test_list": ["assert remove_Occ(\"hello\",\"l\") == \"heo\"", "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"", "assert remove_Occ(\"PHP\",\"P\") == \"H\""], "model_id": "openai/gpt-5", "generated_code": "def remove_first_last_occurrence(s: str, ch: str) -> str:\n    \"\"\"\n    Remove the first and last occurrence of a given character from the string.\n    If the character occurs once, that single occurrence is removed.\n    If the character does not occur, the original string is returned.\n    \"\"\"\n    if len(ch) != 1:\n        raise ValueError(\"ch must be a single character\")\n    first = s.find(ch)\n    if first == -1:\n        return s\n    last = s.rfind(ch)\n    if first == last:\n        return s[:first] + s[first+1:]\n    return s[:first] + s[first+1:last] + s[last+1:]"}
{"benchmark": "mbpp-sanitized", "task_id": "12", "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "reference_code": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result", "test_imports": [], "test_list": ["assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"], "model_id": "openai/gpt-5", "generated_code": "def sort_matrix_by_row_sum(matrix):\n    \"\"\"\n    Sorts the rows of a matrix in ascending order based on the sum of each row.\n    \n    Args:\n        matrix: Iterable of iterables containing numeric values.\n    \n    Returns:\n        A new list of rows sorted by their row sums (ascending).\n    \"\"\"\n    return sorted(matrix, key=lambda row: sum(row))"}
