{"benchmark": "mbpp", "task_id": "14", "prompt": "Write a python function to find the volume of a triangular prism.", "reference_code": "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) ", "test_imports": [], "test_list": ["assert find_Volume(10,8,6) == 240", "assert find_Volume(3,2,2) == 6", "assert find_Volume(1,2,1) == 1"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "```python\ndef triangular_prism_volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n    \n    Args:\n        base: The base of the triangular face\n        height: The height of the triangular face\n        length: The length (depth) of the prism\n    \n    Returns:\n        The volume of the triangular prism\n    \"\"\"\n    triangle_area = (base * height) / 2\n    volume = triangle_area * length\n    return volume\n```"}
{"benchmark": "mbpp", "task_id": "12", "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "reference_code": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result", "test_imports": [], "test_list": ["assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "```python\ndef sort_matrix_by_row_sum(matrix):\n    \"\"\"\n    Sort a given matrix in ascending order according to the sum of its rows.\n    \n    Args:\n        matrix: A list of lists representing a matrix\n        \n    Returns:\n        A new matrix sorted by row sums in ascending order\n    \"\"\"\n    return sorted(matrix, key=sum)\n```"}
{"benchmark": "mbpp", "task_id": "11", "prompt": "Write a python function to remove first and last occurrence of a given character from the string.", "reference_code": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ", "test_imports": [], "test_list": ["assert remove_Occ(\"hello\",\"l\") == \"heo\"", "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"", "assert remove_Occ(\"PHP\",\"P\") == \"H\""], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "```python\ndef remove_first_and_last_occurrence(string, char):\n    \"\"\"\n    Remove the first and last occurrence of a given character from the string.\n    \n    Args:\n        string: The input string\n        char: The character to remove\n        \n    Returns:\n        A new string with the first and last occurrence of char removed\n    \"\"\"\n    if not string or char not in string:\n        return string\n    \n    # Find the first occurrence\n    first_index = string.find(char)\n    \n    # Find the last occurrence\n    last_index = string.rfind(char)\n    \n    # If first and last are the same (only one occurrence), remove it\n    if first_index == last_index:\n        return string[:first_index] + string[first_index + 1:]\n    \n    # Remove both first and last occurrences\n    # Build the result by concatenating: before first + between + after last\n    result = string[:first_index] + string[first_index + 1:last_index] + string[last_index + 1:]\n    \n    return result\n```"}
{"benchmark": "mbpp", "task_id": "16", "prompt": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.", "reference_code": "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False", "test_imports": [], "test_list": ["assert text_lowercase_underscore(\"aab_cbbbc\")==(True)", "assert text_lowercase_underscore(\"aab_Abbbc\")==(False)", "assert text_lowercase_underscore(\"Aaab_abbbc\")==(False)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "```python\ndef is_valid_identifier(s: str) -> bool:\n    \"\"\"\n    Returns True if the input string contains sequences of lowercase letters\n    joined with an underscore, and False otherwise.\n    \n    Valid patterns:\n    - Single sequence of lowercase letters: \"hello\"\n    - Multiple sequences joined by underscore: \"hello_world\"\n    - Must contain only lowercase letters and underscores\n    - Cannot start or end with underscore\n    - Cannot have consecutive underscores\n    \"\"\"\n    if not s:\n        return False\n    \n    # Check if string starts or ends with underscore\n    if s.startswith('_') or s.endswith('_'):\n        return False\n    \n    # Split by underscore\n    parts = s.split('_')\n    \n    # Each part must be non-empty and contain only lowercase letters\n    for part in parts:\n        if not part or not part.islower() or not part.isalpha():\n            return False\n    \n    return True\n```"}
{"benchmark": "mbpp", "task_id": "17", "prompt": "Write a function that returns the perimeter of a square given its side length as input.", "reference_code": "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter", "test_imports": [], "test_list": ["assert square_perimeter(10)==40", "assert square_perimeter(5)==20", "assert square_perimeter(4)==16"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "```python\ndef perimeter_of_square(side_length):\n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n    \n    Args:\n        side_length: The length of one side of the square\n        \n    Returns:\n        The perimeter of the square (4 times the side length)\n    \"\"\"\n    return 4 * side_length\n```"}
{"benchmark": "mbpp", "task_id": "12", "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "reference_code": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result", "test_imports": [], "test_list": ["assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"], "model_name": "openai/gpt-5", "generated_code": "```python\nfrom typing import Iterable, List, Sequence, Any\n\n\ndef sort_matrix_by_row_sum(matrix: Sequence[Iterable[float]]) -> List[List[Any]]:\n    \"\"\"\n    Sort a given matrix (sequence of row iterables) in ascending order\n    according to the sum of its rows.\n\n    - Returns a new list of lists; the original matrix is not modified.\n    - Sorting is stable: rows with equal sums retain their original order.\n\n    Args:\n        matrix: A sequence of row iterables (e.g., list of lists/tuples) containing numeric values.\n\n    Returns:\n        A new matrix (list of lists) sorted by the sum of each row in ascending order.\n    \"\"\"\n    # Convert rows to lists to ensure consistent, indexable return type\n    rows_as_lists = [list(row) for row in matrix]\n    return sorted(rows_as_lists, key=sum)\n```"}
{"benchmark": "mbpp", "task_id": "18", "prompt": "Write a function to remove characters from the first string which are present in the second string.", "reference_code": "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) ", "test_imports": [], "test_list": ["assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'", "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'", "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "```python\ndef remove_characters(first_string, second_string):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n    \n    Args:\n        first_string: The string to remove characters from\n        second_string: The string containing characters to remove\n    \n    Returns:\n        A new string with characters removed\n    \"\"\"\n    # Create a set of characters to remove for O(1) lookup\n    chars_to_remove = set(second_string)\n    \n    # Build result string with characters not in the removal set\n    result = ''.join(char for char in first_string if char not in chars_to_remove)\n    \n    return result\n```"}
{"benchmark": "mbpp", "task_id": "14", "prompt": "Write a python function to find the volume of a triangular prism.", "reference_code": "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) ", "test_imports": [], "test_list": ["assert find_Volume(10,8,6) == 240", "assert find_Volume(3,2,2) == 6", "assert find_Volume(1,2,1) == 1"], "model_name": "openai/gpt-5", "generated_code": "```python\ndef volume_of_triangular_prism(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    The volume is given by:\n        volume = 0.5 * base * height * length\n\n    Parameters:\n    - base: The base length of the triangular face.\n    - height: The height of the triangular face (perpendicular to the base).\n    - length: The length (depth) of the prism.\n\n    Returns:\n    - The volume of the triangular prism as a float.\n    \"\"\"\n    return 0.5 * base * height * length\n```"}
{"benchmark": "mbpp", "task_id": "19", "prompt": "Write a function to find whether a given array of integers contains any duplicate element.", "reference_code": "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     ", "test_imports": [], "test_list": ["assert test_duplicate(([1,2,3,4,5]))==False", "assert test_duplicate(([1,2,3,4, 4]))==True", "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "```python\ndef contains_duplicate(nums):\n    \"\"\"\n    Determine whether a given array of integers contains any duplicate element.\n    \n    Args:\n        nums: A list of integers\n        \n    Returns:\n        True if the array contains any duplicate element, False otherwise\n    \"\"\"\n    return len(nums) != len(set(nums))\n```"}
{"benchmark": "mbpp", "task_id": "18", "prompt": "Write a function to remove characters from the first string which are present in the second string.", "reference_code": "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) ", "test_imports": [], "test_list": ["assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'", "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'", "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'"], "model_name": "openai/gpt-5", "generated_code": "```python\ndef remove_characters(s1, s2):\n    \"\"\"\n    Remove all characters from the first string (s1) that are present in the second string (s2).\n\n    Args:\n        s1 (str): The source string from which characters will be removed.\n        s2 (str): The string containing characters to remove from s1.\n\n    Returns:\n        str: A new string with all characters from s1 that are present in s2 removed.\n\n    Notes:\n        - The removal is case-sensitive.\n        - If s1 or s2 are not strings, they will be converted to strings (None becomes an empty string).\n        - The original order of remaining characters in s1 is preserved.\n    \"\"\"\n    if s1 is None:\n        s1 = \"\"\n    if s2 is None:\n        s2 = \"\"\n    if not isinstance(s1, str):\n        s1 = str(s1)\n    if not isinstance(s2, str):\n        s2 = str(s2)\n\n    if not s2 or not s1:\n        return s1\n\n    remove_set = set(s2)\n    return \"\".join(ch for ch in s1 if ch not in remove_set)\n```"}
{"benchmark": "mbpp", "task_id": "17", "prompt": "Write a function that returns the perimeter of a square given its side length as input.", "reference_code": "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter", "test_imports": [], "test_list": ["assert square_perimeter(10)==40", "assert square_perimeter(5)==20", "assert square_perimeter(4)==16"], "model_name": "openai/gpt-5", "generated_code": "```python\ndef square_perimeter(side):\n    \"\"\"\n    Return the perimeter of a square for a given side length.\n\n    Parameters:\n        side: The length of one side of the square (int, float, or any numeric type).\n\n    Returns:\n        The perimeter as 4 * side.\n    \"\"\"\n    return side * 4\n```"}
{"benchmark": "mbpp", "task_id": "16", "prompt": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.", "reference_code": "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False", "test_imports": [], "test_list": ["assert text_lowercase_underscore(\"aab_cbbbc\")==(True)", "assert text_lowercase_underscore(\"aab_Abbbc\")==(False)", "assert text_lowercase_underscore(\"Aaab_abbbc\")==(False)"], "model_name": "openai/gpt-5", "generated_code": "```python\nimport re\nfrom typing import Pattern\n\n# Precompile the regex: one or more lowercase segments separated by single underscores\n_LOWER_UNDERSCORE_PATTERN: Pattern[str] = re.compile(r'^[a-z]+(?:_[a-z]+)+$')\n\n\ndef check(s: str) -> bool:\n    \"\"\"\n    Return True if the input string contains sequences of lowercase letters joined with an underscore,\n    and False otherwise.\n\n    A valid string must:\n    - consist of one or more groups of lowercase letters,\n    - groups are separated by a single underscore,\n    - contain at least one underscore (i.e., at least two groups).\n\n    Examples that return True: \"abc_def\", \"a_b_c\", \"hello_world\"\n    Examples that return False: \"abc\", \"Abc_def\", \"abc_\", \"_abc\", \"abc__def\", \"abc-def\"\n    \"\"\"\n    if not isinstance(s, str):\n        return False\n    return _LOWER_UNDERSCORE_PATTERN.fullmatch(s) is not None\n```"}
{"benchmark": "mbpp", "task_id": "20", "prompt": "Write a function to check if the given number is woodball or not.", "reference_code": "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False", "test_imports": [], "test_list": ["assert is_woodall(383) == True", "assert is_woodall(254) == False", "assert is_woodall(200) == False"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "```python\ndef is_woodball(n):\n    \"\"\"\n    Check if a number is a woodball number.\n    \n    A woodball number is a positive integer where the sum of its digits\n    equals the sum of the digits of all its divisors (excluding the number itself).\n    \n    Args:\n        n: An integer to check\n        \n    Returns:\n        True if n is a woodball number, False otherwise\n    \"\"\"\n    if n <= 0:\n        return False\n    \n    def sum_of_digits(num):\n        \"\"\"Calculate the sum of digits of a number.\"\"\"\n        return sum(int(digit) for digit in str(num))\n    \n    def get_divisors(num):\n        \"\"\"Get all divisors of a number excluding the number itself.\"\"\"\n        divisors = []\n        for i in range(1, int(num**0.5) + 1):\n            if num % i == 0:\n                divisors.append(i)\n                if i != num // i and num // i != num:\n                    divisors.append(num // i)\n        return divisors\n    \n    # Sum of digits of n\n    n_digit_sum = sum_of_digits(n)\n    \n    # Get all divisors except n itself\n    divisors = get_divisors(n)\n    \n    # Sum of digits of all divisors\n    divisors_digit_sum = sum(sum_of_digits(d) for d in divisors)\n    \n    # Check if they are equal\n    return n_digit_sum == divisors_digit_sum\n```"}
{"benchmark": "mbpp", "task_id": "56", "prompt": "Write a python function to check if a given number is one less than twice its reverse.", "reference_code": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ", "test_imports": [], "test_list": ["assert check(70) == False", "assert check(23) == False", "assert check(73) == True"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "```python\ndef is_one_less_than_twice_reverse(n):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n    \n    Args:\n        n: An integer number\n        \n    Returns:\n        True if n == 2 * reverse(n) - 1, False otherwise\n    \"\"\"\n    # Get the reverse of the number\n    reversed_n = int(str(abs(n))[::-1])\n    \n    # Handle negative numbers: reverse the sign as well\n    if n < 0:\n        reversed_n = -reversed_n\n    \n    # Check if n is one less than twice its reverse\n    return n == 2 * reversed_n - 1\n```"}
{"benchmark": "mbpp", "task_id": "57", "prompt": "Write a python function to find the largest number that can be formed with the given list of digits.", "reference_code": "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ", "test_imports": [], "test_list": ["assert find_Max_Num([1,2,3]) == 321", "assert find_Max_Num([4,5,6,1]) == 6541", "assert find_Max_Num([1,2,3,9]) == 9321"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "```python\ndef largest_number(digits):\n    \"\"\"\n    Find the largest number that can be formed with the given list of digits.\n    \n    Args:\n        digits: A list of integers (digits)\n    \n    Returns:\n        An integer representing the largest number that can be formed\n    \"\"\"\n    if not digits:\n        return 0\n    \n    # Convert digits to strings for sorting\n    digit_strings = [str(d) for d in digits]\n    \n    # Sort in descending order based on which arrangement is larger\n    # For example, 9 should come before 80, and 3 should come before 30\n    from functools import cmp_to_key\n    \n    def compare(x, y):\n        # Compare x+y vs y+x to determine order\n        if x + y > y + x:\n            return -1  # x should come before y\n        elif x + y < y + x:\n            return 1   # y should come before x\n        else:\n            return 0   # they are equal\n    \n    digit_strings.sort(key=cmp_to_key(compare))\n    \n    # Join the sorted digits\n    result = ''.join(digit_strings)\n    \n    # Handle the case where all digits are 0\n    if result[0] == '0':\n        return 0\n    \n    return int(result)\n```"}
{"benchmark": "mbpp", "task_id": "19", "prompt": "Write a function to find whether a given array of integers contains any duplicate element.", "reference_code": "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     ", "test_imports": [], "test_list": ["assert test_duplicate(([1,2,3,4,5]))==False", "assert test_duplicate(([1,2,3,4, 4]))==True", "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"], "model_name": "openai/gpt-5", "generated_code": "```python\ndef contains_duplicate(arr):\n    \"\"\"\n    Determine whether the given list of integers contains any duplicate element.\n\n    Args:\n        arr (list[int]): A list of integers.\n\n    Returns:\n        bool: True if there is at least one duplicate element, False otherwise.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n```"}
{"benchmark": "mbpp", "task_id": "11", "prompt": "Write a python function to remove first and last occurrence of a given character from the string.", "reference_code": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ", "test_imports": [], "test_list": ["assert remove_Occ(\"hello\",\"l\") == \"heo\"", "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"", "assert remove_Occ(\"PHP\",\"P\") == \"H\""], "model_name": "openai/gpt-5", "generated_code": ""}
{"benchmark": "mbpp", "task_id": "57", "prompt": "Write a python function to find the largest number that can be formed with the given list of digits.", "reference_code": "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ", "test_imports": [], "test_list": ["assert find_Max_Num([1,2,3]) == 321", "assert find_Max_Num([4,5,6,1]) == 6541", "assert find_Max_Num([1,2,3,9]) == 9321"], "model_name": "openai/gpt-5", "generated_code": "```python\nfrom typing import Iterable, Union\n\ndef largest_number(digits: Iterable[Union[int, str]]) -> int:\n    \"\"\"\n    Return the largest integer that can be formed by concatenating the given digits.\n\n    Args:\n        digits: An iterable containing digits as ints (0-9) or single-character strings '0'-'9'.\n\n    Returns:\n        An integer representing the largest number formed by arranging the digits in descending order.\n        Returns 0 for empty input or if all digits are zeros.\n\n    Raises:\n        ValueError: If any element is not a valid single digit.\n    \"\"\"\n    if digits is None:\n        return 0\n\n    processed = []\n    for d in digits:\n        if isinstance(d, int):\n            if d < 0 or d > 9:\n                raise ValueError(f\"Invalid digit: {d}\")\n            processed.append(d)\n        elif isinstance(d, str):\n            if len(d) != 1 or not d.isdigit():\n                raise ValueError(f\"Invalid digit: {d}\")\n            processed.append(int(d))\n        else:\n            raise ValueError(f\"Invalid digit type: {type(d).__name__}\")\n\n    if not processed:\n        return 0\n\n    processed.sort(reverse=True)\n\n    if processed[0] == 0:\n        return 0\n\n    return int(\"\".join(str(x) for x in processed))\n```"}
{"benchmark": "mbpp", "task_id": "20", "prompt": "Write a function to check if the given number is woodball or not.", "reference_code": "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False", "test_imports": [], "test_list": ["assert is_woodall(383) == True", "assert is_woodall(254) == False", "assert is_woodall(200) == False"], "model_name": "openai/gpt-5", "generated_code": "```python\ndef woodball(n: int) -> bool:\n    \"\"\"\n    Check whether a number is a Woodall (often misspelled 'woodball') number.\n\n    A Woodall number is of the form k * 2^k - 1 for some integer k >= 1.\n    Examples: 1 (k=1), 7 (k=3), 23 (k=4), 63 (k=5), ...\n\n    Parameters:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if n is a Woodall number, False otherwise.\n    \"\"\"\n    if n < 1:\n        return False\n\n    k = 1\n    while True:\n        val = (1 << k) * k - 1  # k * 2^k - 1\n        if val == n:\n            return True\n        if val > n:\n            return False\n        k += 1\n```"}
{"benchmark": "mbpp", "task_id": "56", "prompt": "Write a python function to check if a given number is one less than twice its reverse.", "reference_code": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ", "test_imports": [], "test_list": ["assert check(70) == False", "assert check(23) == False", "assert check(73) == True"], "model_name": "openai/gpt-5", "generated_code": "```python\ndef check(n: int) -> bool:\n    \"\"\"\n    Check if a given integer n is one less than twice its reverse.\n    That is, return True if n == 2 * reverse(n) - 1, else False.\n    Handles negative numbers by reversing digits and preserving sign.\n    \"\"\"\n    def reverse_number(x: int) -> int:\n        sign = -1 if x < 0 else 1\n        x = abs(x)\n        rev = 0\n        while x:\n            rev = rev * 10 + (x % 10)\n            x //= 10\n        return sign * rev\n\n    return n == 2 * reverse_number(n) - 1\n```"}
