{"benchmark": "mbpp", "task_id": "12", "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "reference_code": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result", "test_imports": [], "test_list": ["assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "```python\ndef sort_matrix_by_row_sum(matrix):\n    \"\"\"\n    Sort a given matrix in ascending order according to the sum of its rows.\n    \n    Args:\n        matrix: A list of lists representing a matrix\n        \n    Returns:\n        A new matrix sorted by row sums in ascending order\n    \"\"\"\n    return sorted(matrix, key=lambda row: sum(row))\n```"}
{"benchmark": "mbpp", "task_id": "11", "prompt": "Write a python function to remove first and last occurrence of a given character from the string.", "reference_code": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ", "test_imports": [], "test_list": ["assert remove_Occ(\"hello\",\"l\") == \"heo\"", "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"", "assert remove_Occ(\"PHP\",\"P\") == \"H\""], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "```python\ndef remove_first_and_last_occurrence(string, char):\n    \"\"\"\n    Remove the first and last occurrence of a given character from the string.\n    \n    Args:\n        string: The input string\n        char: The character to remove\n    \n    Returns:\n        The string with first and last occurrence of char removed\n    \"\"\"\n    if not string or char not in string:\n        return string\n    \n    # Find the first occurrence\n    first_index = string.find(char)\n    \n    # Find the last occurrence\n    last_index = string.rfind(char)\n    \n    # If first and last are the same (only one occurrence), remove it\n    if first_index == last_index:\n        return string[:first_index] + string[first_index + 1:]\n    \n    # Remove both first and last occurrences\n    # Build the result by concatenating parts before first, between first and last, and after last\n    result = string[:first_index] + string[first_index + 1:last_index] + string[last_index + 1:]\n    \n    return result\n```"}
{"benchmark": "mbpp", "task_id": "14", "prompt": "Write a python function to find the volume of a triangular prism.", "reference_code": "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) ", "test_imports": [], "test_list": ["assert find_Volume(10,8,6) == 240", "assert find_Volume(3,2,2) == 6", "assert find_Volume(1,2,1) == 1"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "```python\ndef triangular_prism_volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n    \n    Args:\n        base: The base of the triangular face (in units)\n        height: The height of the triangular face (in units)\n        length: The length/depth of the prism (in units)\n    \n    Returns:\n        The volume of the triangular prism\n    \"\"\"\n    # Area of triangular base = (1/2) * base * height\n    # Volume = Area of base * length\n    triangular_area = 0.5 * base * height\n    volume = triangular_area * length\n    return volume\n```"}
{"benchmark": "mbpp", "task_id": "16", "prompt": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.", "reference_code": "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False", "test_imports": [], "test_list": ["assert text_lowercase_underscore(\"aab_cbbbc\")==(True)", "assert text_lowercase_underscore(\"aab_Abbbc\")==(False)", "assert text_lowercase_underscore(\"Aaab_abbbc\")==(False)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "```python\ndef is_valid_identifier(s):\n    \"\"\"\n    Returns True if the input string contains sequences of lowercase letters\n    joined with an underscore, and False otherwise.\n    \n    Valid patterns:\n    - Single sequence of lowercase letters: \"hello\"\n    - Multiple sequences joined by underscore: \"hello_world\"\n    - Must contain only lowercase letters and underscores\n    - Cannot start or end with underscore\n    - Cannot have consecutive underscores\n    \"\"\"\n    if not s:\n        return False\n    \n    # Check if string starts or ends with underscore\n    if s.startswith('_') or s.endswith('_'):\n        return False\n    \n    # Split by underscore\n    parts = s.split('_')\n    \n    # Check if any part is empty (which would indicate consecutive underscores)\n    if any(len(part) == 0 for part in parts):\n        return False\n    \n    # Check if all parts contain only lowercase letters\n    for part in parts:\n        if not part.islower() or not part.isalpha():\n            return False\n    \n    return True\n```"}
{"benchmark": "mbpp", "task_id": "17", "prompt": "Write a function that returns the perimeter of a square given its side length as input.", "reference_code": "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter", "test_imports": [], "test_list": ["assert square_perimeter(10)==40", "assert square_perimeter(5)==20", "assert square_perimeter(4)==16"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "```python\ndef perimeter_of_square(side_length):\n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n    \n    Args:\n        side_length: The length of one side of the square\n        \n    Returns:\n        The perimeter of the square (4 times the side length)\n    \"\"\"\n    return 4 * side_length\n```"}
{"benchmark": "mbpp", "task_id": "12", "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "reference_code": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result", "test_imports": [], "test_list": ["assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"], "model_name": "openai/gpt-5", "generated_code": "```python\nfrom typing import Iterable, List, Sequence, Any\n\n\ndef sort_matrix_by_row_sum(matrix: Iterable[Iterable[float]]) -> List[List[float]]:\n    \"\"\"\n    Sort a matrix (iterable of row iterables) in ascending order based on the sum of its rows.\n\n    - Returns a new list of rows; the original matrix is not modified.\n    - Sorting is stable: rows with equal sums keep their relative order.\n\n    Args:\n        matrix: An iterable of iterables representing the matrix rows. Each row should\n                contain numeric values that can be summed.\n\n    Returns:\n        A list of rows sorted by ascending row sum. Rows are returned as lists.\n    \"\"\"\n    # Convert rows to lists to ensure consistent behavior if original rows are tuples/iterables\n    rows_as_lists: List[List[float]] = [list(row) for row in matrix]\n    return sorted(rows_as_lists, key=sum)\n```"}
{"benchmark": "mbpp", "task_id": "18", "prompt": "Write a function to remove characters from the first string which are present in the second string.", "reference_code": "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) ", "test_imports": [], "test_list": ["assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'", "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'", "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "```python\ndef remove_characters(first_string, second_string):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n    \n    Args:\n        first_string: The string to remove characters from\n        second_string: The string containing characters to remove\n    \n    Returns:\n        A new string with characters removed\n    \"\"\"\n    # Create a set of characters from the second string for O(1) lookup\n    chars_to_remove = set(second_string)\n    \n    # Build result string with only characters not in the removal set\n    result = ''.join(char for char in first_string if char not in chars_to_remove)\n    \n    return result\n```"}
{"benchmark": "mbpp", "task_id": "11", "prompt": "Write a python function to remove first and last occurrence of a given character from the string.", "reference_code": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ", "test_imports": [], "test_list": ["assert remove_Occ(\"hello\",\"l\") == \"heo\"", "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"", "assert remove_Occ(\"PHP\",\"P\") == \"H\""], "model_name": "openai/gpt-5", "generated_code": "```python\ndef remove_first_last_occurrence(s: str, ch: str) -> str:\n    \"\"\"\n    Remove the first and last occurrence of the given character `ch` from string `s`.\n    - If `ch` does not occur in `s`, return `s` unchanged.\n    - If `ch` occurs once, remove that single occurrence.\n    - If `ch` is empty or longer than one character, return `s` unchanged.\n\n    Examples:\n    - remove_first_last_occurrence(\"abca\", \"a\") -> \"bc\"\n    - remove_first_last_occurrence(\"banana\", \"a\") -> \"bann\"\n    - remove_first_last_occurrence(\"hello\", \"x\") -> \"hello\"\n    \"\"\"\n    if not isinstance(s, str) or not isinstance(ch, str) or len(ch) != 1:\n        return s\n\n    first = s.find(ch)\n    if first == -1:\n        return s\n\n    last = s.rfind(ch)\n\n    if first == last:\n        # Only one occurrence\n        return s[:first] + s[first + 1:]\n\n    # Remove both first and last occurrences\n    return s[:first] + s[first + 1:last] + s[last + 1:]\n```"}
{"benchmark": "mbpp", "task_id": "17", "prompt": "Write a function that returns the perimeter of a square given its side length as input.", "reference_code": "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter", "test_imports": [], "test_list": ["assert square_perimeter(10)==40", "assert square_perimeter(5)==20", "assert square_perimeter(4)==16"], "model_name": "openai/gpt-5", "generated_code": "```python\ndef square_perimeter(side):\n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n\n    Args:\n        side (int or float): The length of one side of the square.\n\n    Returns:\n        int or float: The perimeter of the square (4 * side).\n\n    Raises:\n        TypeError: If side is not a number.\n    \"\"\"\n    # Basic type validation to ensure meaningful behavior\n    if isinstance(side, bool):\n        # Treat bool separately to avoid confusion since bool is a subclass of int\n        return 4 * int(side)\n    if not isinstance(side, (int, float)):\n        raise TypeError(\"side must be a number\")\n\n    return 4 * side\n```"}
{"benchmark": "mbpp", "task_id": "19", "prompt": "Write a function to find whether a given array of integers contains any duplicate element.", "reference_code": "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     ", "test_imports": [], "test_list": ["assert test_duplicate(([1,2,3,4,5]))==False", "assert test_duplicate(([1,2,3,4, 4]))==True", "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "```python\ndef contains_duplicate(nums):\n    \"\"\"\n    Find whether a given array of integers contains any duplicate element.\n    \n    Args:\n        nums: List of integers\n        \n    Returns:\n        True if the array contains any duplicate element, False otherwise\n    \"\"\"\n    return len(nums) != len(set(nums))\n```"}
{"benchmark": "mbpp", "task_id": "16", "prompt": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.", "reference_code": "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False", "test_imports": [], "test_list": ["assert text_lowercase_underscore(\"aab_cbbbc\")==(True)", "assert text_lowercase_underscore(\"aab_Abbbc\")==(False)", "assert text_lowercase_underscore(\"Aaab_abbbc\")==(False)"], "model_name": "openai/gpt-5", "generated_code": "```python\nimport re\n\ndef check(s: str) -> bool:\n    \"\"\"\n    Return True if the input string consists of sequences of lowercase letters\n    joined with a single underscore, and False otherwise.\n\n    Valid examples: \"abc_def\", \"a_b_c\"\n    Invalid examples: \"abc\", \"abc_\", \"_abc\", \"ab__cd\", \"Abc_def\", \"abc- def\"\n    \"\"\"\n    if not isinstance(s, str):\n        return False\n    # Must be one or more lowercase letters separated by single underscores,\n    # requiring at least one underscore.\n    pattern = r'^[a-z]+(?:_[a-z]+)+$'\n    return re.fullmatch(pattern, s) is not None\n```"}
{"benchmark": "mbpp", "task_id": "20", "prompt": "Write a function to check if the given number is woodball or not.", "reference_code": "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False", "test_imports": [], "test_list": ["assert is_woodall(383) == True", "assert is_woodall(254) == False", "assert is_woodall(200) == False"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "```python\ndef is_woodball(n):\n    \"\"\"\n    Check if a number is a woodball number.\n    \n    A woodball number is a number that can be expressed as the sum of \n    consecutive integers starting from 1.\n    In other words, n = 1 + 2 + 3 + ... + k for some positive integer k.\n    This is equivalent to n = k(k+1)/2, which means n must be a triangular number.\n    \n    Args:\n        n: An integer to check\n        \n    Returns:\n        True if n is a woodball number, False otherwise\n    \"\"\"\n    if n <= 0:\n        return False\n    \n    # A number is triangular if 8n + 1 is a perfect square\n    # This comes from solving k(k+1)/2 = n for k\n    # k^2 + k - 2n = 0\n    # k = (-1 + sqrt(1 + 8n)) / 2\n    # For k to be a positive integer, 1 + 8n must be a perfect square\n    \n    discriminant = 1 + 8 * n\n    sqrt_discriminant = int(discriminant ** 0.5)\n    \n    # Check if discriminant is a perfect square\n    if sqrt_discriminant * sqrt_discriminant != discriminant:\n        return False\n    \n    # Check if k is a positive integer\n    if (sqrt_discriminant - 1) % 2 != 0:\n        return False\n    \n    return True\n```"}
{"benchmark": "mbpp", "task_id": "56", "prompt": "Write a python function to check if a given number is one less than twice its reverse.", "reference_code": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ", "test_imports": [], "test_list": ["assert check(70) == False", "assert check(23) == False", "assert check(73) == True"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "```python\ndef is_one_less_than_twice_reverse(n):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n    \n    Args:\n        n: An integer number\n        \n    Returns:\n        True if n == 2 * reverse(n) - 1, False otherwise\n    \"\"\"\n    # Get the reverse of the number\n    reversed_n = int(str(abs(n))[::-1])\n    \n    # Handle negative numbers - reverse the sign\n    if n < 0:\n        reversed_n = -reversed_n\n    \n    # Check if n is one less than twice its reverse\n    return n == 2 * reversed_n - 1\n```"}
{"benchmark": "mbpp", "task_id": "19", "prompt": "Write a function to find whether a given array of integers contains any duplicate element.", "reference_code": "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     ", "test_imports": [], "test_list": ["assert test_duplicate(([1,2,3,4,5]))==False", "assert test_duplicate(([1,2,3,4, 4]))==True", "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"], "model_name": "openai/gpt-5", "generated_code": "```python\nfrom typing import Iterable\n\ndef contains_duplicate(nums: Iterable[int]) -> bool:\n    \"\"\"\n    Determine if the given iterable of integers contains any duplicate element.\n\n    Args:\n        nums: An iterable of integers.\n\n    Returns:\n        True if any value appears at least twice, otherwise False.\n    \"\"\"\n    seen = set()\n    for x in nums:\n        if x in seen:\n            return True\n        seen.add(x)\n    return False\n```"}
{"benchmark": "mbpp", "task_id": "18", "prompt": "Write a function to remove characters from the first string which are present in the second string.", "reference_code": "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) ", "test_imports": [], "test_list": ["assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'", "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'", "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'"], "model_name": "openai/gpt-5", "generated_code": "```python\nfrom typing import Iterable\n\n\ndef removeChars(s1: str, s2: str) -> str:\n    \"\"\"\n    Remove all characters from s1 that are present in s2.\n    Preserves the original order of remaining characters.\n\n    Args:\n        s1: The source string.\n        s2: The string containing characters to remove from s1.\n\n    Returns:\n        A new string with characters from s1 that are not present in s2.\n    \"\"\"\n    if not s1:\n        return \"\"\n    if not s2:\n        return s1\n    remove_set = set(s2)\n    return \"\".join(ch for ch in s1 if ch not in remove_set)\n```"}
{"benchmark": "mbpp", "task_id": "57", "prompt": "Write a python function to find the largest number that can be formed with the given list of digits.", "reference_code": "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ", "test_imports": [], "test_list": ["assert find_Max_Num([1,2,3]) == 321", "assert find_Max_Num([4,5,6,1]) == 6541", "assert find_Max_Num([1,2,3,9]) == 9321"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "```python\ndef largest_number(digits):\n    \"\"\"\n    Find the largest number that can be formed with the given list of digits.\n    \n    Args:\n        digits: A list of integers (digits)\n    \n    Returns:\n        An integer representing the largest number that can be formed\n    \"\"\"\n    if not digits:\n        return 0\n    \n    # Convert digits to strings for sorting\n    digit_strings = [str(d) for d in digits]\n    \n    # Sort in descending order based on which arrangement is larger\n    # For example, 9 should come before 80, and 3 should come before 30\n    from functools import cmp_to_key\n    \n    def compare(x, y):\n        # Compare x+y vs y+x to determine order\n        if x + y > y + x:\n            return -1  # x should come before y\n        elif x + y < y + x:\n            return 1   # y should come before x\n        else:\n            return 0   # they are equal\n    \n    digit_strings.sort(key=cmp_to_key(compare))\n    \n    # Join the sorted digits\n    result = ''.join(digit_strings)\n    \n    # Handle the case where all digits are 0\n    if result[0] == '0':\n        return 0\n    \n    return int(result)\n```"}
{"benchmark": "mbpp", "task_id": "20", "prompt": "Write a function to check if the given number is woodball or not.", "reference_code": "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False", "test_imports": [], "test_list": ["assert is_woodall(383) == True", "assert is_woodall(254) == False", "assert is_woodall(200) == False"], "model_name": "openai/gpt-5", "generated_code": "```python\ndef is_woodball(number: int) -> bool:\n    \"\"\"\n    Check whether a given integer is a Woodall number.\n\n    A Woodall number has the form: n * 2^n - 1 for some integer n >= 1.\n    Examples: 1, 7, 23, 63, 159, ...\n\n    Parameters:\n        number (int): The number to check.\n\n    Returns:\n        bool: True if 'number' is a Woodall number, False otherwise.\n    \"\"\"\n    if not isinstance(number, int) or number < 1:\n        return False\n\n    k = 1\n    power_of_two = 2  # 2^1\n    val = k * power_of_two - 1\n\n    while val < number:\n        k += 1\n        power_of_two <<= 1  # multiply by 2\n        val = k * power_of_two - 1\n\n    return val == number\n```"}
{"benchmark": "mbpp", "task_id": "57", "prompt": "Write a python function to find the largest number that can be formed with the given list of digits.", "reference_code": "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ", "test_imports": [], "test_list": ["assert find_Max_Num([1,2,3]) == 321", "assert find_Max_Num([4,5,6,1]) == 6541", "assert find_Max_Num([1,2,3,9]) == 9321"], "model_name": "openai/gpt-5", "generated_code": "```python\nfrom typing import Iterable, Union\n\ndef largest_num(digits: Iterable[Union[int, str]]) -> int:\n    \"\"\"\n    Return the largest possible integer formed by concatenating the given digits.\n    Accepts an iterable of ints or numeric strings representing single digits (0-9).\n    For an empty input, returns 0.\n    \"\"\"\n    # Normalize to integers\n    normalized = []\n    for d in digits:\n        # Convert to int, handling strings\n        try:\n            val = int(d)\n        except Exception as e:\n            raise ValueError(\"All elements must be digits (0-9) as ints or numeric strings.\") from e\n        if val < 0 or val > 9:\n            raise ValueError(\"All elements must be single digits in the range 0-9.\")\n        normalized.append(val)\n\n    if not normalized:\n        return 0\n\n    normalized.sort(reverse=True)\n    # Convert to integer; int('000') -> 0 covers all-zero case\n    return int(''.join(str(x) for x in normalized))\n```"}
{"benchmark": "mbpp", "task_id": "56", "prompt": "Write a python function to check if a given number is one less than twice its reverse.", "reference_code": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ", "test_imports": [], "test_list": ["assert check(70) == False", "assert check(23) == False", "assert check(73) == True"], "model_name": "openai/gpt-5", "generated_code": "```python\ndef is_one_less_than_twice_its_reverse(n: int) -> bool:\n    \"\"\"\n    Check if the given integer n is one less than twice its reverse.\n    Reverse is computed in base-10. The sign of n is preserved for the reverse.\n\n    Returns:\n        True if n == 2 * reverse(n) - 1, else False.\n    \"\"\"\n    def reverse_with_sign(x: int) -> int:\n        sign = -1 if x < 0 else 1\n        rev = int(str(abs(x))[::-1])\n        return sign * rev\n\n    r = reverse_with_sign(n)\n    return n == 2 * r - 1\n```"}
{"benchmark": "mbpp", "task_id": "14", "prompt": "Write a python function to find the volume of a triangular prism.", "reference_code": "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) ", "test_imports": [], "test_list": ["assert find_Volume(10,8,6) == 240", "assert find_Volume(3,2,2) == 6", "assert find_Volume(1,2,1) == 1"], "model_name": "openai/gpt-5", "generated_code": ""}
