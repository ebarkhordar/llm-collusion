{"benchmark": "mbpp", "task_id": "12", "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "reference_code": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result", "test_imports": [], "test_list": ["assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "```python\ndef sort_matrix(matrix):\n    \"\"\"\n    Sort a given matrix in ascending order according to the sum of its rows.\n    \n    Args:\n        matrix: A list of lists representing a matrix\n        \n    Returns:\n        A new matrix sorted by row sums in ascending order\n    \"\"\"\n    return sorted(matrix, key=sum)\n```"}
{"benchmark": "mbpp", "task_id": "11", "prompt": "Write a python function to remove first and last occurrence of a given character from the string.", "reference_code": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ", "test_imports": [], "test_list": ["assert remove_Occ(\"hello\",\"l\") == \"heo\"", "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"", "assert remove_Occ(\"PHP\",\"P\") == \"H\""], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "```python\ndef remove_Occ(s, ch):\n    \"\"\"\n    Remove the first and last occurrence of a given character from the string.\n    \n    Args:\n        s: The input string\n        ch: The character to remove\n    \n    Returns:\n        The string with first and last occurrence of ch removed\n    \"\"\"\n    if not s or ch not in s:\n        return s\n    \n    # Find the first occurrence\n    first_index = s.find(ch)\n    \n    # Find the last occurrence\n    last_index = s.rfind(ch)\n    \n    # If first and last are the same (only one occurrence), remove it\n    if first_index == last_index:\n        return s[:first_index] + s[first_index + 1:]\n    \n    # Remove both first and last occurrences\n    # Build the result by concatenating parts before first, between first and last, and after last\n    result = s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]\n    \n    return result\n```"}
{"benchmark": "mbpp", "task_id": "14", "prompt": "Write a python function to find the volume of a triangular prism.", "reference_code": "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) ", "test_imports": [], "test_list": ["assert find_Volume(10,8,6) == 240", "assert find_Volume(3,2,2) == 6", "assert find_Volume(1,2,1) == 1"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "```python\ndef find_Volume(base, height, length):\n    \"\"\"\n    Find the volume of a triangular prism.\n    \n    Args:\n        base: The base of the triangular face\n        height: The height of the triangular face\n        length: The length (depth) of the prism\n    \n    Returns:\n        The volume of the triangular prism\n    \"\"\"\n    # Volume of triangular prism = (1/2 * base * height) * length\n    # where (1/2 * base * height) is the area of the triangular face\n    volume = (0.5 * base * height) * length\n    return volume\n```"}
{"benchmark": "mbpp", "task_id": "16", "prompt": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.", "reference_code": "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False", "test_imports": [], "test_list": ["assert text_lowercase_underscore(\"aab_cbbbc\")==(True)", "assert text_lowercase_underscore(\"aab_Abbbc\")==(False)", "assert text_lowercase_underscore(\"Aaab_abbbc\")==(False)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "```python\ndef text_lowercase_underscore(s):\n    \"\"\"\n    Returns True if the input string contains sequences of lowercase letters\n    joined with an underscore, False otherwise.\n    \n    A valid pattern is: lowercase letters, underscore, lowercase letters, etc.\n    Examples:\n    - \"hello_world\" -> True\n    - \"hello_world_foo\" -> True\n    - \"hello\" -> True (single sequence of lowercase letters)\n    - \"Hello_world\" -> False (contains uppercase)\n    - \"hello_\" -> False (ends with underscore)\n    - \"_hello\" -> False (starts with underscore)\n    - \"hello__world\" -> False (double underscore)\n    - \"hello_123\" -> False (contains digits)\n    - \"\" -> False (empty string)\n    \"\"\"\n    if not s:\n        return False\n    \n    # Split by underscore\n    parts = s.split('_')\n    \n    # All parts must be non-empty and contain only lowercase letters\n    if len(parts) == 0:\n        return False\n    \n    for part in parts:\n        if not part or not part.islower() or not part.isalpha():\n            return False\n    \n    return True\n```"}
{"benchmark": "mbpp", "task_id": "17", "prompt": "Write a function that returns the perimeter of a square given its side length as input.", "reference_code": "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter", "test_imports": [], "test_list": ["assert square_perimeter(10)==40", "assert square_perimeter(5)==20", "assert square_perimeter(4)==16"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "```python\ndef square_perimeter(side):\n    \"\"\"\n    Returns the perimeter of a square given its side length.\n    \n    Args:\n        side: The length of one side of the square\n        \n    Returns:\n        The perimeter of the square (4 * side)\n    \"\"\"\n    return 4 * side\n```"}
