{"benchmark": "mbpp", "task_id": "554", "prompt": "Write a python function which takes a list of integers and only returns the odd ones.", "reference_code": "def Split(list): \n    od_li = [] \n    for i in list: \n        if (i % 2 != 0): \n            od_li.append(i)  \n    return od_li", "test_imports": [], "test_list": ["assert Split([1,2,3,4,5,6]) == [1,3,5]", "assert Split([10,11,12,13]) == [11,13]", "assert Split([7,8,9,1]) == [7,9,1]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def Split(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"benchmark": "mbpp", "task_id": "582", "prompt": "Write a function to check if a dictionary is empty", "reference_code": "def my_dict(dict1):\n  if bool(dict1):\n     return False\n  else:\n     return True", "test_imports": [], "test_list": ["assert my_dict({10})==False", "assert my_dict({11})==False", "assert my_dict({})==True"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def my_dict(d):\n    \"\"\"\n    Check if a dictionary is empty.\n    \n    Args:\n        d: A dictionary to check\n        \n    Returns:\n        True if the dictionary is empty, False otherwise\n    \"\"\"\n    return len(d) == 0"}
{"benchmark": "mbpp", "task_id": "566", "prompt": "Write a function to get the sum of the digits of a non-negative integer.", "reference_code": "def sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))", "test_imports": [], "test_list": ["assert sum_digits(345)==12", "assert sum_digits(12)==3", "assert sum_digits(97)==16"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def sum_digits(n):\n    \"\"\"\n    Return the sum of the digits of a non-negative integer.\n    \n    Args:\n        n: A non-negative integer\n        \n    Returns:\n        The sum of all digits in n\n    \"\"\"\n    return sum(int(digit) for digit in str(n))"}
{"benchmark": "mbpp", "task_id": "568", "prompt": "Write a function to create a list of N empty dictionaries.", "reference_code": "def empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list", "test_imports": [], "test_list": ["assert empty_list(5)==[{},{},{},{},{}]", "assert empty_list(6)==[{},{},{},{},{},{}]", "assert empty_list(7)==[{},{},{},{},{},{},{}]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def empty_list(n):\n    return [{} for _ in range(n)]"}
{"benchmark": "mbpp", "task_id": "572", "prompt": "Write a python function to remove duplicate numbers from a given number of lists.", "reference_code": "def two_unique_nums(nums):\n  return [i for i in nums if nums.count(i)==1]", "test_imports": [], "test_list": ["assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]", "assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]", "assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def two_unique_nums(lists):\n    \"\"\"\n    Remove duplicate numbers from a given list of lists.\n    \n    Args:\n        lists: A list of lists containing numbers\n        \n    Returns:\n        A list of lists with duplicates removed from each sublist\n    \"\"\"\n    return [list(dict.fromkeys(sublist)) for sublist in lists]"}
{"benchmark": "mbpp", "task_id": "562", "prompt": "Write a python function to find the length of the longest sublists.", "reference_code": "def Find_Max_Length(lst):  \n    maxLength = max(len(x) for x in lst )\n    return maxLength ", "test_imports": [], "test_list": ["assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4", "assert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3", "assert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def Find_Max_Length(lists):\n    \"\"\"\n    Find the length of the longest sublist.\n    \n    Args:\n        lists: A list of lists (or iterable of iterables)\n    \n    Returns:\n        The length of the longest sublist, or 0 if the input is empty\n    \"\"\"\n    if not lists:\n        return 0\n    \n    return max(len(sublist) for sublist in lists)"}
{"benchmark": "mbpp", "task_id": "573", "prompt": "Write a python function to calculate the product of the unique numbers in a given list.", "reference_code": "def unique_product(list_data):\n    temp = list(set(list_data))\n    p = 1\n    for i in temp:\n        p *= i\n    return p", "test_imports": [], "test_list": ["assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000", "assert unique_product([1, 2, 3, 1,]) == 6", "assert unique_product([7, 8, 9, 0, 1, 1]) == 0"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def unique_product(numbers):\n    \"\"\"\n    Calculate the product of the unique numbers in a given list.\n    \n    Args:\n        numbers: A list of numbers\n        \n    Returns:\n        The product of all unique numbers in the list\n    \"\"\"\n    if not numbers:\n        return 1\n    \n    unique_numbers = set(numbers)\n    product = 1\n    \n    for num in unique_numbers:\n        product *= num\n    \n    return product"}
{"benchmark": "mbpp", "task_id": "557", "prompt": "Write a function to toggle the case of all characters in a string.", "reference_code": "def toggle_string(string):\n string1 = string.swapcase()\n return string1", "test_imports": [], "test_list": ["assert toggle_string(\"Python\")==(\"pYTHON\")", "assert toggle_string(\"Pangram\")==(\"pANGRAM\")", "assert toggle_string(\"LIttLE\")==(\"liTTle\")"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def toggle_string(s: str) -> str:\n    \"\"\"\n    Toggle the case of all characters in a string.\n    Uppercase characters become lowercase, lowercase become uppercase.\n    Non-alphabetic characters remain unchanged.\n    \n    Args:\n        s: Input string\n        \n    Returns:\n        String with toggled case for all characters\n    \"\"\"\n    return s.swapcase()"}
{"benchmark": "mbpp", "task_id": "576", "prompt": "Write a python function to check whether a list is sublist of another or not.", "reference_code": "def is_Sub_Array(A,B): \n    n = len(A)\n    m = len(B)\n    i = 0; j = 0; \n    while (i < n and j < m):  \n        if (A[i] == B[j]): \n            i += 1; \n            j += 1; \n            if (j == m): \n                return True;  \n        else: \n            i = i - j + 1; \n            j = 0;       \n    return False; ", "test_imports": [], "test_list": ["assert is_Sub_Array([1,4,3,5],[1,2]) == False", "assert is_Sub_Array([1,2,1],[1,2,1]) == True", "assert is_Sub_Array([1,0,2,2],[2,2,0]) ==False"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def is_Sub_Array(main_list, sub_list):\n    \"\"\"\n    Check whether sub_list is a contiguous sublist of main_list.\n    \n    Args:\n        main_list: The main list to search in\n        sub_list: The sublist to search for\n    \n    Returns:\n        True if sub_list is a contiguous sublist of main_list, False otherwise\n    \"\"\"\n    if not sub_list:\n        return True\n    \n    if len(sub_list) > len(main_list):\n        return False\n    \n    sub_len = len(sub_list)\n    \n    for i in range(len(main_list) - sub_len + 1):\n        if main_list[i:i + sub_len] == sub_list:\n            return True\n    \n    return False"}
{"benchmark": "mbpp", "task_id": "569", "prompt": "Write a function to sort each sublist of strings in a given list of lists.", "reference_code": "def sort_sublists(list1):\n    result = list(map(sorted,list1)) \n    return result", "test_imports": [], "test_list": ["assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]", "assert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]", "assert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def sort_sublists(list_of_lists):\n    \"\"\"\n    Sort each sublist of strings in a given list of lists.\n    \n    Args:\n        list_of_lists: A list containing sublists of strings\n        \n    Returns:\n        A list of lists where each sublist is sorted\n    \"\"\"\n    return [sorted(sublist) for sublist in list_of_lists]"}
{"benchmark": "mbpp", "task_id": "574", "prompt": "Write a function to find the surface area of a cylinder.", "reference_code": "def surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea", "test_imports": [], "test_list": ["assert surfacearea_cylinder(10,5)==942.45", "assert surfacearea_cylinder(4,5)==226.18800000000002", "assert surfacearea_cylinder(4,10)==351.848"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "import math\n\ndef surfacearea_cylinder(radius, height):\n    \"\"\"\n    Calculate the surface area of a cylinder.\n    \n    Surface area formula: 2πr² + 2πrh\n    where r is the radius and h is the height\n    \n    Args:\n        radius: The radius of the cylinder\n        height: The height of the cylinder\n    \n    Returns:\n        The surface area of the cylinder\n    \"\"\"\n    return 2 * math.pi * radius**2 + 2 * math.pi * radius * height"}
{"benchmark": "mbpp", "task_id": "558", "prompt": "Write a python function to find the sum of the per-digit difference between two integers.", "reference_code": "def digit_distance_nums(n1, n2):\n         return sum(map(int,str(abs(n1-n2))))", "test_imports": [], "test_list": ["assert digit_distance_nums(1,2) == 1", "assert digit_distance_nums(23,56) == 6", "assert digit_distance_nums(123,256) == 7"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def digit_distance_nums(num1, num2):\n    \"\"\"\n    Find the sum of the per-digit difference between two integers.\n    \n    Args:\n        num1: First integer\n        num2: Second integer\n    \n    Returns:\n        Sum of absolute differences between corresponding digits\n    \"\"\"\n    # Convert to strings and handle negative numbers\n    str1 = str(abs(num1))\n    str2 = str(abs(num2))\n    \n    # Pad the shorter string with leading zeros\n    max_len = max(len(str1), len(str2))\n    str1 = str1.zfill(max_len)\n    str2 = str2.zfill(max_len)\n    \n    # Calculate sum of per-digit differences\n    total = sum(abs(int(d1) - int(d2)) for d1, d2 in zip(str1, str2))\n    \n    return total"}
{"benchmark": "mbpp", "task_id": "567", "prompt": "Write a function to check whether a specified list is sorted or not.", "reference_code": "def issort_list(list1):\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    return result", "test_imports": [], "test_list": ["assert issort_list([1,2,4,6,8,10,12,14,16,17])==True", "assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False", "assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def issort_list(lst):\n    \"\"\"\n    Check whether a specified list is sorted or not.\n    \n    Args:\n        lst: A list to check if it's sorted\n        \n    Returns:\n        True if the list is sorted in ascending order, False otherwise\n    \"\"\"\n    if len(lst) <= 1:\n        return True\n    \n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    \n    return True"}
{"benchmark": "mbpp", "task_id": "555", "prompt": "Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.", "reference_code": "def difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  ", "test_imports": [], "test_list": ["assert difference(3) == 30", "assert difference(5) == 210", "assert difference(2) == 6"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def difference(n):\n    \"\"\"\n    Find the difference between the sum of cubes of the first n natural numbers\n    and the sum of the first n natural numbers.\n    \n    Args:\n        n: A positive integer\n        \n    Returns:\n        The difference between sum of cubes and sum of first n natural numbers\n    \"\"\"\n    # Sum of first n natural numbers: n(n+1)/2\n    sum_of_numbers = n * (n + 1) // 2\n    \n    # Sum of cubes of first n natural numbers: [n(n+1)/2]^2\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    \n    # Return the difference\n    return sum_of_cubes - sum_of_numbers"}
{"benchmark": "mbpp", "task_id": "556", "prompt": "Write a python function to count the number of pairs whose xor value is odd.", "reference_code": "def find_Odd_Pair(A,N) : \n    oddPair = 0\n    for i in range(0,N) :  \n        for j in range(i+1,N) :  \n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair+=1  \n    return oddPair  ", "test_imports": [], "test_list": ["assert find_Odd_Pair([5,4,7,2,1],5) == 6", "assert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12", "assert find_Odd_Pair([1,2,3],3) == 2"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def find_Odd_Pair(arr):\n    \"\"\"\n    Count the number of pairs whose XOR value is odd.\n    \n    XOR of two numbers is odd if and only if one number is even and the other is odd.\n    This is because:\n    - even XOR even = even (last bit: 0 XOR 0 = 0)\n    - odd XOR odd = even (last bit: 1 XOR 1 = 0)\n    - even XOR odd = odd (last bit: 0 XOR 1 = 1)\n    - odd XOR even = odd (last bit: 1 XOR 0 = 1)\n    \n    So we need to count pairs where one element is even and one is odd.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    \n    # Count even and odd numbers in the array\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Number of pairs with one even and one odd number\n    return even_count * odd_count"}
{"benchmark": "mbpp", "task_id": "579", "prompt": "Write a function to find the dissimilar elements in the given two tuples.", "reference_code": "def find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) ", "test_imports": [], "test_list": ["assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)", "assert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)", "assert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def find_dissimilar(tuple1, tuple2):\n    \"\"\"\n    Find the dissimilar elements in the given two tuples.\n    Returns elements that are in one tuple but not in the other.\n    \"\"\"\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    \n    # Find symmetric difference: elements in either set but not in both\n    dissimilar = set1.symmetric_difference(set2)\n    \n    return tuple(sorted(dissimilar))"}
{"benchmark": "mbpp", "task_id": "559", "prompt": "Write a function to find the sum of the largest contiguous sublist in the given list.", "reference_code": "def max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far", "test_imports": [], "test_list": ["assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7", "assert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8", "assert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def max_sub_array_sum(arr):\n    \"\"\"\n    Find the sum of the largest contiguous subarray using Kadane's algorithm.\n    \n    Args:\n        arr: A list of integers\n        \n    Returns:\n        The maximum sum of any contiguous subarray\n    \"\"\"\n    if not arr:\n        return 0\n    \n    max_current = arr[0]\n    max_global = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_current = max(arr[i], max_current + arr[i])\n        max_global = max(max_global, max_current)\n    \n    return max_global"}
{"benchmark": "mbpp", "task_id": "565", "prompt": "Write a python function to split a string into characters.", "reference_code": "def split(word): \n    return [char for char in word] ", "test_imports": [], "test_list": ["assert split('python') == ['p','y','t','h','o','n']", "assert split('Name') == ['N','a','m','e']", "assert split('program') == ['p','r','o','g','r','a','m']"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def split(s):\n    \"\"\"\n    Split a string into characters.\n    \n    Args:\n        s: A string to split into characters\n        \n    Returns:\n        A list of characters from the string\n    \"\"\"\n    return list(s)"}
{"benchmark": "mbpp", "task_id": "560", "prompt": "Write a function to find the union of the elements of two given tuples and output them in sorted order.", "reference_code": "def union_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1 + test_tup2))\n  return (res) ", "test_imports": [], "test_list": ["assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)", "assert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)", "assert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def union_elements(tuple1, tuple2):\n    \"\"\"\n    Find the union of elements from two tuples and return them in sorted order.\n    \n    Args:\n        tuple1: First tuple\n        tuple2: Second tuple\n    \n    Returns:\n        A sorted tuple containing unique elements from both tuples\n    \"\"\"\n    union_set = set(tuple1) | set(tuple2)\n    return tuple(sorted(union_set))"}
{"benchmark": "mbpp", "task_id": "578", "prompt": "Write a function to interleave 3 lists of the same length into a single flat list.", "reference_code": "def interleave_lists(list1,list2,list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result", "test_imports": [], "test_list": ["assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]", "assert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]", "assert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Interleave 3 lists of the same length into a single flat list.\n    \n    Args:\n        list1: First list\n        list2: Second list\n        list3: Third list\n    \n    Returns:\n        A single flat list with elements interleaved from all three lists\n    \"\"\"\n    result = []\n    for item1, item2, item3 in zip(list1, list2, list3):\n        result.extend([item1, item2, item3])\n    return result"}
{"benchmark": "mbpp", "task_id": "580", "prompt": "Write a function to remove uneven elements in the nested mixed tuple.", "reference_code": "def even_ele(test_tuple, even_fnc): \n\tres = tuple() \n\tfor ele in test_tuple: \n\t\tif isinstance(ele, tuple): \n\t\t\tres += (even_ele(ele, even_fnc), ) \n\t\telif even_fnc(ele): \n\t\t\tres += (ele, ) \n\treturn res \ndef extract_even(test_tuple):\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\n  return (res) ", "test_imports": [], "test_list": ["assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)", "assert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))", "assert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def extract_even(data):\n    \"\"\"\n    Remove uneven (odd) elements from a nested mixed tuple.\n    \n    Args:\n        data: A nested mixed tuple that may contain integers, tuples, and other types\n        \n    Returns:\n        A new tuple with odd numbers removed, recursively processing nested tuples\n    \"\"\"\n    result = []\n    \n    for item in data:\n        if isinstance(item, tuple):\n            # Recursively process nested tuples\n            result.append(extract_even(item))\n        elif isinstance(item, int):\n            # Keep only even integers\n            if item % 2 == 0:\n                result.append(item)\n        else:\n            # Keep non-integer items as-is\n            result.append(item)\n    \n    return tuple(result)"}
{"benchmark": "mbpp", "task_id": "581", "prompt": "Write a python function to find the surface area of a square pyramid with a given base edge and height.", "reference_code": "def surface_Area(b,s): \n    return 2 * b * s + pow(b,2) ", "test_imports": [], "test_list": ["assert surface_Area(3,4) == 33", "assert surface_Area(4,5) == 56", "assert surface_Area(1,2) == 5"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def surface_Area(base_edge, height):\n    \"\"\"\n    Calculate the surface area of a square pyramid.\n    \n    Args:\n        base_edge: The length of one edge of the square base\n        height: The perpendicular height of the pyramid\n    \n    Returns:\n        The total surface area of the square pyramid\n    \"\"\"\n    # Area of the square base\n    base_area = base_edge ** 2\n    \n    # Calculate the slant height using Pythagorean theorem\n    # The distance from center of base to midpoint of base edge is base_edge/2\n    # Slant height = sqrt(height^2 + (base_edge/2)^2)\n    slant_height = (height ** 2 + (base_edge / 2) ** 2) ** 0.5\n    \n    # Area of one triangular face = (1/2) * base * slant_height\n    # There are 4 triangular faces\n    triangular_area = 4 * (0.5 * base_edge * slant_height)\n    \n    # Total surface area = base area + lateral area\n    total_surface_area = base_area + triangular_area\n    \n    return total_surface_area"}
{"benchmark": "mbpp", "task_id": "564", "prompt": "Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.", "reference_code": "def count_Pairs(arr,n): \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt; ", "test_imports": [], "test_list": ["assert count_Pairs([1,2,1],3) == 2", "assert count_Pairs([1,1,1,1],4) == 0", "assert count_Pairs([1,2,3,4,5],5) == 10"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def count_Pairs(lst):\n    \"\"\"\n    Counts the number of possible unordered pairs where both elements are unequal.\n    \n    Args:\n        lst: A list of integers\n        \n    Returns:\n        The number of unordered pairs with unequal elements\n    \"\"\"\n    n = len(lst)\n    count = 0\n    \n    # Iterate through all pairs (i, j) where i < j\n    for i in range(n):\n        for j in range(i + 1, n):\n            # Count pairs where elements are unequal\n            if lst[i] != lst[j]:\n                count += 1\n    \n    return count"}
{"benchmark": "mbpp", "task_id": "563", "prompt": "Write a function to extract values between quotation marks from a string.", "reference_code": "import re\ndef extract_values(text):\n return (re.findall(r'\"(.*?)\"', text))", "test_imports": [], "test_list": ["assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']", "assert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']", "assert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def extract_values(text):\n    \"\"\"\n    Extract values between quotation marks from a string.\n    \n    Handles both single and double quotes.\n    Returns a list of extracted values.\n    \"\"\"\n    values = []\n    i = 0\n    while i < len(text):\n        if text[i] in ('\"', \"'\"):\n            quote_char = text[i]\n            i += 1\n            value = \"\"\n            while i < len(text) and text[i] != quote_char:\n                if text[i] == '\\\\' and i + 1 < len(text):\n                    # Handle escaped characters\n                    i += 1\n                    value += text[i]\n                else:\n                    value += text[i]\n                i += 1\n            if i < len(text):  # Found closing quote\n                values.append(value)\n                i += 1\n            else:  # No closing quote found\n                values.append(value)\n        else:\n            i += 1\n    return values"}
{"benchmark": "mbpp", "task_id": "577", "prompt": "Write a python function to find the last digit in factorial of a given number.", "reference_code": "def last_Digit_Factorial(n): \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0", "test_imports": [], "test_list": ["assert last_Digit_Factorial(4) == 4", "assert last_Digit_Factorial(21) == 0", "assert last_Digit_Factorial(30) == 0"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def last_Digit_Factorial(n):\n    \"\"\"\n    Find the last digit in factorial of a given number.\n    \n    The last digit of n! is determined by counting trailing zeros and the last non-zero digit.\n    For n >= 5, n! always ends with at least one zero.\n    \n    We can use the property that we only need to track the last digit through multiplication,\n    but we need to handle trailing zeros carefully.\n    \n    A more efficient approach: for n >= 5, the last digit is always 0 because n! contains\n    factors of both 2 and 5, creating factors of 10.\n    \n    For n < 5, we can compute directly.\n    \"\"\"\n    if n < 0:\n        return 0\n    \n    if n < 2:\n        return 1\n    \n    # For n >= 5, n! will have trailing zeros, so last digit is 0\n    if n >= 5:\n        return 0\n    \n    # For n in [2, 3, 4], compute directly\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    \n    return factorial % 10"}
{"benchmark": "mbpp", "task_id": "587", "prompt": "Write a function to convert a list to a tuple.", "reference_code": "def list_tuple(listx):\n  tuplex = tuple(listx)\n  return tuplex", "test_imports": [], "test_list": ["assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)", "assert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)", "assert list_tuple([58,44,56])==(58,44,56)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def list_tuple(lst):\n    \"\"\"Convert a list to a tuple.\"\"\"\n    return tuple(lst)"}
{"benchmark": "mbpp", "task_id": "591", "prompt": "Write a python function to interchange the first and last elements in a list.", "reference_code": "def swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp  \n    return newList ", "test_imports": [], "test_list": ["assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]", "assert swap_List([1, 2, 3]) == [3, 2, 1]", "assert swap_List([4, 5, 6]) == [6, 5, 4]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def swap_List(lst):\n    \"\"\"\n    Interchange the first and last elements in a list.\n    \n    Args:\n        lst: A list with at least one element\n        \n    Returns:\n        The list with first and last elements swapped\n    \"\"\"\n    if len(lst) <= 1:\n        return lst\n    \n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"benchmark": "mbpp", "task_id": "590", "prompt": "Write a function to convert polar coordinates to rectangular coordinates.", "reference_code": "import cmath\ndef polar_rect(x,y):\n cn = complex(x,y)\n cn=cmath.polar(cn)\n cn1 = cmath.rect(2, cmath.pi)\n return (cn,cn1)", "test_imports": [], "test_list": ["assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))", "assert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))", "assert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "import math\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \n    Args:\n        r: The radial distance (magnitude)\n        theta: The angle in radians\n    \n    Returns:\n        A tuple (x, y) representing the rectangular coordinates\n    \"\"\"\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y)"}
{"benchmark": "mbpp", "task_id": "584", "prompt": "Write a function to find the first adverb ending with ly and its positions in a given string.", "reference_code": "import re\ndef find_adverbs(text):\n  for m in re.finditer(r\"\\w+ly\", text):\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))", "test_imports": [], "test_list": ["assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'", "assert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'", "assert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def find_adverbs(text):\n    \"\"\"\n    Find the first adverb ending with 'ly' and its positions in a given string.\n    \n    Args:\n        text: A string to search for adverbs\n        \n    Returns:\n        A tuple containing (adverb, start_position, end_position) or None if no adverb found\n    \"\"\"\n    if not text:\n        return None\n    \n    words = text.split()\n    current_pos = 0\n    \n    for word in words:\n        # Find the position of this word in the original text\n        word_start = text.find(word, current_pos)\n        \n        if word_start == -1:\n            current_pos += len(word)\n            continue\n        \n        # Clean the word of punctuation to check if it ends with 'ly'\n        clean_word = word.rstrip('.,!?;:\\'\"')\n        \n        if clean_word.lower().endswith('ly') and len(clean_word) > 2:\n            # Check if it's likely an adverb (has at least 3 characters and ends with ly)\n            word_end = word_start + len(word)\n            return (word, word_start, word_end)\n        \n        current_pos = word_start + len(word)\n    \n    return None"}
{"benchmark": "mbpp", "task_id": "586", "prompt": "Write a python function to split a list at the nth eelment and add the first part to the end.", "reference_code": "def split_Arr(l, n):\n  return l[n:] + l[:n]", "test_imports": [], "test_list": ["assert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]", "assert split_Arr([1,2,3,4],1) == [2,3,4,1]", "assert split_Arr([0,1,2,3,4,5,6,7],3) == [3,4,5,6,7,0,1,2]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def split_Arr(arr, n):\n    \"\"\"\n    Split a list at the nth element and add the first part to the end.\n    \n    Args:\n        arr: The input list\n        n: The index at which to split\n    \n    Returns:\n        A new list with elements from index n onwards, followed by elements before index n\n    \"\"\"\n    if not arr or n <= 0 or n >= len(arr):\n        return arr\n    \n    return arr[n:] + arr[:n]"}
{"benchmark": "mbpp", "task_id": "588", "prompt": "Write a python function to find the difference between largest and smallest value in a given list.", "reference_code": "def big_diff(nums):\n     diff= max(nums)-min(nums)\n     return diff", "test_imports": [], "test_list": ["assert big_diff([1,2,3,4]) == 3", "assert big_diff([4,5,12]) == 8", "assert big_diff([9,2,3]) == 7"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def big_diff(lst):\n    \"\"\"\n    Find the difference between the largest and smallest value in a given list.\n    \n    Args:\n        lst: A list of numbers\n        \n    Returns:\n        The difference between the maximum and minimum values in the list\n    \"\"\"\n    if not lst:\n        return 0\n    \n    return max(lst) - min(lst)"}
{"benchmark": "mbpp", "task_id": "585", "prompt": "Write a function to find the n most expensive items in a given dataset.", "reference_code": "import heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items", "test_imports": [], "test_list": ["assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]", "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]", "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def expensive_items(data, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n    \n    Args:\n        data: A list of dictionaries with 'price' key, or a list of tuples (name, price)\n        n: Number of most expensive items to return\n    \n    Returns:\n        A list of the n most expensive items, sorted by price in descending order\n    \"\"\"\n    if not data or n <= 0:\n        return []\n    \n    # Handle different data formats\n    if isinstance(data, list) and len(data) > 0:\n        first_item = data[0]\n        \n        # If items are dictionaries with 'price' key\n        if isinstance(first_item, dict) and 'price' in first_item:\n            sorted_data = sorted(data, key=lambda x: x['price'], reverse=True)\n        # If items are tuples/lists with price as second element\n        elif isinstance(first_item, (tuple, list)) and len(first_item) >= 2:\n            sorted_data = sorted(data, key=lambda x: x[1], reverse=True)\n        else:\n            # Assume items are comparable directly (numbers)\n            sorted_data = sorted(data, reverse=True)\n    else:\n        return []\n    \n    return sorted_data[:n]"}
{"benchmark": "mbpp", "task_id": "593", "prompt": "Write a function to remove leading zeroes from an ip address.", "reference_code": "import re\ndef removezero_ip(ip):\n string = re.sub('\\.[0]*', '.', ip)\n return string\n", "test_imports": [], "test_list": ["assert removezero_ip(\"216.08.094.196\")==('216.8.94.196')", "assert removezero_ip(\"12.01.024\")==('12.1.24')", "assert removezero_ip(\"216.08.094.0196\")==('216.8.94.196')"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def removezero_ip(ip):\n    \"\"\"\n    Remove leading zeroes from an IP address.\n    \n    Args:\n        ip: A string representing an IP address (e.g., \"192.168.001.1\")\n    \n    Returns:\n        A string with leading zeroes removed from each octet (e.g., \"192.168.1.1\")\n    \"\"\"\n    octets = ip.split('.')\n    result = [str(int(octet)) for octet in octets]\n    return '.'.join(result)"}
{"benchmark": "mbpp", "task_id": "583", "prompt": "Write a function which returns nth catalan number.", "reference_code": "def catalan_number(num):\n    if num <=1:\n         return 1   \n    res_num = 0\n    for i in range(num):\n        res_num += catalan_number(i) * catalan_number(num-i-1)\n    return res_num", "test_imports": [], "test_list": ["assert catalan_number(10)==16796", "assert catalan_number(9)==4862", "assert catalan_number(7)==429"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def catalan_number(n: int) -> int:\n    \"\"\"\n    Returns the nth Catalan number.\n    \n    The nth Catalan number is given by:\n    C(n) = (2n)! / ((n+1)! * n!)\n    \n    Or equivalently:\n    C(n) = C(0)*C(n-1) + C(1)*C(n-2) + ... + C(n-1)*C(0)\n    \n    Args:\n        n: The index of the Catalan number to compute\n        \n    Returns:\n        The nth Catalan number\n    \"\"\"\n    if n <= 1:\n        return 1\n    \n    # Use dynamic programming to compute Catalan numbers\n    catalan = [0] * (n + 1)\n    catalan[0] = 1\n    catalan[1] = 1\n    \n    for i in range(2, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - 1 - j]\n    \n    return catalan[n]"}
{"benchmark": "mbpp", "task_id": "592", "prompt": "Write a python function to find the sum of the product of consecutive binomial co-efficients.", "reference_code": "def binomial_Coeff(n,k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n): \n    return binomial_Coeff(2 * n,n - 1); ", "test_imports": [], "test_list": ["assert sum_Of_product(3) == 15", "assert sum_Of_product(4) == 56", "assert sum_Of_product(1) == 1"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def sum_Of_product(n):\n    \"\"\"\n    Find the sum of the product of consecutive binomial coefficients.\n    \n    For a given n, this calculates:\n    C(n,0)*C(n,1) + C(n,1)*C(n,2) + C(n,2)*C(n,3) + ... + C(n,n-1)*C(n,n)\n    \n    Args:\n        n: A non-negative integer\n        \n    Returns:\n        The sum of products of consecutive binomial coefficients\n    \"\"\"\n    from math import comb\n    \n    total = 0\n    for i in range(n):\n        total += comb(n, i) * comb(n, i + 1)\n    \n    return total"}
{"benchmark": "mbpp", "task_id": "589", "prompt": "Write a function to find perfect squares between two given numbers.", "reference_code": "def perfect_squares(a, b):\n    lists=[]\n    for i in range (a,b+1):\n        j = 1;\n        while j*j <= i:\n            if j*j == i:\n                 lists.append(i)  \n            j = j+1\n        i = i+1\n    return lists", "test_imports": [], "test_list": ["assert perfect_squares(1,30)==[1, 4, 9, 16, 25]", "assert perfect_squares(50,100)==[64, 81, 100]", "assert perfect_squares(100,200)==[100, 121, 144, 169, 196]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def perfect_squares(start: int, end: int) -> list[int]:\n    \"\"\"\n    Find all perfect squares between start and end (inclusive).\n    \n    Args:\n        start: The lower bound (inclusive)\n        end: The upper bound (inclusive)\n    \n    Returns:\n        A list of perfect squares between start and end\n    \"\"\"\n    result = []\n    \n    # Find the smallest integer whose square is >= start\n    i = int(start ** 0.5)\n    if i * i < start:\n        i += 1\n    \n    # Iterate through perfect squares until we exceed end\n    while i * i <= end:\n        result.append(i * i)\n        i += 1\n    \n    return result"}
{"benchmark": "mbpp", "task_id": "594", "prompt": "Write a function to find the difference of the first even and first odd number of a given list.", "reference_code": "def diff_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even-first_odd)", "test_imports": [], "test_list": ["assert diff_even_odd([1,3,5,7,4,1,6,8])==3", "assert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1", "assert diff_even_odd([1,5,7,9,10])==9"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def diff_even_odd(numbers):\n    \"\"\"\n    Find the difference of the first even and first odd number in a list.\n    \n    Args:\n        numbers: A list of integers\n        \n    Returns:\n        The difference (first_even - first_odd), or None if either is not found\n    \"\"\"\n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    \n    return None"}
{"benchmark": "mbpp", "task_id": "596", "prompt": "Write a function to find the size in bytes of the given tuple.", "reference_code": "import sys \ndef tuple_size(tuple_list):\n  return (sys.getsizeof(tuple_list)) ", "test_imports": [], "test_list": ["assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))", "assert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))", "assert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "import sys\n\ndef tuple_size(t: tuple) -> int:\n    \"\"\"\n    Find the size in bytes of the given tuple.\n    \n    Args:\n        t: A tuple object\n        \n    Returns:\n        The size in bytes of the tuple\n    \"\"\"\n    return sys.getsizeof(t)"}
{"benchmark": "mbpp", "task_id": "599", "prompt": "Write a function to find sum and average of first n natural numbers.", "reference_code": "def sum_average(number):\n total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total / number\n return (total,average)", "test_imports": [], "test_list": ["assert sum_average(10)==(55, 5.5)", "assert sum_average(15)==(120, 8.0)", "assert sum_average(20)==(210, 10.5)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def sum_average(n):\n    \"\"\"\n    Find sum and average of first n natural numbers.\n    \n    Args:\n        n: A positive integer representing how many natural numbers to consider\n        \n    Returns:\n        A tuple containing (sum, average) of first n natural numbers\n    \"\"\"\n    if n <= 0:\n        return (0, 0)\n    \n    total_sum = n * (n + 1) // 2\n    average = total_sum / n\n    \n    return (total_sum, average)"}
{"benchmark": "mbpp", "task_id": "597", "prompt": "Write a function to find kth element from the given two sorted arrays.", "reference_code": "def find_kth(arr1, arr2, k):\n\tm = len(arr1)\n\tn = len(arr2)\n\tsorted1 = [0] * (m + n)\n\ti = 0\n\tj = 0\n\td = 0\n\twhile (i < m and j < n):\n\t\tif (arr1[i] < arr2[j]):\n\t\t\tsorted1[d] = arr1[i]\n\t\t\ti += 1\n\t\telse:\n\t\t\tsorted1[d] = arr2[j]\n\t\t\tj += 1\n\t\td += 1\n\twhile (i < m):\n\t\tsorted1[d] = arr1[i]\n\t\td += 1\n\t\ti += 1\n\twhile (j < n):\n\t\tsorted1[d] = arr2[j]\n\t\td += 1\n\t\tj += 1\n\treturn sorted1[k - 1]", "test_imports": [], "test_list": ["assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6", "assert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7) == 256", "assert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 6) == 8"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth element from two sorted arrays.\n    \n    Args:\n        arr1: First sorted array\n        arr2: Second sorted array\n        k: Position of element to find (1-indexed)\n    \n    Returns:\n        The kth smallest element from the combined sorted arrays\n    \"\"\"\n    # Merge two sorted arrays and find kth element\n    i, j = 0, 0\n    count = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            count += 1\n            if count == k:\n                return arr1[i]\n            i += 1\n        else:\n            count += 1\n            if count == k:\n                return arr2[j]\n            j += 1\n    \n    # If we've exhausted arr1, continue with arr2\n    while j < len(arr2):\n        count += 1\n        if count == k:\n            return arr2[j]\n        j += 1\n    \n    # If we've exhausted arr2, continue with arr1\n    while i < len(arr1):\n        count += 1\n        if count == k:\n            return arr1[i]\n        i += 1\n    \n    return -1  # k is out of bounds"}
{"benchmark": "mbpp", "task_id": "600", "prompt": "Write a python function to check whether the given number is even or not.", "reference_code": "def is_Even(n) : \n    if (n^1 == n+1) :\n        return True; \n    else :\n        return False; ", "test_imports": [], "test_list": ["assert is_Even(1) == False", "assert is_Even(2) == True", "assert is_Even(3) == False"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def is_Even(n):\n    \"\"\"\n    Check whether the given number is even or not.\n    \n    Args:\n        n: An integer number\n        \n    Returns:\n        True if the number is even, False otherwise\n    \"\"\"\n    return n % 2 == 0"}
{"benchmark": "mbpp", "task_id": "595", "prompt": "Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.", "reference_code": "def min_Swaps(str1,str2) : \n    count = 0\n    for i in range(len(str1)) :  \n        if str1[i] != str2[i] : \n            count += 1\n    if count % 2 == 0 : \n        return (count // 2) \n    else : \n        return (\"Not Possible\") ", "test_imports": [], "test_list": ["assert min_Swaps(\"1101\",\"1110\") == 1", "assert min_Swaps(\"111\",\"000\") == \"Not Possible\"", "assert min_Swaps(\"111\",\"110\") == \"Not Possible\""], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def min_Swaps(s1: str, s2: str) -> int:\n    \"\"\"\n    Count minimum number of swaps required to convert one binary string to another.\n    \n    Args:\n        s1: First binary string\n        s2: Second binary string\n    \n    Returns:\n        Minimum number of swaps needed to convert s1 to s2, or -1 if impossible\n    \"\"\"\n    # If strings are not the same length, conversion is impossible\n    if len(s1) != len(s2):\n        return -1\n    \n    # If strings are already equal, no swaps needed\n    if s1 == s2:\n        return 0\n    \n    # Count the number of positions where s1 and s2 differ\n    # and track positions where s1 has '0' but s2 has '1' and vice versa\n    zeros_to_ones = []  # positions where s1 has '0' but s2 has '1'\n    ones_to_zeros = []  # positions where s1 has '1' but s2 has '0'\n    \n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            if s1[i] == '0' and s2[i] == '1':\n                zeros_to_ones.append(i)\n            else:  # s1[i] == '1' and s2[i] == '0'\n                ones_to_zeros.append(i)\n    \n    # If the counts don't match, it's impossible to convert\n    if len(zeros_to_ones) != len(ones_to_zeros):\n        return -1\n    \n    # Each swap can fix two mismatches (one '0' that needs to be '1' and one '1' that needs to be '0')\n    # So minimum swaps = number of mismatches / 2\n    return len(zeros_to_ones)"}
{"benchmark": "mbpp", "task_id": "598", "prompt": "Write a function to check whether the given number is armstrong or not.", "reference_code": "def armstrong_number(number):\n sum = 0\n times = 0\n temp = number\n while temp > 0:\n           times = times + 1\n           temp = temp // 10\n temp = number\n while temp > 0:\n           reminder = temp % 10\n           sum = sum + (reminder ** times)\n           temp //= 10\n if number == sum:\n           return True\n else:\n           return False", "test_imports": [], "test_list": ["assert armstrong_number(153)==True", "assert armstrong_number(259)==False", "assert armstrong_number(4458)==False"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def armstrong_number(n):\n    \"\"\"\n    Check whether the given number is an Armstrong number or not.\n    \n    An Armstrong number (also known as narcissistic number) is a number\n    that is equal to the sum of its own digits each raised to the power\n    of the number of digits.\n    \n    For example:\n    - 153 is an Armstrong number because 1^3 + 5^3 + 3^3 = 153\n    - 9474 is an Armstrong number because 9^4 + 4^4 + 7^4 + 4^4 = 9474\n    \n    Args:\n        n: An integer number to check\n        \n    Returns:\n        True if n is an Armstrong number, False otherwise\n    \"\"\"\n    # Handle negative numbers - they cannot be Armstrong numbers\n    if n < 0:\n        return False\n    \n    # Convert to string to get digits\n    digits_str = str(n)\n    num_digits = len(digits_str)\n    \n    # Calculate sum of each digit raised to the power of number of digits\n    sum_of_powers = sum(int(digit) ** num_digits for digit in digits_str)\n    \n    # Check if the sum equals the original number\n    return sum_of_powers == n"}
