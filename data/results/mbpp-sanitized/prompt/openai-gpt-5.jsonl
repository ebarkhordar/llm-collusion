{"benchmark": "mbpp", "task_id": "8", "prompt": "Write a function to find squares of individual elements in a list.", "reference_code": "def square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums", "test_imports": [], "test_list": ["assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]", "assert square_nums([10,20,30])==([100,400,900])", "assert square_nums([12,15])==([144,225])"], "model_name": "openai/gpt-5", "generated_code": "def square_nums(nums):\n    \"\"\"\n    Return a list containing the square of each element in nums.\n\n    Args:\n        nums: An iterable of numeric values.\n\n    Returns:\n        list: A list of squared values.\n    \"\"\"\n    return [x * x for x in nums]"}
{"benchmark": "mbpp", "task_id": "7", "prompt": "Write a function to find all words which are at least 4 characters long in a string.", "reference_code": "import re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))", "test_imports": [], "test_list": ["assert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])", "assert set(find_char_long('Jing Eco and Tech')) == set(['Jing', 'Tech'])", "assert set(find_char_long('Jhingai wulu road Zone 3')) == set(['Jhingai', 'wulu', 'road', 'Zone'])"], "model_name": "openai/gpt-5", "generated_code": "import re\nfrom typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    \"\"\"\n    Return a list of words that are at least 4 characters long from the given string.\n    Words are defined as contiguous alphabetic sequences (A-Z, a-z).\n    \"\"\"\n    if text is None:\n        return []\n    return re.findall(r'[A-Za-z]{4,}', str(text))"}
{"benchmark": "mbpp", "task_id": "4", "prompt": "Write a function to find the n largest integers from a given list of numbers, returned in descending order.", "reference_code": "import heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums", "test_imports": [], "test_list": ["assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]", "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75]", "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]"], "model_name": "openai/gpt-5", "generated_code": "from heapq import nlargest\nfrom typing import List, Iterable, Any\n\n\ndef heap_queue_largest(numbers: Iterable[int], n: int) -> List[int]:\n    \"\"\"\n    Return the n largest integers from the given iterable of numbers, in descending order.\n\n    - If n <= 0 or the input is empty, returns an empty list.\n    - If n >= len(numbers), returns all numbers sorted in descending order.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    if n <= 0:\n        return []\n    # heapq.nlargest returns results in descending order\n    return nlargest(n, numbers)"}
{"benchmark": "mbpp", "task_id": "9", "prompt": "Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.", "reference_code": "def find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n ", "test_imports": [], "test_list": ["assert find_Rotations(\"aaaa\") == 1", "assert find_Rotations(\"ab\") == 2", "assert find_Rotations(\"abc\") == 3"], "model_name": "openai/gpt-5", "generated_code": "def find_Rotations(s: str) -> int:\n    \"\"\"\n    Return the minimum number of rotations (>0) required to obtain the same string.\n    If the string is not periodic, the answer is the string's length.\n    For empty string, returns 0.\n    \"\"\"\n    n = len(s)\n    if n == 0:\n        return 0\n    # Build LPS (Longest Prefix Suffix) array for the full string\n    lps = [0] * n\n    length = 0  # length of the previous longest prefix suffix\n\n    i = 1\n    while i < n:\n        if s[i] == s[length]:\n            length += 1\n            lps[i] = length\n            i += 1\n        else:\n            if length != 0:\n                length = lps[length - 1]\n            else:\n                lps[i] = 0\n                i += 1\n\n    period = n - lps[-1]\n    if period != 0 and n % period == 0:\n        return period\n    return n"}
{"benchmark": "mbpp", "task_id": "2", "prompt": "Write a function to find the shared elements from the given two lists.", "reference_code": "def similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) ", "test_imports": [], "test_list": ["assert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))", "assert set(similar_elements((1, 2, 3, 4),(5, 4, 3, 7))) == set((3, 4))", "assert set(similar_elements((11, 12, 14, 13),(17, 15, 14, 13))) == set((13, 14))"], "model_name": "openai/gpt-5", "generated_code": "from typing import Any, List\n\ndef similar_elements(list1: List[Any], list2: List[Any]) -> List[Any]:\n    \"\"\"\n    Return elements shared between list1 and list2, without duplicates,\n    preserving their first occurrence order from list1.\n\n    Handles both hashable and unhashable elements.\n    \"\"\"\n    # Prepare a fast membership checker for list2\n    try:\n        set2 = set(list2)\n        def in_list2(x: Any) -> bool:\n            try:\n                return x in set2\n            except TypeError:\n                # x is unhashable; fallback to linear search in list2\n                return x in list2\n    except TypeError:\n        # list2 contains unhashable elements; use linear search\n        def in_list2(x: Any) -> bool:\n            return x in list2\n\n    result: List[Any] = []\n    seen_hashable = set()\n    seen_unhashable: List[Any] = []\n\n    for item in list1:\n        if not in_list2(item):\n            continue\n\n        # Deduplicate while preserving order\n        try:\n            if item in seen_hashable:\n                continue\n            seen_hashable.add(item)\n        except TypeError:\n            # Unhashable item; check manually\n            duplicate = False\n            for s in seen_unhashable:\n                if s == item:\n                    duplicate = True\n                    break\n            if duplicate:\n                continue\n            seen_unhashable.append(item)\n\n        result.append(item)\n\n    return result"}
{"benchmark": "mbpp", "task_id": "3", "prompt": "Write a python function to identify non-prime numbers.", "reference_code": "import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result", "test_imports": [], "test_list": ["assert is_not_prime(2) == False", "assert is_not_prime(10) == True", "assert is_not_prime(35) == True", "assert is_not_prime(37) == False"], "model_name": "openai/gpt-5", "generated_code": "def is_not_prime(n):\n    \"\"\"\n    Determine if a number is non-prime.\n    Returns True if n is not a prime number, otherwise False.\n    Non-prime includes integers <= 1 and any non-integer or boolean inputs.\n    \"\"\"\n    # Exclude booleans explicitly (since bool is a subclass of int in Python)\n    if isinstance(n, bool):\n        return True\n\n    # Only integers can be prime\n    if not isinstance(n, int):\n        return True\n\n    # Numbers less than or equal to 1 are not prime\n    if n <= 1:\n        return True\n\n    # 2 and 3 are prime\n    if n <= 3:\n        return False\n\n    # Eliminate even numbers and multiples of 3\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n\n    # Check for factors using 6k Â± 1 optimization\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n\n    # No divisors found: n is prime\n    return False"}
{"benchmark": "mbpp", "task_id": "6", "prompt": "Write a python function to check whether the two numbers differ at one bit position only or not.", "reference_code": "def is_Power_Of_Two (x): \n    return x and (not(x & (x - 1))) \ndef differ_At_One_Bit_Pos(a,b): \n    return is_Power_Of_Two(a ^ b)", "test_imports": [], "test_list": ["assert differ_At_One_Bit_Pos(13,9) == True", "assert differ_At_One_Bit_Pos(15,8) == False", "assert differ_At_One_Bit_Pos(2,4) == False", "assert differ_At_One_Bit_Pos(2, 3) == True", "assert differ_At_One_Bit_Pos(5, 1) == True", "assert differ_At_One_Bit_Pos(1, 5) == True"], "model_name": "openai/gpt-5", "generated_code": "def differ_At_One_Bit_Pos(a, b):\n    \"\"\"\n    Check whether two numbers differ at exactly one bit position.\n    Returns True if they differ by a single bit, False otherwise.\n    Assumes non-negative integers.\n    \"\"\"\n    x = a ^ b\n    return x > 0 and (x & (x - 1)) == 0"}
