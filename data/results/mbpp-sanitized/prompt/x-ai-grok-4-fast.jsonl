{"benchmark": "mbpp", "task_id": "8", "prompt": "Write a function to find squares of individual elements in a list.", "reference_code": "def square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums", "test_imports": [], "test_list": ["assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]", "assert square_nums([10,20,30])==([100,400,900])", "assert square_nums([12,15])==([144,225])"], "model_name": "x-ai/grok-4-fast", "generated_code": "def square_nums(nums):\n    return [x ** 2 for x in nums]"}
{"benchmark": "mbpp", "task_id": "7", "prompt": "Write a function to find all words which are at least 4 characters long in a string.", "reference_code": "import re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))", "test_imports": [], "test_list": ["assert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])", "assert set(find_char_long('Jing Eco and Tech')) == set(['Jing', 'Tech'])", "assert set(find_char_long('Jhingai wulu road Zone 3')) == set(['Jhingai', 'wulu', 'road', 'Zone'])"], "model_name": "x-ai/grok-4-fast", "generated_code": "def find_char_long(text):\n    words = text.split()\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"}
{"benchmark": "mbpp", "task_id": "2", "prompt": "Write a function to find the shared elements from the given two lists.", "reference_code": "def similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) ", "test_imports": [], "test_list": ["assert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))", "assert set(similar_elements((1, 2, 3, 4),(5, 4, 3, 7))) == set((3, 4))", "assert set(similar_elements((11, 12, 14, 13),(17, 15, 14, 13))) == set((13, 14))"], "model_name": "x-ai/grok-4-fast", "generated_code": "def similar_elements(lst1, lst2):\n    \"\"\"\n    Find the shared elements between two lists.\n    \n    Args:\n    lst1 (list): First list\n    lst2 (list): Second list\n    \n    Returns:\n    list: List of shared elements (unique)\n    \"\"\"\n    return list(set(lst1) & set(lst2))"}
{"benchmark": "mbpp", "task_id": "6", "prompt": "Write a python function to check whether the two numbers differ at one bit position only or not.", "reference_code": "def is_Power_Of_Two (x): \n    return x and (not(x & (x - 1))) \ndef differ_At_One_Bit_Pos(a,b): \n    return is_Power_Of_Two(a ^ b)", "test_imports": [], "test_list": ["assert differ_At_One_Bit_Pos(13,9) == True", "assert differ_At_One_Bit_Pos(15,8) == False", "assert differ_At_One_Bit_Pos(2,4) == False", "assert differ_At_One_Bit_Pos(2, 3) == True", "assert differ_At_One_Bit_Pos(5, 1) == True", "assert differ_At_One_Bit_Pos(1, 5) == True"], "model_name": "x-ai/grok-4-fast", "generated_code": "def differ_At_One_Bit_Pos(num1, num2):\n    xor = num1 ^ num2\n    return xor != 0 and (xor & (xor - 1)) == 0"}
{"benchmark": "mbpp", "task_id": "3", "prompt": "Write a python function to identify non-prime numbers.", "reference_code": "import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result", "test_imports": [], "test_list": ["assert is_not_prime(2) == False", "assert is_not_prime(10) == True", "assert is_not_prime(35) == True", "assert is_not_prime(37) == False"], "model_name": "x-ai/grok-4-fast", "generated_code": "import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return True\n    return False"}
{"benchmark": "mbpp", "task_id": "4", "prompt": "Write a function to find the n largest integers from a given list of numbers, returned in descending order.", "reference_code": "import heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums", "test_imports": [], "test_list": ["assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]", "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75]", "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]"], "model_name": "x-ai/grok-4-fast", "generated_code": "import heapq\n\ndef heap_queue_largest(numbers, n):\n    if n <= 0 or not numbers:\n        return []\n    heap = []\n    for num in numbers:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        elif num > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    result.reverse()\n    return result"}
{"benchmark": "mbpp", "task_id": "9", "prompt": "Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.", "reference_code": "def find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n ", "test_imports": [], "test_list": ["assert find_Rotations(\"aaaa\") == 1", "assert find_Rotations(\"ab\") == 2", "assert find_Rotations(\"abc\") == 3"], "model_name": "x-ai/grok-4-fast", "generated_code": "def find_Rotations(s):\n    n = len(s)\n    if n == 0:\n        return 0\n    pi = [0] * n\n    length = 0\n    i = 1\n    while i < n:\n        if s[i] == s[length]:\n            length += 1\n            pi[i] = length\n            i += 1\n        else:\n            if length != 0:\n                length = pi[length - 1]\n            else:\n                pi[i] = 0\n                i += 1\n    period = n - pi[n - 1]\n    if n % period == 0:\n        return period\n    else:\n        return n"}
