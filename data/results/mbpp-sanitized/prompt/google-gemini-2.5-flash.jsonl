{"benchmark": "mbpp", "task_id": "8", "prompt": "Write a function to find squares of individual elements in a list.", "reference_code": "def square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums", "test_imports": [], "test_list": ["assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]", "assert square_nums([10,20,30])==([100,400,900])", "assert square_nums([12,15])==([144,225])"], "model_name": "google/gemini-2.5-flash", "generated_code": "def square_nums(nums: list[int]) -> list[int]:\n    \"\"\"\n    Finds the squares of individual elements in a list.\n\n    Args:\n        nums: A list of integers.\n\n    Returns:\n        A new list containing the squares of the input elements.\n    \"\"\"\n    return [x * x for x in nums]"}
{"benchmark": "mbpp", "task_id": "2", "prompt": "Write a function to find the shared elements from the given two lists.", "reference_code": "def similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) ", "test_imports": [], "test_list": ["assert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))", "assert set(similar_elements((1, 2, 3, 4),(5, 4, 3, 7))) == set((3, 4))", "assert set(similar_elements((11, 12, 14, 13),(17, 15, 14, 13))) == set((13, 14))"], "model_name": "google/gemini-2.5-flash", "generated_code": "def similar_elements(list1, list2):\n    \"\"\"\n    Finds the shared elements from the given two lists.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        list: A new list containing elements that are present in both list1 and list2.\n              The order of elements in the returned list is not guaranteed.\n    \"\"\"\n    set1 = set(list1)\n    set2 = set(list2)\n    return list(set1.intersection(set2))"}
{"benchmark": "mbpp", "task_id": "4", "prompt": "Write a function to find the n largest integers from a given list of numbers, returned in descending order.", "reference_code": "import heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums", "test_imports": [], "test_list": ["assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]", "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75]", "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]"], "model_name": "google/gemini-2.5-flash", "generated_code": "import heapq\n\ndef heap_queue_largest(numbers: list[int], n: int) -> list[int]:\n    \"\"\"\n    Finds the n largest integers from a given list of numbers, returned in descending order.\n\n    Args:\n        numbers: A list of integers.\n        n: The number of largest integers to find.\n\n    Returns:\n        A list containing the n largest integers from the input list, in descending order.\n    \"\"\"\n    if not numbers or n <= 0:\n        return []\n    if n >= len(numbers):\n        return sorted(numbers, reverse=True)\n\n    # Use nlargest from the heapq module.\n    # heapq.nlargest returns the n largest elements in a list, in descending order.\n    return heapq.nlargest(n, numbers)"}
{"benchmark": "mbpp", "task_id": "7", "prompt": "Write a function to find all words which are at least 4 characters long in a string.", "reference_code": "import re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))", "test_imports": [], "test_list": ["assert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])", "assert set(find_char_long('Jing Eco and Tech')) == set(['Jing', 'Tech'])", "assert set(find_char_long('Jhingai wulu road Zone 3')) == set(['Jhingai', 'wulu', 'road', 'Zone'])"], "model_name": "google/gemini-2.5-flash", "generated_code": "import re\n\ndef find_char_long(text: str) -> list[str]:\n    \"\"\"\n    Finds all words which are at least 4 characters long in a string.\n\n    Args:\n        text: The input string.\n\n    Returns:\n        A list of words that are at least 4 characters long.\n    \"\"\"\n    # Use a regular expression to find sequences of 4 or more alphabetic characters.\n    # \\b ensures whole word matching.\n    # [a-zA-Z]+ matches one or more alphabetic characters.\n    # {4,} specifies that the preceding element (the character group) must occur at least 4 times.\n    return re.findall(r'\\b[a-zA-Z]{4,}\\b', text)"}
{"benchmark": "mbpp", "task_id": "3", "prompt": "Write a python function to identify non-prime numbers.", "reference_code": "import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result", "test_imports": [], "test_list": ["assert is_not_prime(2) == False", "assert is_not_prime(10) == True", "assert is_not_prime(35) == True", "assert is_not_prime(37) == False"], "model_name": "google/gemini-2.5-flash", "generated_code": "def is_not_prime(num: int) -> bool:\n    \"\"\"\n    Checks if a given integer is a non-prime number.\n\n    A non-prime number is a natural number greater than 1 that is not prime.\n    This includes composite numbers and the number 1.\n    Prime numbers are natural numbers greater than 1 that have no positive\n    divisors other than 1 and themselves.\n\n    Args:\n        num: An integer.\n\n    Returns:\n        True if the number is non-prime, False otherwise.\n    \"\"\"\n    if num <= 1:\n        return True  # Numbers less than or equal to 1 are not prime (and thus considered non-prime in this context)\n    if num == 2:\n        return False  # 2 is a prime number\n    if num % 2 == 0:\n        return True  # Even numbers greater than 2 are not prime\n\n    # Check for odd divisors from 3 up to the square root of num\n    i = 3\n    while i * i <= num:\n        if num % i == 0:\n            return True\n        i += 2\n    return False"}
{"benchmark": "mbpp", "task_id": "6", "prompt": "Write a python function to check whether the two numbers differ at one bit position only or not.", "reference_code": "def is_Power_Of_Two (x): \n    return x and (not(x & (x - 1))) \ndef differ_At_One_Bit_Pos(a,b): \n    return is_Power_Of_Two(a ^ b)", "test_imports": [], "test_list": ["assert differ_At_One_Bit_Pos(13,9) == True", "assert differ_At_One_Bit_Pos(15,8) == False", "assert differ_At_One_Bit_Pos(2,4) == False", "assert differ_At_One_Bit_Pos(2, 3) == True", "assert differ_At_One_Bit_Pos(5, 1) == True", "assert differ_At_One_Bit_Pos(1, 5) == True"], "model_name": "google/gemini-2.5-flash", "generated_code": "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    \"\"\"\n    Checks if two numbers differ at exactly one bit position.\n\n    Args:\n        a: The first integer.\n        b: The second integer.\n\n    Returns:\n        True if the numbers differ at exactly one bit position, False otherwise.\n    \"\"\"\n    xor_result = a ^ b\n    # A number is a power of 2 if and only if it has exactly one bit set.\n    # This can be checked by (number & (number - 1)) == 0 for number > 0.\n    # If xor_result is 0, it means a and b are identical, so they don't differ at one bit.\n    return xor_result != 0 and (xor_result & (xor_result - 1)) == 0"}
{"benchmark": "mbpp", "task_id": "9", "prompt": "Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.", "reference_code": "def find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n ", "test_imports": [], "test_list": ["assert find_Rotations(\"aaaa\") == 1", "assert find_Rotations(\"ab\") == 2", "assert find_Rotations(\"abc\") == 3"], "model_name": "google/gemini-2.5-flash", "generated_code": "def find_Rotations(s: str) -> int:\n    \"\"\"\n    Finds the minimum number of rotations (greater than 0) required to get the same string.\n\n    Args:\n        s: The input string.\n\n    Returns:\n        The minimum number of rotations (greater than 0) to get the same string.\n        If no such rotation exists (e.g., for a string with all identical characters),\n        it returns the length of the string.\n    \"\"\"\n    n = len(s)\n    if n == 0:\n        return 0\n\n    # Concatenate the string with itself to easily check all rotations\n    temp = s + s\n\n    for i in range(1, n + 1):\n        # Check if the substring starting from index i (of length n)\n        # is equal to the original string.\n        # This substring represents a rotation of the original string.\n        if temp[i:i + n] == s:\n            return i\n    \n    # This case should ideally not be reached if the string is non-empty,\n    # as rotating by n positions always yields the original string.\n    # However, if the problem implies \"distinct\" rotations, and the string\n    # is like \"aaaa\", then 1 rotation doesn't change it, but the first\n    # rotation that *is* the original string is at index 1.\n    # The loop correctly handles this by returning 1 for \"aaaa\".\n    # If the string is \"abcabc\", it will return 3.\n    # The problem statement \"minimum number of rotations (greater than 0)\"\n    # implies we are looking for the smallest 'k > 0' such that s[k:] + s[:k] == s.\n    # The loop correctly finds this 'k'.\n    # If no such k < n exists, it means the string is like \"aaaaa\",\n    # and the first time it matches is at k=1.\n    # If the string is \"ababa\", it matches at k=2.\n    # The loop will always find a match at or before n.\n    # The problem asks for \"minimum number of rotations (greater than 0)\".\n    # For \"aaaa\", the first rotation that matches is 1.\n    # For \"abcabc\", the first rotation that matches is 3.\n    # For \"abc\", the first rotation that matches is 3.\n    # The loop correctly returns the smallest positive integer.\n    return n"}
