{"benchmark": "mbpp", "task_id": "604", "prompt": "Write a function to reverse words seperated by spaces in a given string.", "reference_code": "def reverse_words(s):\n        return ' '.join(reversed(s.split()))", "test_imports": [], "test_list": ["assert reverse_words(\"python program\")==(\"program python\")", "assert reverse_words(\"java language\")==(\"language java\")", "assert reverse_words(\"indian man\")==(\"man indian\")"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def reverse_words(s: str) -> str:\n    return ' '.join(word[::-1] for word in s.split(' '))"}
{"benchmark": "mbpp", "task_id": "606", "prompt": "Write a function to convert degrees to radians.", "reference_code": "import math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian", "test_imports": [], "test_list": ["assert radian_degree(90)==1.5707963267948966", "assert radian_degree(60)==1.0471975511965976", "assert radian_degree(120)==2.0943951023931953"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "import math\n\ndef radian_degree(degrees):\n    return degrees * math.pi / 180"}
{"benchmark": "mbpp", "task_id": "615", "prompt": "Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.", "reference_code": "def average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result", "test_imports": [], "test_list": ["assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]", "assert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]", "assert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def average_tuple(tuples):\n    return [sum(t) / len(t) for t in tuples]"}
{"benchmark": "mbpp", "task_id": "619", "prompt": "Write a function to move all the numbers to the end of the given string.", "reference_code": "def move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) ", "test_imports": [], "test_list": ["assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'", "assert move_num('Avengers124Assemble') == 'AvengersAssemble124'", "assert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def move_num(s):\n    non_nums = []\n    nums = []\n    for char in s:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            non_nums.append(char)\n    return ''.join(non_nums + nums)"}
{"benchmark": "mbpp", "task_id": "610", "prompt": "Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.", "reference_code": "def remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]", "test_imports": [], "test_list": ["assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]", "assert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]", "assert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def remove_kth_element(lst, k):\n    if k < 0 or k >= len(lst):\n        return lst.copy()\n    return lst[:k] + lst[k+1:]"}
{"benchmark": "mbpp", "task_id": "617", "prompt": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.", "reference_code": "def min_Jumps(steps, d): \n    (a, b) = steps\n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2", "test_imports": [], "test_list": ["assert min_Jumps((3,4),11)==3.5", "assert min_Jumps((3,4),0)==0", "assert min_Jumps((11,14),11)==1"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "import math\n\ndef min_Jumps(d, jump_length):\n    if d == 0:\n        return 0\n    if jump_length == 0:\n        return float('inf')\n    jumps = d / jump_length\n    return math.ceil(jumps)"}
{"benchmark": "mbpp", "task_id": "616", "prompt": "Write a function which takes two tuples of the same length and performs the element wise modulo.", "reference_code": "def tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) ", "test_imports": [], "test_list": ["assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)", "assert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)", "assert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def tuple_modulo(t1, t2):\n    return tuple(a % b for a, b in zip(t1, t2))"}
{"benchmark": "mbpp", "task_id": "618", "prompt": "Write a function to divide two lists element wise.", "reference_code": "def div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)", "test_imports": [], "test_list": ["assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]", "assert div_list([3,2],[1,4])==[3.0, 0.5]", "assert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def div_list(list1, list2):\n    \"\"\"\n    Divides two lists element-wise.\n    \n    Args:\n        list1: List of numerators.\n        list2: List of denominators.\n    \n    Returns:\n        List of element-wise divisions. Returns None if lists are of unequal length.\n    \"\"\"\n    if len(list1) != len(list2):\n        return None\n    return [a / b if b != 0 else None for a, b in zip(list1, list2)]"}
{"benchmark": "mbpp", "task_id": "624", "prompt": "Write a python function to convert a given string to uppercase.", "reference_code": "def is_upper(string):\n  return (string.upper())", "test_imports": [], "test_list": ["assert is_upper(\"person\") ==\"PERSON\"", "assert is_upper(\"final\") == \"FINAL\"", "assert is_upper(\"Valid\") == \"VALID\""], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def is_upper(s: str) -> bool:\n    return s.isupper()"}
{"benchmark": "mbpp", "task_id": "623", "prompt": "Write a function to compute the n-th power of each number in a list.", "reference_code": "def nth_nums(nums,n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums", "test_imports": [], "test_list": ["assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]", "assert nth_nums([10,20,30],3)==([1000, 8000, 27000])", "assert nth_nums([12,15],5)==([248832, 759375])"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def nth_nums(nums, n):\n    return [x ** n for x in nums]"}
{"benchmark": "mbpp", "task_id": "602", "prompt": "Write a python function to find the first repeated character in a given string.", "reference_code": "def first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c", "test_imports": [], "test_list": ["assert first_repeated_char(\"abcabc\") == \"a\"", "assert first_repeated_char(\"abc\") == None", "assert first_repeated_char(\"123123\") == \"1\""], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"}
{"benchmark": "mbpp", "task_id": "611", "prompt": "Write a function which given a matrix represented as a list of lists returns the max of the n'th column.", "reference_code": "def max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) ", "test_imports": [], "test_list": ["assert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19", "assert max_of_nth([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) == 10", "assert max_of_nth([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1) == 11"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def max_of_nth(matrix, n):\n    if not matrix or n < 0 or n >= len(matrix[0]):\n        raise ValueError(\"Invalid matrix or column index\")\n    return max(row[n] for row in matrix)"}
{"benchmark": "mbpp", "task_id": "605", "prompt": "Write a function to check if the given integer is a prime number.", "reference_code": "def prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False", "test_imports": [], "test_list": ["assert prime_num(13)==True", "assert prime_num(7)==True", "assert prime_num(-1010)==False"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def prime_num(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True"}
{"benchmark": "mbpp", "task_id": "625", "prompt": "Write a python function to interchange the first and last element in a given list.", "reference_code": "def swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp   \n    return newList ", "test_imports": [], "test_list": ["assert swap_List([1,2,3]) == [3,2,1]", "assert swap_List([1,2,3,4,4]) == [4,2,3,4,1]", "assert swap_List([4,5,6]) == [6,5,4]"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def swap_List(newList):\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"}
{"benchmark": "mbpp", "task_id": "628", "prompt": "Write a function to replace all spaces in the given string with '%20'.", "reference_code": "def replace_spaces(string):\n  return string.replace(\" \", \"%20\")", "test_imports": [], "test_list": ["assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'", "assert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'", "assert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def replace_spaces(s: str) -> str:\n    return s.replace(' ', '%20')"}
{"benchmark": "mbpp", "task_id": "627", "prompt": "Write a python function to find the smallest missing number from a sorted list of natural numbers.", "reference_code": "def find_First_Missing(array,start=0,end=None):\n    if end is None:\n      end = len(array) - 1   \n    if (start > end): \n        return end + 1\n    if (start != array[start]): \n        return start; \n    mid = int((start + end) / 2) \n    if (array[mid] == mid): \n        return find_First_Missing(array,mid+1,end) \n    return find_First_Missing(array,start,mid) ", "test_imports": [], "test_list": ["assert find_First_Missing([0,1,2,3]) == 4", "assert find_First_Missing([0,1,2,6,9]) == 3", "assert find_First_Missing([2,3,5,8,9]) == 0"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def find_First_Missing(nums):\n    if not nums:\n        return 1\n    \n    left, right = 0, len(nums) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == mid + 1:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return left + 1"}
{"benchmark": "mbpp", "task_id": "607", "prompt": "Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.", "reference_code": "import re\n\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)", "test_imports": [], "test_list": ["assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)", "assert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)", "assert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "import re\n\ndef find_literals(pattern, text):\n    match = re.search(re.escape(pattern), text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    return None"}
{"benchmark": "mbpp", "task_id": "629", "prompt": "Write a python function to find even numbers from a list of numbers.", "reference_code": "def Split(list): \n    return [num for num in list if num % 2 == 0]", "test_imports": [], "test_list": ["assert Split([1,2,3,4,5]) == [2,4]", "assert Split([4,5,6,7,8,0,1]) == [4,6,8,0]", "assert Split ([8,12,15,19]) == [8,12]"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def Split(numbers):\n    return [num for num in numbers if num % 2 == 0]"}
{"benchmark": "mbpp", "task_id": "626", "prompt": "Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.", "reference_code": "def triangle_area(r) :  \n    if r < 0 : \n        return None\n    return r * r ", "test_imports": [], "test_list": ["assert triangle_area(-1) == None", "assert triangle_area(0) == 0", "assert triangle_area(2) == 4"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "import math\n\ndef triangle_area(radius):\n    \"\"\"\n    Calculate the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    The largest triangle is a right-angled triangle with the diameter as the base and the radius as the height.\n    \"\"\"\n    return radius ** 2"}
{"benchmark": "mbpp", "task_id": "637", "prompt": "Write a function to check whether the given amount has no profit and no loss", "reference_code": "def noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False", "test_imports": [], "test_list": ["assert noprofit_noloss(1500,1200)==False", "assert noprofit_noloss(100,100)==True", "assert noprofit_noloss(2000,5000)==False"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def noprofit_noloss(actual_cost, sale_amount):\n    return actual_cost == sale_amount"}
{"benchmark": "mbpp", "task_id": "631", "prompt": "Write a function to replace whitespaces with an underscore and vice versa in a given string.", "reference_code": "def replace_spaces(text):\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)", "test_imports": [], "test_list": ["assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'", "assert replace_spaces('The_Avengers') == 'The Avengers'", "assert replace_spaces('Fast and Furious') == 'Fast_and_Furious'"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def replace_spaces(s: str) -> str:\n    \"\"\"\n    Replaces whitespaces with underscores and underscores with whitespaces in the given string.\n    \n    Args:\n        s: Input string to process.\n    \n    Returns:\n        The processed string with spaces and underscores swapped.\n    \"\"\"\n    result = []\n    for char in s:\n        if char == ' ':\n            result.append('_')\n        elif char == '_':\n            result.append(' ')\n        else:\n            result.append(char)\n    return ''.join(result)"}
{"benchmark": "mbpp", "task_id": "632", "prompt": "Write a python function to move all zeroes to the end of the given list.", "reference_code": "def move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a", "test_imports": [], "test_list": ["assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]", "assert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]", "assert move_zero([0,1,0,1,1]) == [1,1,1,0,0]"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def move_zero(lst):\n    non_zero = [x for x in lst if x != 0]\n    zero_count = len(lst) - len(non_zero)\n    return non_zero + [0] * zero_count"}
{"benchmark": "mbpp", "task_id": "622", "prompt": "Write a function to find the median of two sorted lists of same size.", "reference_code": "def get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2", "test_imports": [], "test_list": ["assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0", "assert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5", "assert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def get_median(list1, list2):\n    \"\"\"\n    Finds the median of two sorted lists of the same size.\n    The median is calculated by merging the two lists and finding the middle element(s).\n    \"\"\"\n    merged = []\n    i = j = 0\n    n = len(list1)\n    \n    while i < n and j < n:\n        if list1[i] <= list2[j]:\n            merged.append(list1[i])\n            i += 1\n        else:\n            merged.append(list2[j])\n            j += 1\n    \n    # Add remaining elements from list1\n    while i < n:\n        merged.append(list1[i])\n        i += 1\n    \n    # Add remaining elements from list2\n    while j < n:\n        merged.append(list2[j])\n        j += 1\n    \n    total_length = len(merged)\n    if total_length % 2 == 1:\n        return merged[total_length // 2]\n    else:\n        mid1 = merged[total_length // 2 - 1]\n        mid2 = merged[total_length // 2]\n        return (mid1 + mid2) / 2"}
{"benchmark": "mbpp", "task_id": "640", "prompt": "Write a function to remove the parenthesis and what is inbetween them from a string.", "reference_code": "import re\ndef remove_parenthesis(items):\n for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))", "test_imports": [], "test_list": ["assert remove_parenthesis([\"python (chrome)\"])==(\"python\")", "assert remove_parenthesis([\"string(.abc)\"])==(\"string\")", "assert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "import re\n\ndef remove_parenthesis(s):\n    return re.sub(r'\\([^)]*\\)', '', s)"}
{"benchmark": "mbpp", "task_id": "603", "prompt": "Write a function to get all lucid numbers smaller than or equal to a given integer.", "reference_code": "def get_ludic(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics", "test_imports": [], "test_list": ["assert get_ludic(10) == [1, 2, 3, 5, 7]", "assert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]", "assert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def get_ludic(n):\n    if n < 1:\n        return []\n    \n    numbers = list(range(2, n + 1))\n    ludic_numbers = [1]\n    \n    while numbers:\n        next_ludic = numbers[0]\n        ludic_numbers.append(next_ludic)\n        \n        del_indices = set()\n        step = next_ludic\n        \n        for i in range(step - 1, len(numbers), step):\n            del_indices.add(i)\n        \n        # Create a new list excluding the marked indices\n        numbers = [num for idx, num in enumerate(numbers) if idx not in del_indices]\n    \n    return ludic_numbers"}
{"benchmark": "mbpp", "task_id": "641", "prompt": "Write a function to find the nth nonagonal number.", "reference_code": "def is_nonagonal(n): \n\treturn int(n * (7 * n - 5) / 2) ", "test_imports": [], "test_list": ["assert is_nonagonal(10) == 325", "assert is_nonagonal(15) == 750", "assert is_nonagonal(18) == 1089"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def is_nonagonal(x):\n    return x * (7 * x - 5) // 2"}
{"benchmark": "mbpp", "task_id": "633", "prompt": "Write a python function to find the sum of xor of all pairs of numbers in the given list.", "reference_code": "def pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans ", "test_imports": [], "test_list": ["assert pair_xor_Sum([5,9,7,6],4) == 47", "assert pair_xor_Sum([7,3,5],3) == 12", "assert pair_xor_Sum([7,3],2) == 4"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def pair_xor_Sum(arr):\n    total = 0\n    n = len(arr)\n    for i in range(32):\n        mask = 1 << i\n        count = 0\n        for num in arr:\n            if num & mask:\n                count += 1\n        total += (count * (n - count)) * (1 << i)\n    return total"}
{"benchmark": "mbpp", "task_id": "608", "prompt": "Write a python function to find nth bell number.", "reference_code": "def bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] ", "test_imports": [], "test_list": ["assert bell_Number(2) == 2", "assert bell_Number(3) == 5", "assert bell_Number(4) == 15"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def bell_Number(n):\n    if n == 0:\n        return 1\n    # Create a Bell triangle as a 2D array\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        # The first element of each row is the last element of the previous row\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"}
{"benchmark": "mbpp", "task_id": "612", "prompt": "Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.", "reference_code": "def merge(lst):  \n    return [list(ele) for ele in list(zip(*lst))] ", "test_imports": [], "test_list": ["assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]", "assert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]", "assert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def merge(lst):\n    if not lst:\n        return [[], []]\n    first_elements = [item[0] for item in lst]\n    second_elements = [item[1] for item in lst]\n    return [first_elements, second_elements]"}
{"benchmark": "mbpp", "task_id": "639", "prompt": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.", "reference_code": "def sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))", "test_imports": [], "test_list": ["assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16", "assert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10", "assert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def sample_nam(names):\n    \"\"\"Sum the lengths of names that do not start with a lowercase letter.\"\"\"\n    filtered_names = [name for name in names if not name[0].islower()]\n    return sum(len(name) for name in filtered_names)"}
{"benchmark": "mbpp", "task_id": "720", "prompt": "Write a function to add a dictionary to the tuple. The output should be a tuple.", "reference_code": "def add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup) ", "test_imports": [], "test_list": ["assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})", "assert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})", "assert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def add_dict_to_tuple(input_tuple, input_dict):\n    return (*input_tuple, input_dict)"}
{"benchmark": "mbpp", "task_id": "638", "prompt": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.", "reference_code": "import math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))", "test_imports": [], "test_list": ["assert wind_chill(120,35)==40", "assert wind_chill(40,20)==19", "assert wind_chill(10,8)==6"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "import math\n\ndef wind_chill(velocity: float, temperature: float) -> int:\n    if velocity < 4.8 or temperature > 10.0:\n        return round(temperature)\n    \n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * math.pow(velocity, 0.16) + 0.3965 * temperature * math.pow(velocity, 0.16)\n    return math.ceil(wind_chill_index) if wind_chill_index % 1 > 0 else round(wind_chill_index)"}
{"benchmark": "mbpp", "task_id": "643", "prompt": "Write a function that checks if a strings contains 'z', except at the start and end of the word.", "reference_code": "import re\ndef text_match_wordz_middle(text):\n        return bool(re.search(r'\\Bz\\B',  text))", "test_imports": [], "test_list": ["assert text_match_wordz_middle(\"pythonzabc.\")==True", "assert text_match_wordz_middle(\"zxyabc.\")==False", "assert text_match_wordz_middle(\"  lang  .\")==False"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "import re\n\ndef text_match_wordz_middle(s):\n    pattern = r'\\b[^zZ]\\w*[zZ]\\w*[^zZ]\\b|\\b[^zZ]\\w*[zZ]\\b|\\b[zZ]\\w*[^zZ]\\b'\n    return bool(re.search(pattern, s))"}
{"benchmark": "mbpp", "task_id": "614", "prompt": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.", "reference_code": "def cummulative_sum(test_list):\n  res = sum(map(sum, test_list))\n  return (res)", "test_imports": [], "test_list": ["assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30", "assert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37", "assert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def cummulative_sum(tuple_list):\n    \"\"\"\n    Calculate the cumulative sum of all values in the given list of tuples.\n    \n    Args:\n        tuple_list: A list of tuples where each tuple contains numeric values.\n    \n    Returns:\n        The sum of all individual values across all tuples.\n    \"\"\"\n    total = 0\n    for t in tuple_list:\n        total += sum(t)\n    return total"}
{"benchmark": "mbpp", "task_id": "630", "prompt": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.", "reference_code": "def adjac(ele, sub = []): \n  if not ele: \n     yield sub \n  else: \n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \n                for idx in adjac(ele[1:], sub + [j])] \ndef get_coordinates(test_tup):\n  return list(adjac(test_tup))", "test_imports": [], "test_list": ["assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]", "assert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]", "assert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def get_coordinates(coord):\n    \"\"\"Return all adjacent coordinates including diagonal neighbors.\n    \n    Args:\n        coord: A tuple (x, y) representing the coordinate for which to find neighbors.\n    \n    Returns:\n        A list of tuples representing the 8 adjacent coordinates around the input.\n    \"\"\"\n    x, y = coord\n    adjacent = []\n    for dx in (-1, 0, 1):\n        for dy in (-1, 0, 1):\n            if dx == 0 and dy == 0:\n                continue\n            new_x = x + dx\n            new_y = y + dy\n            adjacent.append((new_x, new_y))\n    return adjacent"}
{"benchmark": "mbpp", "task_id": "723", "prompt": "The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.", "reference_code": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result", "test_imports": [], "test_list": ["assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4", "assert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11", "assert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1", "assert count_same_pair([0, 1, 1, 2],[0, 1, 2, 2])==3"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def count_same_pair(list1, list2):\n    return sum(1 for a, b in zip(list1, list2) if a == b)"}
{"benchmark": "mbpp", "task_id": "725", "prompt": "Write a function to extract values between quotation marks \" \" of the given string.", "reference_code": "import re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))", "test_imports": [], "test_list": ["assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']", "assert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']", "assert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']", "assert extract_quotation(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") == []"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "import re\n\ndef extract_quotation(text):\n    return re.findall(r'\"(.*?)\"', text)"}
{"benchmark": "mbpp", "task_id": "724", "prompt": "Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.", "reference_code": "def power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])", "test_imports": [], "test_list": ["assert power_base_sum(2,100)==115", "assert power_base_sum(8,10)==37", "assert power_base_sum(8,15)==62", "assert power_base_sum(3,3)==9"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def power_base_sum(base, power):\n    num = pow(base, power)\n    return sum(int(digit) for digit in str(num))"}
{"benchmark": "mbpp", "task_id": "728", "prompt": "Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].", "reference_code": "def sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list", "test_imports": [], "test_list": ["assert sum_list([10,20,30],[15,25,35])==[25,45,65]", "assert sum_list([1,2,3],[5,6,7])==[6,8,10]", "assert sum_list([15,20,30],[15,45,75])==[30,65,105]"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]"}
{"benchmark": "mbpp", "task_id": "726", "prompt": "Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.", "reference_code": "def multiply_elements(test_tup):\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ", "test_imports": [], "test_list": ["assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)", "assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)", "assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)", "assert multiply_elements((12,)) == ()"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def multiply_elements(t):\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))"}
{"benchmark": "mbpp", "task_id": "722", "prompt": "The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.", "reference_code": "def filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    ", "test_imports": [], "test_list": ["assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}", "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}", "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def filter_data(students: dict, min_height: float, min_weight: float) -> dict:\n    \"\"\"\n    Filters students whose height and weight are above the given minimums.\n    \n    Args:\n        students: Dictionary with student names as keys and (height, weight) tuples as values.\n        min_height: Minimum height threshold.\n        min_weight: Minimum weight threshold.\n    \n    Returns:\n        A new dictionary containing only students who meet the height and weight criteria.\n    \"\"\"\n    return {name: (height, weight) \n            for name, (height, weight) in students.items() \n            if height > min_height and weight > min_weight}"}
{"benchmark": "mbpp", "task_id": "635", "prompt": "Write a function to sort the given list.", "reference_code": "import heapq as hq\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]", "test_imports": [], "test_list": ["assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]", "assert heap_sort( [7, 1, 9, 5])==[1,5,7,9]"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def heap_sort(arr):\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        \n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        \n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        \n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n    \n    n = len(arr)\n    \n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    \n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)"}
{"benchmark": "mbpp", "task_id": "732", "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.", "reference_code": "import re\ndef replace_specialchar(text):\n return (re.sub(\"[ ,.]\", \":\", text))\n", "test_imports": [], "test_list": ["assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')", "assert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')", "assert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "import re\n\ndef replace_specialchar(text):\n    return re.sub(r'[ ,.]', ':', text)"}
{"benchmark": "mbpp", "task_id": "620", "prompt": "Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.", "reference_code": "def largest_subset(a):\n\tn = len(a)\n\tdp = [0 for i in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0;\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)", "test_imports": [], "test_list": ["assert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4", "assert largest_subset([10, 5, 3, 15, 20]) == 3", "assert largest_subset([18, 1, 3, 6, 13, 17]) == 4"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def largest_subset(numbers):\n    if not numbers:\n        return 0\n    numbers.sort()\n    dp = [1] * len(numbers)\n    max_size = 1\n    \n    for i in range(1, len(numbers)):\n        for j in range(i):\n            if numbers[i] % numbers[j] == 0:\n                if dp[i] < dp[j] + 1:\n                    dp[i] = dp[j] + 1\n        if dp[i] > max_size:\n            max_size = dp[i]\n    \n    return max_size"}
{"benchmark": "mbpp", "task_id": "644", "prompt": "Write a python function to reverse an array upto a given position.", "reference_code": "def reverse_Array_Upto_K(input, k): \n  return (input[k-1::-1] + input[k:]) ", "test_imports": [], "test_list": ["assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]", "assert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]", "assert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def reverse_Array_Upto_K(arr, k):\n    \"\"\"\n    Reverse the elements of the array up to the given position k (0-based index).\n    The rest of the array remains unchanged.\n    \n    Parameters:\n    arr (list): The array to be partially reversed.\n    k (int): The position up to which the array is reversed (0-based).\n    \n    Returns:\n    list: The array with elements reversed up to position k.\n    \"\"\"\n    if k >= len(arr):\n        return arr[::-1]\n    return arr[:k+1][::-1] + arr[k+1:]"}
{"benchmark": "mbpp", "task_id": "730", "prompt": "Write a function to remove consecutive duplicates of a given list.", "reference_code": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)] ", "test_imports": [], "test_list": ["assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]", "assert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]", "assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']", "assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd', 'a', 'a'])==['a', 'b', 'c', 'd', 'a']"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def consecutive_duplicates(lst):\n    if not lst:\n        return []\n    result = [lst[0]]\n    for item in lst[1:]:\n        if item != result[-1]:\n            result.append(item)\n    return result"}
{"benchmark": "mbpp", "task_id": "731", "prompt": "Write a function to find the lateral surface area of a cone given radius r and the height h.", "reference_code": "import math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA", "test_imports": [], "test_list": ["assert lateralsurface_cone(5,12)==204.20352248333654", "assert lateralsurface_cone(10,15)==566.3586699569488", "assert lateralsurface_cone(19,17)==1521.8090132193388"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cone with radius r and height h.\n    Formula: lateral surface area = π * r * l, where l is the slant height.\n    The slant height l can be calculated as sqrt(r^2 + h^2).\n    \"\"\"\n    l = math.sqrt(r ** 2 + h ** 2)\n    return math.pi * r * l"}
{"benchmark": "mbpp", "task_id": "736", "prompt": "Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php", "reference_code": "import bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i", "test_imports": [], "test_list": ["assert left_insertion([1,2,4,5],6)==4", "assert left_insertion([1,2,4,5],3)==2", "assert left_insertion([1,2,4,5],7)==4"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "import bisect\n\ndef left_insertion(lst, value):\n    return bisect.bisect_left(lst, value)"}
{"benchmark": "mbpp", "task_id": "734", "prompt": "Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/", "reference_code": "def sum_Of_Subarray_Prod(arr):\n    ans = 0\n    res = 0\n    i = len(arr) - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)", "test_imports": [], "test_list": ["assert sum_Of_Subarray_Prod([1,2,3]) == 20", "assert sum_Of_Subarray_Prod([1,2]) == 5", "assert sum_Of_Subarray_Prod([1,2,3,4]) == 84"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    total = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total += product\n    return total"}
{"benchmark": "mbpp", "task_id": "737", "prompt": "Write a function to check whether the given string is starting with a vowel or not using regex.", "reference_code": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n\treturn re.search(regex, string)", "test_imports": [], "test_list": ["assert check_str(\"annie\")", "assert not check_str(\"dawood\")", "assert check_str(\"Else\")"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "import re\n\ndef check_str(s: str) -> bool:\n    \"\"\"Return True if the string starts with a vowel, False otherwise.\"\"\"\n    return bool(re.match(r'^[aeiouAEIOU]', s))"}
{"benchmark": "mbpp", "task_id": "733", "prompt": "Write a function to find the index of the first occurrence of a given number in a sorted array.", "reference_code": "def find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result", "test_imports": [], "test_list": ["assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1", "assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2", "assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    first_occurrence = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            first_occurrence = mid\n            right = mid - 1  # continue searching to the left\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return first_occurrence"}
{"benchmark": "mbpp", "task_id": "743", "prompt": "Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/", "reference_code": "def rotate_right(list, m):\n  result =  list[-m:] + list[:-m]\n  return result", "test_imports": [], "test_list": ["assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]", "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]", "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def rotate_right(lst, n):\n    if not lst:\n        return lst\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]"}
{"benchmark": "mbpp", "task_id": "741", "prompt": "Write a python function to check whether all the characters are same or not.", "reference_code": "def all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True", "test_imports": [], "test_list": ["assert all_Characters_Same(\"python\") == False", "assert all_Characters_Same(\"aaa\") == True", "assert all_Characters_Same(\"data\") == False"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def all_Characters_Same(s):\n    if not s:\n        return True\n    first_char = s[0]\n    for char in s[1:]:\n        if char != first_char:\n            return False\n    return True"}
{"benchmark": "mbpp", "task_id": "740", "prompt": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/", "reference_code": "def tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) ", "test_imports": [], "test_list": ["assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}", "assert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}", "assert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def tuple_to_dict(t):\n    if len(t) % 2 != 0:\n        raise ValueError(\"Input tuple must have an even number of elements\")\n    return {t[i]: t[i + 1] for i in range(0, len(t), 2)}"}
{"benchmark": "mbpp", "task_id": "744", "prompt": "Write a function to check if the given tuple has any none value or not.", "reference_code": "def check_none(test_tup):\n  res = any(map(lambda ele: ele is None, test_tup))\n  return res ", "test_imports": [], "test_list": ["assert check_none((10, 4, 5, 6, None)) == True", "assert check_none((7, 8, 9, 11, 14)) == False", "assert check_none((1, 2, 3, 4, None)) == True"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def check_none(tup):\n    \"\"\"Check if the given tuple has any None value.\"\"\"\n    return any(x is None for x in tup)"}
{"benchmark": "mbpp", "task_id": "749", "prompt": "Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/", "reference_code": "def sort_numeric_strings(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result", "test_imports": [], "test_list": ["assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]", "assert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]", "assert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def sort_numeric_strings(strings):\n    return sorted(strings, key=lambda x: int(x))"}
{"benchmark": "mbpp", "task_id": "746", "prompt": "Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.", "reference_code": "import math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    return (math.pi*r**2) * (a/360)", "test_imports": [], "test_list": ["assert sector_area(4,45)==6.283185307179586", "assert sector_area(9,45)==31.808625617596654", "assert sector_area(9,361)==None"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    return (angle / 360) * math.pi * radius ** 2"}
{"benchmark": "mbpp", "task_id": "748", "prompt": "Write a function to put spaces between words starting with capital letters in a given string.", "reference_code": "import re\ndef capital_words_spaces(str1):\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)", "test_imports": [], "test_list": ["assert capital_words_spaces(\"Python\") == 'Python'", "assert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'", "assert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "import re\n\ndef capital_words_spaces(s):\n    return re.sub(r'(?<=.)([A-Z])', r' \\1', s)"}
{"benchmark": "mbpp", "task_id": "742", "prompt": "Write a function to caluclate the area of a tetrahedron.", "reference_code": "import math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area", "test_imports": [], "test_list": ["assert area_tetrahedron(3)==15.588457268119894", "assert area_tetrahedron(20)==692.8203230275509", "assert area_tetrahedron(10)==173.20508075688772"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Calculate the surface area of a regular tetrahedron where all edges are the same length.\n    \n    Args:\n        side (float): The length of each edge of the tetrahedron.\n    \n    Returns:\n        float: The total surface area of the tetrahedron.\n    \"\"\"\n    if side <= 0:\n        return 0.0\n    return math.sqrt(3) * side ** 2"}
{"benchmark": "mbpp", "task_id": "745", "prompt": "Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php", "reference_code": "def divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]", "test_imports": [], "test_list": ["assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(20,25)==[22, 24]"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(d) for d in str(num) if d != '0']\n        if digits and all(num % d == 0 for d in digits):\n            result.append(num)\n    return result"}
{"benchmark": "mbpp", "task_id": "738", "prompt": "Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php", "reference_code": "def geometric_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)", "test_imports": [], "test_list": ["assert geometric_sum(7) == 1.9921875", "assert geometric_sum(4) == 1.9375", "assert geometric_sum(8) == 1.99609375"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def geometric_sum(n):\n    \"\"\"\n    Calculate the geometric sum of the series 1 + 1/2 + 1/4 + 1/8 + ... + 1/2^(n-1)\n    using recursion.\n    \n    Args:\n        n (int): The number of terms in the geometric series (non-negative integer).\n    \n    Returns:\n        float: The sum of the geometric series.\n    \"\"\"\n    if n <= 0:\n        return 0.0\n    return 1 / (2 ** (n - 1)) + geometric_sum(n - 1)"}
{"benchmark": "mbpp", "task_id": "750", "prompt": "Write a function to add the given tuple to the given list.", "reference_code": "def add_tuple(test_list, test_tup):\n  test_list += test_tup\n  return test_list", "test_imports": [], "test_list": ["assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]", "assert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]", "assert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def add_tuple(lst, tup):\n    lst.append(tup)"}
{"benchmark": "mbpp", "task_id": "752", "prompt": "Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...", "reference_code": "def jacobsthal_num(n): \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]", "test_imports": [], "test_list": ["assert jacobsthal_num(5) == 11", "assert jacobsthal_num(2) == 1", "assert jacobsthal_num(4) == 5", "assert jacobsthal_num(13) == 2731"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        c = a + 2 * b\n        a, b = b, c\n    return b"}
{"benchmark": "mbpp", "task_id": "721", "prompt": "Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.", "reference_code": "def maxAverageOfPath(cost):\n  N = len(cost)\n  dp = [[0 for i in range(N + 1)] for j in range(N + 1)]\n  dp[0][0] = cost[0][0]\n  for i in range(1, N):\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  for j in range(1, N):\n    dp[0][j] = dp[0][j - 1] + cost[0][j]\n  for i in range(1, N):\n    for j in range(1, N):\n      dp[i][j] = max(dp[i - 1][j],\n                     dp[i][j - 1]) + cost[i][j]\n  return dp[N - 1][N - 1] / (2 * N - 1)", "test_imports": [], "test_list": ["assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2", "assert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2", "assert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2", "assert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def maxAverageOfPath(matrix):\n    if not matrix or not matrix[0]:\n        return 0.0\n    \n    n = len(matrix)\n    # Create a DP table to store the maximum sum up to each cell\n    dp_sum = [[0] * n for _ in range(n)]\n    dp_length = [[0] * n for _ in range(n)]\n    \n    dp_sum[0][0] = matrix[0][0]\n    dp_length[0][0] = 1\n    \n    # Initialize first row: can only move right\n    for j in range(1, n):\n        dp_sum[0][j] = dp_sum[0][j-1] + matrix[0][j]\n        dp_length[0][j] = dp_length[0][j-1] + 1\n    \n    # Initialize first column: can only move down\n    for i in range(1, n):\n        dp_sum[i][0] = dp_sum[i-1][0] + matrix[i][0]\n        dp_length[i][0] = dp_length[i-1][0] + 1\n    \n    # Fill DP table\n    for i in range(1, n):\n        for j in range(1, n):\n            # Decide whether to come from the top or left based on which gives a higher average\n            top_sum = dp_sum[i-1][j] + matrix[i][j]\n            top_len = dp_length[i-1][j] + 1\n            top_avg = top_sum / top_len\n            \n            left_sum = dp_sum[i][j-1] + matrix[i][j]\n            left_len = dp_length[i][j-1] + 1\n            left_avg = left_sum / left_len\n            \n            if top_avg > left_avg:\n                dp_sum[i][j] = top_sum\n                dp_length[i][j] = top_len\n            else:\n                dp_sum[i][j] = left_sum\n                dp_length[i][j] = left_len\n    \n    return dp_sum[-1][-1] / dp_length[-1][-1]"}
{"benchmark": "mbpp", "task_id": "739", "prompt": "Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/", "reference_code": "import math \ndef find_Index(n): \n    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)", "test_imports": [], "test_list": ["assert find_Index(2) == 4", "assert find_Index(3) == 14", "assert find_Index(4) == 45"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "import math\n\ndef find_Index(n):\n    if n == 1:\n        return 0\n    \n    # Calculate the minimum and maximum values of x where the triangular number has n digits\n    lower = 10 ** (n - 1)\n    upper = 10 ** n - 1\n    \n    # Using the approximation: x^2 ≈ 2 * 10^(n-1), solve for x\n    x = math.isqrt(2 * lower)\n    \n    # Adjust x to get the minimal triangular number with at least n digits\n    while True:\n        triangular = x * (x + 1) // 2\n        if triangular <= upper:\n            if triangular >= lower:\n                return x\n            else:\n                x += 1\n        else:\n            x -= 1"}
{"benchmark": "mbpp", "task_id": "754", "prompt": "We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.", "reference_code": "def extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result", "test_imports": [], "test_list": ["assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]", "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]", "assert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]", "assert extract_index_list([1, 2, 3, 4, 6, 6, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[]"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    min_length = min(len(l1), len(l2), len(l3))\n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"}
{"benchmark": "mbpp", "task_id": "756", "prompt": "Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php", "reference_code": "import re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False", "test_imports": [], "test_list": ["assert text_match_zero_one(\"ac\")==False", "assert text_match_zero_one(\"dc\")==False", "assert text_match_zero_one(\"abbbba\")==True", "assert text_match_zero_one(\"dsabbbba\")==True", "assert text_match_zero_one(\"asbbbba\")==False", "assert text_match_zero_one(\"abaaa\")==True"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"}
{"benchmark": "mbpp", "task_id": "735", "prompt": "Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/", "reference_code": "def set_middle_bits(n):  \n    n |= n >> 1; \n    n |= n >> 2; \n    n |= n >> 4; \n    n |= n >> 8; \n    n |= n >> 16;  \n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n): \n    if (n == 1): \n        return 1\n    return n ^ set_middle_bits(n) ", "test_imports": [], "test_list": ["assert toggle_middle_bits(9) == 15", "assert toggle_middle_bits(10) == 12", "assert toggle_middle_bits(11) == 13", "assert toggle_middle_bits(0b1000001) == 0b1111111", "assert toggle_middle_bits(0b1001101) == 0b1110011"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def toggle_middle_bits(n):\n    if n <= 2:  # No middle bits to toggle\n        return n\n    \n    # Calculate the number of bits in the binary representation\n    num_bits = n.bit_length()\n    \n    # If there's effectively no middle bits (e.g., 3 is 0b11, which has 2 bits)\n    if num_bits <= 2:\n        return n\n    \n    # Create a mask that has all bits set between the first and last bit\n    # For example, for 5 bits (0b10000), mask is 0b01110\n    mask = (1 << (num_bits - 1)) - 2  # Equivalent to (2^(num_bits-1) - 1) - 1\n    \n    # Toggle the bits\n    return n ^ mask"}
{"benchmark": "mbpp", "task_id": "751", "prompt": "Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/", "reference_code": "def check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)", "test_imports": [], "test_list": ["assert check_min_heap([1, 2, 3, 4, 5, 6]) == True", "assert check_min_heap([2, 3, 4, 5, 10, 15]) == True", "assert check_min_heap([2, 10, 4, 5, 3, 15]) == False"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def check_min_heap(arr):\n    \"\"\"\n    Check if the given array represents a min heap.\n    A min heap is a complete binary tree where each parent node is less than or equal to its children.\n    \"\"\"\n    n = len(arr)\n    # Iterate through all parent nodes\n    for i in range((n // 2) - 1, -1, -1):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        \n        # Check left child\n        if left < n and arr[i] > arr[left]:\n            return False\n        \n        # Check right child\n        if right < n and arr[i] > arr[right]:\n            return False\n    \n    return True"}
{"benchmark": "mbpp", "task_id": "755", "prompt": "Write a function to find the second smallest number in a list.", "reference_code": "def second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]", "test_imports": [], "test_list": ["assert second_smallest([1, 2, -8, -2, 0, -2])==-2", "assert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5", "assert second_smallest([2,2])==None", "assert second_smallest([2,2,2])==None"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements\")\n    \n    first = second = float('inf')\n    \n    for num in numbers:\n        if num < first:\n            second = first\n            first = num\n        elif num < second and num != first:\n            second = num\n    \n    if second == float('inf'):\n        raise ValueError(\"No second smallest element exists\")\n    \n    return second"}
{"benchmark": "mbpp", "task_id": "758", "prompt": "Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.", "reference_code": "def unique_sublists(list1):\n    result ={}\n    for l in  list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result", "test_imports": [], "test_list": ["assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}", "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}", "assert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}", "assert unique_sublists([['john']])=={('john',): 1}"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def unique_sublists(lst):\n    counts = {}\n    for element in lst:\n        if isinstance(element, list):\n            key = tuple(element)\n        else:\n            key = element\n        counts[key] = counts.get(key, 0) + 1\n    return counts"}
{"benchmark": "mbpp", "task_id": "762", "prompt": "Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.", "reference_code": "def check_monthnumber_number(monthnum3):\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11", "test_imports": [], "test_list": ["assert check_monthnumber_number(6)==True", "assert check_monthnumber_number(2)==False", "assert check_monthnumber_number(12)==False"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def check_monthnumber_number(month):\n    thirty_day_months = {4, 6, 9, 11}\n    return month in thirty_day_months"}
{"benchmark": "mbpp", "task_id": "757", "prompt": "Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/", "reference_code": "def count_reverse_pairs(test_list):\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \n  return res", "test_imports": [], "test_list": ["assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2", "assert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == 1", "assert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == 2"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def count_reverse_pairs(string_list):\n    count = 0\n    seen = set()\n    for s in string_list:\n        reversed_s = s[::-1]\n        if reversed_s in seen:\n            count += 1\n            seen.remove(reversed_s)\n        else:\n            seen.add(s)\n    return count"}
{"benchmark": "mbpp", "task_id": "747", "prompt": "Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/", "reference_code": "def lcs_of_three(X, Y, Z): \n  m = len(X)\n  n = len(Y)\n  o = len(Z)\n  L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n  for i in range(m+1): \n\t  for j in range(n+1): \n\t\t  for k in range(o+1): \n\t\t\t  if (i == 0 or j == 0 or k == 0): \n\t\t\t\t  L[i][j][k] = 0\n\t\t\t  elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n\t\t\t\t  L[i][j][k] = L[i-1][j-1][k-1] + 1\n\t\t\t  else: \n\t\t\t\t  L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n  return L[m][n][o]", "test_imports": [], "test_list": ["assert lcs_of_three('AGGT12', '12TXAYB', '12XBA') == 2", "assert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels') == 5", "assert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea') == 3"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    # Create a 3D table to store lengths of LCS of substrings\n    L = [[[0 for _ in range(o+1)] for __ in range(n+1)] for ___ in range(m+1)]\n    \n    # Building the table in bottom-up fashion\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    \n    return L[m][n][o]"}
{"benchmark": "mbpp", "task_id": "759", "prompt": "Write a function to check whether a given string is a decimal number with a precision of 2.", "reference_code": "def is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)", "test_imports": [], "test_list": ["assert is_decimal('123.11')==True", "assert is_decimal('e666.86')==False", "assert is_decimal('3.124587')==False", "assert is_decimal('1.11')==True", "assert is_decimal('1.1.11')==False"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "import re\n\ndef is_decimal(s: str) -> bool:\n    pattern = r'^[+-]?\\d*\\.\\d{2}$'\n    return bool(re.fullmatch(pattern, s))"}
{"benchmark": "mbpp", "task_id": "753", "prompt": "Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases", "reference_code": "def min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) ", "test_imports": [], "test_list": ["assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]", "assert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]", "assert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def min_k(tuples_list, k):\n    \"\"\"\n    Finds the minimum k records from a list of tuples based on the last element of each tuple.\n    \n    Args:\n        tuples_list: List of tuples where each tuple has at least one element.\n        k: Number of minimum records to return.\n        \n    Returns:\n        List of k tuples with the smallest last elements.\n    \"\"\"\n    if not tuples_list or k <= 0:\n        return []\n    sorted_list = sorted(tuples_list, key=lambda x: x[-1])\n    return sorted_list[:k]"}
{"benchmark": "mbpp", "task_id": "764", "prompt": "Write a python function to count number of digits in a given string.", "reference_code": "def number_ctr(str):\n      number_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \n      return  number_ctr", "test_imports": [], "test_list": ["assert number_ctr('program2bedone') == 1", "assert number_ctr('3wonders') == 1", "assert number_ctr('123') == 3", "assert number_ctr('3wond-1ers2') == 3"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def number_ctr(input_str):\n    count = 0\n    for char in input_str:\n        if char.isdigit():\n            count += 1\n    return count"}
{"benchmark": "mbpp", "task_id": "763", "prompt": "Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/", "reference_code": "def find_min_diff(arr,n): \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff ", "test_imports": [], "test_list": ["assert find_min_diff((1,5,3,19,18,25),6) == 1", "assert find_min_diff((4,3,2,6),4) == 1", "assert find_min_diff((30,5,20,9),4) == 4"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def find_min_diff(arr):\n    if len(arr) < 2:\n        return 0\n    \n    arr.sort()\n    min_diff = float('inf')\n    \n    for i in range(1, len(arr)):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff"}
{"benchmark": "mbpp", "task_id": "769", "prompt": "Write a python function to get the difference between two lists.", "reference_code": "def Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n ", "test_imports": [], "test_list": ["assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]", "assert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]", "assert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def Diff(li1, li2):\n    return list(set(li1) - set(li2)) + list(set(li2) - set(li1))"}
{"benchmark": "mbpp", "task_id": "760", "prompt": "Write a python function to check whether a list of numbers contains only one distinct element or not.", "reference_code": "def unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1", "test_imports": [], "test_list": ["assert unique_Element([1,1,1]) == True", "assert unique_Element([1,2,1,2]) == False", "assert unique_Element([1,2,3,4,5]) == False"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def unique_Element(arr):\n    \"\"\"\n    Checks whether a list of numbers contains only one distinct element.\n    \n    Args:\n        arr (list): List of numbers to check.\n        \n    Returns:\n        bool: True if all elements are the same, False otherwise.\n    \"\"\"\n    if not arr:\n        return True\n    first_element = arr[0]\n    for element in arr[1:]:\n        if element != first_element:\n            return False\n    return True"}
{"benchmark": "mbpp", "task_id": "767", "prompt": "Write a python function to count the number of pairs whose sum is equal to ‘sum’. The funtion gets as input a list of numbers and the sum,", "reference_code": "def get_pairs_count(arr, sum):\n    count = 0  \n    for i in range(len(arr)):\n        for j in range(i + 1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count", "test_imports": [], "test_list": ["assert get_pairs_count([1,1,1,1],2) == 6", "assert get_pairs_count([1,5,7,-1,5],6) == 3", "assert get_pairs_count([1,-2,3],1) == 1", "assert get_pairs_count([-1,-2,3],-3) == 1"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def get_pairs_count(arr, sum):\n    count = 0\n    frequency = {}\n    \n    for num in arr:\n        complement = sum - num\n        if complement in frequency:\n            count += frequency[complement]\n        frequency[num] = frequency.get(num, 0) + 1\n    \n    return count"}
{"benchmark": "mbpp", "task_id": "766", "prompt": "Write a function to return a list of all pairs of consecutive items in a given list.", "reference_code": "def pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp", "test_imports": [], "test_list": ["assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]", "assert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]", "assert pair_wise([5,1,9,7,10])==[(5, 1), (1, 9), (9, 7), (7, 10)]", "assert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def pair_wise(items):\n    \"\"\"Return a list of all pairs of consecutive items in the input list.\"\"\"\n    return [(items[i], items[i + 1]) for i in range(len(items) - 1)]"}
{"benchmark": "mbpp", "task_id": "772", "prompt": "Write a function to remove all the words with k length in the given string.", "reference_code": "def remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res) ", "test_imports": [], "test_list": ["assert remove_length('The person is most value tet', 3) == 'person is most value'", "assert remove_length('If you told me about this ok', 4) == 'If you me about ok'", "assert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def remove_length(string, k):\n    if not string:\n        return string\n    words = string.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)"}
{"benchmark": "mbpp", "task_id": "770", "prompt": "Write a python function to find the sum of fourth power of first n odd natural numbers.", "reference_code": "def odd_num_sum(n) : \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm ", "test_imports": [], "test_list": ["assert odd_num_sum(2) == 82", "assert odd_num_sum(3) == 707", "assert odd_num_sum(4) == 3108"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def odd_num_sum(n):\n    \"\"\"\n    Calculate the sum of the fourth powers of the first n odd natural numbers.\n    \n    Args:\n        n (int): The number of odd natural numbers to consider.\n    \n    Returns:\n        int: The sum of the fourth powers of the first n odd natural numbers.\n    \"\"\"\n    return sum((2 * i + 1) ** 4 for i in range(n))"}
{"benchmark": "mbpp", "task_id": "771", "prompt": "Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/", "reference_code": "from collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack", "test_imports": [], "test_list": ["assert check_expression(\"{()}[{}]\") == True", "assert check_expression(\"{()}[{]\") == False", "assert check_expression(\"{()}[{}][]({})\") == True"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def check_expression(expr):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    \n    for char in expr:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or stack.pop() != mapping[char]:\n                return False\n    return not stack"}
{"benchmark": "mbpp", "task_id": "775", "prompt": "Write a python function to check whether every odd index contains odd numbers of a given list.", "reference_code": "def odd_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))", "test_imports": [], "test_list": ["assert odd_position([2,1,4,3,6,7,6,3]) == True", "assert odd_position([4,1,2]) == True", "assert odd_position([1,2,3]) == False"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 != 1:\n            return False\n    return True"}
{"benchmark": "mbpp", "task_id": "779", "prompt": "Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.", "reference_code": "def unique_sublists(list1):\n    result ={}\n    for l in list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result", "test_imports": [], "test_list": ["assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}", "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}", "assert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def unique_sublists(input_list):\n    counts = {}\n    for sublist in input_list:\n        if isinstance(sublist, list):\n            tuple_sub = tuple(sublist)\n            counts[tuple_sub] = counts.get(tuple_sub, 0) + 1\n    return counts"}
{"benchmark": "mbpp", "task_id": "778", "prompt": "Write a function to pack consecutive duplicates of a given list elements into sublists.", "reference_code": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]", "test_imports": [], "test_list": ["assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]", "assert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]", "assert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    packed = []\n    current = [lst[0]]\n    \n    for elem in lst[1:]:\n        if elem == current[0]:\n            current.append(elem)\n        else:\n            packed.append(current)\n            current = [elem]\n    \n    packed.append(current)\n    return packed"}
{"benchmark": "mbpp", "task_id": "773", "prompt": "Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.", "reference_code": "import re\ndef occurance_substring(text,pattern):\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)", "test_imports": [], "test_list": ["assert occurance_substring('python programming, python language','python')==('python', 0, 6)", "assert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)", "assert occurance_substring('python programming,programming language','language')==('language', 31, 39)", "assert occurance_substring('c++ programming, c++ language','python')==None"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def occurance_substring(text, pattern):\n    \"\"\"\n    Finds the occurrence and positions of the pattern substring within the text.\n    \n    Args:\n        text: The string to search within.\n        pattern: The substring to search for in text.\n        \n    Returns:\n        A dictionary with keys 'substring', 'start', 'end' if pattern is found,\n        otherwise None.\n    \"\"\"\n    start = text.find(pattern)\n    if start == -1:\n        return None\n    return {\n        'substring': pattern,\n        'start': start,\n        'end': start + len(pattern) - 1\n    }"}
{"benchmark": "mbpp", "task_id": "765", "prompt": "Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/", "reference_code": "import math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) ", "test_imports": [], "test_list": ["assert is_polite(7) == 11", "assert is_polite(4) == 7", "assert is_polite(9) == 13"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def is_polite(n):\n    \"\"\"\n    Returns the nth polite number, which is the nth positive integer that can be expressed as a sum of two or more consecutive positive integers.\n    The nth polite number is given by n + floor(log2(n + log2(n + 1))) (approximation).\n    Alternatively, polite numbers are all numbers not powers of 2, so the nth polite number is n + k, where k is the smallest integer such that (n + k) is not a power of 2.\n    \"\"\"\n    if n == 0:\n        return 0\n    polite = 0\n    count = 0\n    num = 1\n    while count < n:\n        if (num & (num - 1)) != 0:\n            count += 1\n        polite = num\n        num += 1\n    return polite"}
{"benchmark": "mbpp", "task_id": "781", "prompt": "Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php", "reference_code": "import math \ndef count_divisors(n) : \n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \n        if (n % i == 0) : \n            if( n // i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count % 2 == 0", "test_imports": [], "test_list": ["assert count_divisors(10)", "assert not count_divisors(100)", "assert count_divisors(125)"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "import math\n\ndef count_divisors(num):\n    if num == 0:\n        return False\n    sqrt_num = int(math.sqrt(num))\n    if sqrt_num * sqrt_num == num:\n        return False\n    return True"}
{"benchmark": "mbpp", "task_id": "777", "prompt": "Write a python function to find the sum of non-repeated elements in a given list.", "reference_code": "def find_sum(arr): \n    arr.sort() \n    sum = arr[0] \n    for i in range(len(arr)-1): \n        if (arr[i] != arr[i+1]): \n            sum = sum + arr[i+1]   \n    return sum", "test_imports": [], "test_list": ["assert find_sum([1,2,3,1,1,4,5,6]) == 21", "assert find_sum([1,10,9,4,2,10,10,45,4]) == 71", "assert find_sum([12,10,9,45,2,10,10,45,10]) == 78"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def find_sum(lst):\n    unique_elements = []\n    seen = set()\n    for num in lst:\n        if num not in seen:\n            seen.add(num)\n            unique_elements.append(num)\n        else:\n            if num in unique_elements:\n                unique_elements.remove(num)\n    return sum(unique_elements)"}
{"benchmark": "mbpp", "task_id": "786", "prompt": "Write a function to locate the right insertion point for a specified value in sorted order.", "reference_code": "import bisect\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)", "test_imports": [], "test_list": ["assert right_insertion([1,2,4,5],6)==4", "assert right_insertion([1,2,4,5],3)==2", "assert right_insertion([1,2,4,5],7)==4"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "import bisect\n\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)"}
{"benchmark": "mbpp", "task_id": "787", "prompt": "Write a function that matches a string that has an a followed by three 'b'.", "reference_code": "import re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)", "test_imports": [], "test_list": ["assert not text_match_three(\"ac\")", "assert not text_match_three(\"dc\")", "assert text_match_three(\"abbbba\")", "assert text_match_three(\"caacabbbba\")"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "import re\n\ndef text_match_three(text):\n    pattern = r'abbb'\n    return bool(re.fullmatch(pattern, text))"}
{"benchmark": "mbpp", "task_id": "776", "prompt": "Write a function to count those characters which have vowels as their neighbors in the given string.", "reference_code": "def count_vowels(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res) ", "test_imports": [], "test_list": ["assert count_vowels('bestinstareels') == 7", "assert count_vowels('partofthejourneyistheend') == 12", "assert count_vowels('amazonprime') == 5"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def count_vowels(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    n = len(s)\n    for i in range(n):\n        left = s[i-1] if i > 0 else None\n        right = s[i+1] if i < n-1 else None\n        # Check if either left or right is a vowel\n        if (left in vowels) or (right in vowels):\n            count += 1\n    return count"}
{"benchmark": "mbpp", "task_id": "788", "prompt": "Write a function to create a new tuple from the given string and list.", "reference_code": "def new_tuple(test_list, test_str):\n  return tuple(test_list + [test_str])", "test_imports": [], "test_list": ["assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')", "assert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')", "assert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def new_tuple(s, lst):\n    return (s, *lst)"}
{"benchmark": "mbpp", "task_id": "782", "prompt": "Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/", "reference_code": "def odd_length_sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum", "test_imports": [], "test_list": ["assert odd_length_sum([1,2,4]) == 14", "assert odd_length_sum([1,2,1,2]) == 15", "assert odd_length_sum([1,7]) == 8"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    for length in range(1, n + 1, 2):  # 1, 3, 5, ... up to n\n        for i in range(n - length + 1):\n            subarray = arr[i:i + length]\n            total_sum += sum(subarray)\n    return total_sum"}
{"benchmark": "mbpp", "task_id": "784", "prompt": "Write a function to find the product of first even and odd number of a given list.", "reference_code": "def mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)", "test_imports": [], "test_list": ["assert mul_even_odd([1,3,5,7,4,1,6,8])==4", "assert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2", "assert mul_even_odd([1,5,7,9,10])==10"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def mul_even_odd(list1):\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is None or first_odd is None:\n        return 0\n    else:\n        return first_even * first_odd"}
{"benchmark": "mbpp", "task_id": "792", "prompt": "Write a python function to count the number of lists in a given number of lists.", "reference_code": "def count_list(input_list): \n    return len(input_list)", "test_imports": [], "test_list": ["assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4", "assert count_list([[1,2],[2,3],[4,5]]) == 3", "assert count_list([[1,0],[2,0]]) == 2"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def count_list(lists):\n    return sum(isinstance(i, list) for i in lists)"}
{"benchmark": "mbpp", "task_id": "785", "prompt": "Write a function to convert tuple string to integer tuple.", "reference_code": "def tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) ", "test_imports": [], "test_list": ["assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)", "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)", "assert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)", "assert tuple_str_int(\"(7, 81, 19)\") == (7, 81, 19)"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def tuple_str_int(tuple_str):\n    \"\"\"Convert a string representation of a tuple to a tuple of integers.\n    \n    Args:\n        tuple_str: String representing a tuple, e.g., \"(1, 2, 3)\".\n    \n    Returns:\n        Tuple of integers extracted from the string.\n    \"\"\"\n    # Remove parentheses and split elements by comma\n    content = tuple_str.strip()[1:-1]\n    elements = [item.strip() for item in content.split(',')] if content else []\n    # Convert each element to integer\n    return tuple(int(element) for element in elements)"}
{"benchmark": "mbpp", "task_id": "790", "prompt": "Write a python function to check whether every even index contains even numbers of a given list.", "reference_code": "def even_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))", "test_imports": [], "test_list": ["assert even_position([3,2,1]) == False", "assert even_position([1,2,3]) == False", "assert even_position([2,1,4]) == True"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def even_position(nums):\n    for index, num in enumerate(nums):\n        if index % 2 == 0 and num % 2 != 0:\n            return False\n    return True"}
{"benchmark": "mbpp", "task_id": "780", "prompt": "Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/", "reference_code": "from itertools import combinations \ndef find_combinations(test_list):\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return (res) ", "test_imports": [], "test_list": ["assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]", "assert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]", "assert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    Finds all possible combinations of sums of tuples in the given tuple list.\n    \n    Args:\n        test_list (list): List of tuples where each tuple contains two integers.\n    \n    Returns:\n        list: A list of tuples containing all possible sums from combining elements of the input tuples.\n    \"\"\"\n    res = set()\n    for combo in combinations(test_list, 2):\n        sum_first = combo[0][0] + combo[abcd][0]\n        sum_second = combo[0][1] + combo[1][1]\n        res.add((sum_first, sum_second))\n    return sorted(res)"}
{"benchmark": "mbpp", "task_id": "791", "prompt": "Write a function to remove tuples from the given tuple.", "reference_code": "def remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) ", "test_imports": [], "test_list": ["assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)", "assert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)", "assert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)", "assert remove_nested((3, 7, 9, (6, 8), (5,12), 12)) == (3, 7, 9, 12)"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def remove_nested(tup):\n    \"\"\"\n    Removes nested tuples from the given tuple and returns a new tuple.\n    For example, given (1, (2, 3), 4), returns (1, 4).\n    \"\"\"\n    result = []\n    for item in tup:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return tuple(result)"}
{"benchmark": "mbpp", "task_id": "796", "prompt": "Write function to find the sum of all items in the given dictionary.", "reference_code": "def return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum", "test_imports": [], "test_list": ["assert return_sum({'a': 100, 'b':200, 'c':300}) == 600", "assert return_sum({'a': 25, 'b':18, 'c':45}) == 88", "assert return_sum({'a': 36, 'b':39, 'c':49}) == 124"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def return_sum(dictionary):\n    return sum(dictionary.values())"}
{"benchmark": "mbpp", "task_id": "794", "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.", "reference_code": "import re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        return re.search(patterns,  text)", "test_imports": [], "test_list": ["assert text_starta_endb(\"aabbbb\")", "assert not text_starta_endb(\"aabAbbbc\")", "assert not text_starta_endb(\"accddbbjjj\")"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    return bool(re.fullmatch(pattern, text))"}
{"benchmark": "mbpp", "task_id": "798", "prompt": "Write a python function to find the sum of an array.", "reference_code": "def _sum(arr):  \n    sum=0\n    for i in arr: \n        sum = sum + i      \n    return(sum)  ", "test_imports": [], "test_list": ["assert _sum([1, 2, 3]) == 6", "assert _sum([15, 12, 13, 10]) == 50", "assert _sum([0, 1, 2]) == 3"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def _sum(arr):\n    return sum(arr)"}
{"benchmark": "mbpp", "task_id": "800", "prompt": "Write a function to remove all whitespaces from a string.", "reference_code": "import re\ndef remove_all_spaces(text):\n return (re.sub(r'\\s+', '',text))", "test_imports": [], "test_list": ["assert remove_all_spaces('python  program')==('pythonprogram')", "assert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')", "assert remove_all_spaces('python                     program')==('pythonprogram')", "assert remove_all_spaces('   python                     program')=='pythonprogram'"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def remove_all_spaces(s: str) -> str:\n    return ''.join(s.split())"}
{"benchmark": "mbpp", "task_id": "793", "prompt": "Write a python function to find the last position of an element in a sorted array.", "reference_code": "def last(arr,x):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res", "test_imports": [], "test_list": ["assert last([1,2,3],1) == 0", "assert last([1,1,1,2,3,4],1) == 2", "assert last([2,3,2,3,6,8,9],3) == 3"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def last(arr, target):\n    left, right = 0, len(arr) - 1\n    last_pos = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            last_pos = mid\n            left = mid + 1  # look for target in the right half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return last_pos"}
{"benchmark": "mbpp", "task_id": "783", "prompt": "Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/", "reference_code": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v", "test_imports": [], "test_list": ["assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)", "assert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)", "assert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def rgb_to_hsv(r: int, g: int, b: int):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    # Calculate H\n    if delta == 0:\n        h = 0\n    else:\n        if max_val == r:\n            h = 60 * (((g - b) / delta) % 6)\n        elif max_val == g:\n            h = 60 * (((b - r) / delta) + 2)\n        else:  # max_val == b\n            h = 60 * (((r - g) / delta) + 4)\n    \n    # Calculate S\n    if max_val == 0:\n        s = 0\n    else:\n        s = (delta / max_val) * 100\n    \n    # Calculate V\n    v = max_val * 100\n    \n    return (round(h, 2), round(s, 2), round(v, 2))"}
{"benchmark": "mbpp", "task_id": "801", "prompt": "Write a python function to count the number of equal numbers from three given integers.", "reference_code": "def test_three_equal(x,y,z):\n  result = set([x,y,z])\n  if len(result)==3:\n    return 0\n  else:\n    return 4-len(result)", "test_imports": [], "test_list": ["assert test_three_equal(1,1,1) == 3", "assert test_three_equal(-1,-2,-3) == 0", "assert test_three_equal(1,2,2) == 2"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def test_three_equal(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or a == c or b == c:\n        return 2\n    else:\n        return 0"}
{"benchmark": "mbpp", "task_id": "799", "prompt": "Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.", "reference_code": "def left_rotate(n,d):   \n    INT_BITS = 32\n    return (n << d)|(n >> (INT_BITS - d))  ", "test_imports": [], "test_list": ["assert left_rotate(16,2) == 64", "assert left_rotate(10,2) == 40", "assert left_rotate(99,3) == 792", "assert left_rotate(99,3) == 792", "assert left_rotate(0b0001,3) == 0b1000", "assert left_rotate(0b0101,3) == 0b101000", "assert left_rotate(0b11101,3) == 0b11101000"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def left_rotate(n, d):\n    # Ensure d is within the range of 0-31 to handle cases where d > 32\n    d = d % 32\n    # Perform left rotation\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF"}
{"benchmark": "mbpp", "task_id": "805", "prompt": "Write a function that returns the list in a list of lists whose sum of elements is the highest.", "reference_code": "def max_sum_list(lists):\n return max(lists, key=sum)", "test_imports": [], "test_list": ["assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]", "assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10]", "assert max_sum_list([[2,3,1]])==[2,3,1]"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def max_sum_list(lists):\n    if not lists:\n        return []\n    return max(lists, key=lambda x: sum(x))"}
{"benchmark": "mbpp", "task_id": "803", "prompt": "Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/", "reference_code": "def is_perfect_square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False", "test_imports": [], "test_list": ["assert not is_perfect_square(10)", "assert is_perfect_square(36)", "assert not is_perfect_square(14)", "assert is_perfect_square(14*14)", "assert not is_perfect_square(125)", "assert is_perfect_square(125*125)"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "import math\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n"}
{"benchmark": "mbpp", "task_id": "807", "prompt": "Write a python function to find the first odd number in a given list of numbers.", "reference_code": "def first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd", "test_imports": [], "test_list": ["assert first_odd([1,3,5]) == 1", "assert first_odd([2,4,1,3]) == 1", "assert first_odd ([8,9,1]) == 9"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None"}
{"benchmark": "mbpp", "task_id": "802", "prompt": "Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/", "reference_code": "def count_rotation(arr):   \n    for i in range (1,len(arr)): \n        if (arr[i] < arr[i - 1]): \n            return i  \n    return 0", "test_imports": [], "test_list": ["assert count_rotation([3,2,1]) == 1", "assert count_rotation([4,5,1,2,3]) == 2", "assert count_rotation([7,8,9,1,2,3]) == 3", "assert count_rotation([1,2,3]) == 0", "assert count_rotation([1,3,2]) == 2"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def count_rotation(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    min_index = 0\n    min_val = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n            min_index = i\n    return min_index"}
{"benchmark": "mbpp", "task_id": "806", "prompt": "Write a function to find maximum run of uppercase characters in the given string.", "reference_code": "def max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)", "test_imports": [], "test_list": ["assert max_run_uppercase('GeMKSForGERksISBESt') == 5", "assert max_run_uppercase('PrECIOusMOVemENTSYT') == 6", "assert max_run_uppercase('GooGLEFluTTER') == 4"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    \n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    \n    return max_run"}
{"benchmark": "mbpp", "task_id": "809", "prompt": "Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.", "reference_code": "def check_smaller(test_tup1, test_tup2):\n  return all(x > y for x, y in zip(test_tup1, test_tup2))", "test_imports": [], "test_list": ["assert check_smaller((1, 2, 3), (2, 3, 4)) == False", "assert check_smaller((4, 5, 6), (3, 4, 5)) == True", "assert check_smaller((11, 12, 13), (10, 11, 12)) == True"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def check_smaller(tuple1, tuple2):\n    \"\"\"Check if each element of tuple2 is smaller than the corresponding element in tuple1.\"\"\"\n    if len(tuple1) != len(tuple2):\n        return False\n    return all(x < y for x, y in zip(tuple2, tuple1))"}
{"benchmark": "mbpp", "task_id": "804", "prompt": "Write a function to check whether the product of numbers in a list is even or not.", "reference_code": "def is_product_even(arr): \n    for i in range(len(arr)): \n        if (arr[i] & 1) == 0: \n            return True\n    return False", "test_imports": [], "test_list": ["assert is_product_even([1,2,3])", "assert is_product_even([1,2,1,4])", "assert not is_product_even([1,1])"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "from typing import List\n\ndef is_product_even(array: List[int]) -> bool:\n    \"\"\"\n    Check if the product of numbers in the list is even.\n    Returns True if at least one even number is present in the list,\n    otherwise returns False.\n    \"\"\"\n    for num in array:\n        if num % 2 == 0:\n            return True\n    return False"}
{"benchmark": "mbpp", "task_id": "797", "prompt": "Write a python function to find the sum of all odd natural numbers within the range l and r.", "reference_code": "def sum_odd(n): \n    terms = (n + 1)//2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)", "test_imports": [], "test_list": ["assert sum_in_range(2,5) == 8", "assert sum_in_range(5,7) == 12", "assert sum_in_range(7,13) == 40"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def sum_in_range(l, r):\n    if l > r:\n        return 0\n    # Ensure l is odd\n    start = l if l % 2 != 0 else l + 1\n    # Ensure r is odd\n    end = r if r % 2 != 0 else r - 1\n    if start > end:\n        return 0\n    # Number of terms\n    n = ((end - start) // 2) + 1\n    # Sum of arithmetic series\n    return (start + end) * n // 2"}
{"benchmark": "mbpp", "task_id": "808", "prompt": "Write a function to check if the given tuples contain the k or not.", "reference_code": "def check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return res ", "test_imports": [], "test_list": ["assert check_K((10, 4, 5, 6, 8), 6) == True", "assert check_K((1, 2, 3, 4, 5, 6), 7) == False", "assert check_K((7, 8, 9, 44, 11, 12), 11) == True"], "model_name": "deepseek/deepseek-chat-v3-0324", "generated_code": "def check_K(test_tup, k):\n    \"\"\"\n    Check if the given tuples contain the element k.\n    \n    Args:\n        test_tup: A tuple or nested tuple to search within.\n        k: The element to search for.\n    \n    Returns:\n        bool: True if k is found in test_tup, False otherwise.\n    \"\"\"\n    if not isinstance(test_tup, tuple):\n        return False\n    \n    for elem in test_tup:\n        if elem == k:\n            return True\n        if isinstance(elem, tuple):\n            if check_K(elem, k):\n                return True\n    return False"}
