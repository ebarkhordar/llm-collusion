{"benchmark": "mbpp", "task_id": "624", "prompt": "Write a python function to convert a given string to uppercase.", "reference_code": "def is_upper(string):\n  return (string.upper())", "test_imports": [], "test_list": ["assert is_upper(\"person\") ==\"PERSON\"", "assert is_upper(\"final\") == \"FINAL\"", "assert is_upper(\"Valid\") == \"VALID\""], "model_name": "openai/gpt-5", "generated_code": "def is_upper(s):\n    \"\"\"\n    Convert the given input to an uppercase string.\n\n    Parameters:\n        s: The input to convert. Typically a string, but other objects will be\n           converted to string using str().\n\n    Returns:\n        str: Uppercased string representation of the input.\n    \"\"\"\n    if isinstance(s, str):\n        return s.upper()\n    return str(s).upper()"}
{"benchmark": "mbpp", "task_id": "640", "prompt": "Write a function to remove the parenthesis and what is inbetween them from a string.", "reference_code": "import re\ndef remove_parenthesis(items):\n for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))", "test_imports": [], "test_list": ["assert remove_parenthesis([\"python (chrome)\"])==(\"python\")", "assert remove_parenthesis([\"string(.abc)\"])==(\"string\")", "assert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")"], "model_name": "openai/gpt-5", "generated_code": "def remove_parenthesis(s: str) -> str:\n    \"\"\"\n    Remove all parentheses and the content inside them from the string, including nested ones.\n    Examples:\n    - \"example(unwanted thing)example\" -> \"exampleexample\"\n    - \"a(b(c)d)e\" -> \"ae\"\n    \"\"\"\n    result = []\n    depth = 0\n    for ch in s:\n        if ch == '(':\n            depth += 1\n        elif ch == ')':\n            if depth > 0:\n                depth -= 1\n            # If depth == 0, it's an unmatched ')', which we ignore.\n        else:\n            if depth == 0:\n                result.append(ch)\n    return ''.join(result)"}
{"benchmark": "mbpp", "task_id": "623", "prompt": "Write a function to compute the n-th power of each number in a list.", "reference_code": "def nth_nums(nums,n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums", "test_imports": [], "test_list": ["assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]", "assert nth_nums([10,20,30],3)==([1000, 8000, 27000])", "assert nth_nums([12,15],5)==([248832, 759375])"], "model_name": "openai/gpt-5", "generated_code": "from typing import List, Iterable, Union\n\nNumber = Union[int, float, complex]\n\n\ndef nth_nums(numbers: Iterable[Number], n: int) -> List[Number]:\n    \"\"\"\n    Compute the n-th power of each number in an iterable.\n\n    Args:\n        numbers: Iterable of numeric values (int, float, or complex).\n        n: The exponent to raise each number to.\n\n    Returns:\n        A list containing each input number raised to the n-th power.\n    \"\"\"\n    return [pow(x, n) for x in numbers]"}
{"benchmark": "mbpp", "task_id": "612", "prompt": "Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.", "reference_code": "def merge(lst):  \n    return [list(ele) for ele in list(zip(*lst))] ", "test_imports": [], "test_list": ["assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]", "assert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]", "assert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]"], "model_name": "openai/gpt-5", "generated_code": "def merge(list_of_lists):\n    \"\"\"\n    Takes a list of sublists (each with two elements) and returns a list of two lists:\n    - The first list contains the first element from each sublist.\n    - The second list contains the second element from each sublist.\n    \"\"\"\n    firsts = []\n    seconds = []\n    for pair in list_of_lists:\n        if len(pair) != 2:\n            raise ValueError(\"Each sublist must have exactly two elements\")\n        firsts.append(pair[0])\n        seconds.append(pair[1])\n    return [firsts, seconds]"}
{"benchmark": "mbpp", "task_id": "619", "prompt": "Write a function to move all the numbers to the end of the given string.", "reference_code": "def move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) ", "test_imports": [], "test_list": ["assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'", "assert move_num('Avengers124Assemble') == 'AvengersAssemble124'", "assert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'"], "model_name": "openai/gpt-5", "generated_code": "def move_num(s: str) -> str:\n    \"\"\"\n    Moves all numeric characters (0-9) to the end of the given string,\n    preserving the relative order of both non-digit and digit characters.\n\n    Example:\n    move_num(\"a1b2c3\") -> \"abc123\"\n    \"\"\"\n    if not isinstance(s, str):\n        s = str(s)\n    non_digits = []\n    digits = []\n    for ch in s:\n        (digits if ch.isdigit() else non_digits).append(ch)\n    return \"\".join(non_digits) + \"\".join(digits)"}
{"benchmark": "mbpp", "task_id": "602", "prompt": "Write a python function to find the first repeated character in a given string.", "reference_code": "def first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c", "test_imports": [], "test_list": ["assert first_repeated_char(\"abcabc\") == \"a\"", "assert first_repeated_char(\"abc\") == None", "assert first_repeated_char(\"123123\") == \"1\""], "model_name": "openai/gpt-5", "generated_code": "from typing import Optional\n\ndef first_repeated_char(s: str) -> Optional[str]:\n    \"\"\"\n    Return the first repeated character in the given string.\n    Scans left to right and returns the character whose second occurrence happens first.\n    If no character repeats, returns None.\n    \"\"\"\n    seen = set()\n    for ch in s:\n        if ch in seen:\n            return ch\n        seen.add(ch)\n    return None"}
{"benchmark": "mbpp", "task_id": "628", "prompt": "Write a function to replace all spaces in the given string with '%20'.", "reference_code": "def replace_spaces(string):\n  return string.replace(\" \", \"%20\")", "test_imports": [], "test_list": ["assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'", "assert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'", "assert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'"], "model_name": "openai/gpt-5", "generated_code": "def replace_spaces(s: str) -> str:\n    \"\"\"\n    Replace all spaces in the given string with '%20'.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        str: The string with spaces replaced by '%20'.\n\n    Raises:\n        TypeError: If the input is not a string.\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string.\")\n    return s.replace(\" \", \"%20\")"}
{"benchmark": "mbpp", "task_id": "618", "prompt": "Write a function to divide two lists element wise.", "reference_code": "def div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)", "test_imports": [], "test_list": ["assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]", "assert div_list([3,2],[1,4])==[3.0, 0.5]", "assert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]"], "model_name": "openai/gpt-5", "generated_code": "from typing import Iterable, List, Union\n\nNumber = Union[int, float]\n\n\ndef div_list(list1: Iterable[Number], list2: Iterable[Number]) -> List[float]:\n    \"\"\"\n    Divide two iterables element-wise and return a list of results.\n\n    The operation is performed up to the length of the shorter iterable.\n    Raises ZeroDivisionError if any divisor is zero.\n\n    Args:\n        list1: Iterable of numerics (numerators).\n        list2: Iterable of numerics (denominators).\n\n    Returns:\n        List of floats containing element-wise divisions.\n    \"\"\"\n    return [a / b for a, b in zip(list1, list2)]"}
{"benchmark": "mbpp", "task_id": "723", "prompt": "The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.", "reference_code": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result", "test_imports": [], "test_list": ["assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4", "assert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11", "assert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1", "assert count_same_pair([0, 1, 1, 2],[0, 1, 2, 2])==3"], "model_name": "openai/gpt-5", "generated_code": "def count_same_pair(list1, list2):\n    \"\"\"\n    Count the number of indices where two lists have the same value.\n\n    Parameters:\n    - list1: list\n    - list2: list\n\n    Returns:\n    - int: Number of indices i where list1[i] == list2[i]\n\n    Note: Assumes both lists have the same length.\n    \"\"\"\n    # If lengths differ, we only compare up to the shortest to avoid IndexError.\n    # However, the problem statement guarantees same length.\n    return sum(1 for a, b in zip(list1, list2) if a == b)"}
{"benchmark": "mbpp", "task_id": "616", "prompt": "Write a function which takes two tuples of the same length and performs the element wise modulo.", "reference_code": "def tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) ", "test_imports": [], "test_list": ["assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)", "assert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)", "assert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)"], "model_name": "openai/gpt-5", "generated_code": "def tuple_modulo(t1, t2):\n    \"\"\"\n    Perform element-wise modulo of two tuples of the same length.\n\n    Args:\n        t1 (tuple): First tuple of numeric values.\n        t2 (tuple): Second tuple of numeric values, same length as t1.\n\n    Returns:\n        tuple: A tuple where each element is t1[i] % t2[i].\n\n    Raises:\n        ValueError: If the tuples are not of the same length.\n        ZeroDivisionError: If any element in t2 is zero.\n        TypeError: If unsupported operand types are used for modulo.\n    \"\"\"\n    if len(t1) != len(t2):\n        raise ValueError(\"Tuples must be of the same length\")\n\n    return tuple(a % b for a, b in zip(t1, t2))"}
{"benchmark": "mbpp", "task_id": "629", "prompt": "Write a python function to find even numbers from a list of numbers.", "reference_code": "def Split(list): \n    return [num for num in list if num % 2 == 0]", "test_imports": [], "test_list": ["assert Split([1,2,3,4,5]) == [2,4]", "assert Split([4,5,6,7,8,0,1]) == [4,6,8,0]", "assert Split ([8,12,15,19]) == [8,12]"], "model_name": "openai/gpt-5", "generated_code": "from typing import Iterable, List\n\ndef Split(numbers: Iterable[int]) -> List[int]:\n    \"\"\"\n    Return a list containing only the even numbers from the input iterable.\n\n    Args:\n        numbers: An iterable of integers.\n\n    Returns:\n        A list of even integers in the same order as they appear in the input.\n    \"\"\"\n    return [n for n in numbers if isinstance(n, int) and n % 2 == 0]"}
{"benchmark": "mbpp", "task_id": "730", "prompt": "Write a function to remove consecutive duplicates of a given list.", "reference_code": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)] ", "test_imports": [], "test_list": ["assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]", "assert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]", "assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']", "assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd', 'a', 'a'])==['a', 'b', 'c', 'd', 'a']"], "model_name": "openai/gpt-5", "generated_code": "def consecutive_duplicates(lst):\n    \"\"\"\n    Remove consecutive duplicate elements from the given list.\n    \n    Args:\n        lst (list): The input list.\n        \n    Returns:\n        list: A new list with consecutive duplicates removed.\n    \"\"\"\n    if not lst:\n        return []\n    result = [lst[0]]\n    for item in lst[1:]:\n        if item != result[-1]:\n            result.append(item)\n    return result"}
{"benchmark": "mbpp", "task_id": "631", "prompt": "Write a function to replace whitespaces with an underscore and vice versa in a given string.", "reference_code": "def replace_spaces(text):\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)", "test_imports": [], "test_list": ["assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'", "assert replace_spaces('The_Avengers') == 'The Avengers'", "assert replace_spaces('Fast and Furious') == 'Fast_and_Furious'"], "model_name": "openai/gpt-5", "generated_code": "def replace_spaces(s):\n    \"\"\"\n    Replace whitespace characters with underscores and underscores with spaces in the given string.\n    This is done character-by-character to avoid double replacements.\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    return ''.join('_' if ch.isspace() else (' ' if ch == '_' else ch) for ch in s)"}
{"benchmark": "mbpp", "task_id": "726", "prompt": "Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.", "reference_code": "def multiply_elements(test_tup):\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ", "test_imports": [], "test_list": ["assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)", "assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)", "assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)", "assert multiply_elements((12,)) == ()"], "model_name": "openai/gpt-5", "generated_code": "def multiply_elements(t):\n    \"\"\"\n    Given a tuple of numbers (t_1, ..., t_{N+1}), return a tuple of length N\n    where the i-th element is t_i * t_{i+1}.\n    \"\"\"\n    n = len(t)\n    if n <= 1:\n        return ()\n    return tuple(t[i] * t[i + 1] for i in range(n - 1))"}
{"benchmark": "mbpp", "task_id": "732", "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.", "reference_code": "import re\ndef replace_specialchar(text):\n return (re.sub(\"[ ,.]\", \":\", text))\n", "test_imports": [], "test_list": ["assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')", "assert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')", "assert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')"], "model_name": "openai/gpt-5", "generated_code": "def replace_specialchar(text):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots in the input string with a colon.\n\n    Args:\n        text (str): The input string.\n\n    Returns:\n        str: The modified string with spaces, commas, and dots replaced by colons.\n    \"\"\"\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string.\")\n    translation_table = str.maketrans({' ': ':', ',': ':', '.': ':'})\n    return text.translate(translation_table)"}
{"benchmark": "mbpp", "task_id": "610", "prompt": "Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.", "reference_code": "def remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]", "test_imports": [], "test_list": ["assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]", "assert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]", "assert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]"], "model_name": "openai/gpt-5", "generated_code": "from typing import List, Any\n\ndef remove_kth_element(lst: List[Any], k: int) -> List[Any]:\n    \"\"\"\n    Return a new list with the element at index k removed.\n    - Uses Python indexing semantics (supports negative indices).\n    - If k is out of range, returns a shallow copy of the original list.\n    \"\"\"\n    n = len(lst)\n    if -n <= k < n:\n        return lst[:k] + lst[k+1:]\n    return list(lst)"}
{"benchmark": "mbpp", "task_id": "639", "prompt": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.", "reference_code": "def sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))", "test_imports": [], "test_list": ["assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16", "assert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10", "assert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6"], "model_name": "openai/gpt-5", "generated_code": "def sample_nam(names):\n    \"\"\"\n    Sum the lengths of names that do not start with a lowercase letter.\n    \n    Args:\n        names (list of str): List of name strings.\n        \n    Returns:\n        int: Sum of lengths of names not starting with a lowercase letter.\n    \"\"\"\n    if not names:\n        return 0\n    total = 0\n    for name in names:\n        # Ensure we handle only strings; non-strings contribute 0\n        if not isinstance(name, str):\n            continue\n        if not name:\n            # Empty string contributes 0 length\n            total += 0\n            continue\n        # Include name if the first character is not a lowercase letter\n        if not name[0].islower():\n            total += len(name)\n    return total"}
{"benchmark": "mbpp", "task_id": "728", "prompt": "Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].", "reference_code": "def sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list", "test_imports": [], "test_list": ["assert sum_list([10,20,30],[15,25,35])==[25,45,65]", "assert sum_list([1,2,3],[5,6,7])==[6,8,10]", "assert sum_list([15,20,30],[15,45,75])==[30,65,105]"], "model_name": "openai/gpt-5", "generated_code": "def sum_list(a, b):\n    \"\"\"\n    Return element-wise sum of two equal-length lists.\n    \n    Args:\n        a (list): First list of numbers.\n        b (list): Second list of numbers.\n    \n    Returns:\n        list: A list where each element is the sum of corresponding elements from a and b.\n    \n    Raises:\n        ValueError: If the input lists do not have the same length.\n    \"\"\"\n    if len(a) != len(b):\n        raise ValueError(\"Input lists must have the same length.\")\n    return [x + y for x, y in zip(a, b)]"}
{"benchmark": "mbpp", "task_id": "722", "prompt": "The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.", "reference_code": "def filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    ", "test_imports": [], "test_list": ["assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}", "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}", "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}"], "model_name": "openai/gpt-5", "generated_code": "def filter_data(data, min_height, min_weight):\n    \"\"\"\n    Filter students based on height and weight thresholds.\n\n    Parameters:\n    - data: dict[str, tuple[float, float]] mapping student name to (height, weight)\n    - min_height: float, minimal height threshold\n    - min_weight: float, minimal weight threshold\n\n    Returns:\n    - dict with entries where height > min_height and weight > min_weight\n    \"\"\"\n    filtered = {}\n    for name, stats in data.items():\n        try:\n            height, weight = stats\n        except (TypeError, ValueError):\n            # Skip invalid entries that don't unpack into (height, weight)\n            continue\n        if height > min_height and weight > min_weight:\n            filtered[name] = (height, weight)\n    return filtered"}
{"benchmark": "mbpp", "task_id": "625", "prompt": "Write a python function to interchange the first and last element in a given list.", "reference_code": "def swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp   \n    return newList ", "test_imports": [], "test_list": ["assert swap_List([1,2,3]) == [3,2,1]", "assert swap_List([1,2,3,4,4]) == [4,2,3,4,1]", "assert swap_List([4,5,6]) == [6,5,4]"], "model_name": "openai/gpt-5", "generated_code": "def swap_List(lst):\n    \"\"\"\n    Interchange the first and last element of the given list.\n\n    Parameters:\n    lst (list): The list whose first and last elements are to be swapped.\n\n    Returns:\n    list: The list after swapping the first and last elements.\n    \"\"\"\n    if not lst or len(lst) < 2:\n        return lst\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"benchmark": "mbpp", "task_id": "641", "prompt": "Write a function to find the nth nonagonal number.", "reference_code": "def is_nonagonal(n): \n\treturn int(n * (7 * n - 5) / 2) ", "test_imports": [], "test_list": ["assert is_nonagonal(10) == 325", "assert is_nonagonal(15) == 750", "assert is_nonagonal(18) == 1089"], "model_name": "openai/gpt-5", "generated_code": "def is_nonagonal(n):\n    \"\"\"\n    Return the nth nonagonal number.\n\n    The nth nonagonal number is given by:\n        N_n = n * (7n - 5) / 2\n\n    For n <= 0, returns 0.\n    \"\"\"\n    if not isinstance(n, int):\n        try:\n            n = int(n)\n        except Exception as e:\n            raise TypeError(\"Input must be an integer or convertible to int.\") from e\n    if n <= 0:\n        return 0\n    return n * (7 * n - 5) // 2"}
{"benchmark": "mbpp", "task_id": "615", "prompt": "Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.", "reference_code": "def average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result", "test_imports": [], "test_list": ["assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]", "assert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]", "assert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]"], "model_name": "openai/gpt-5", "generated_code": "from typing import Iterable, List, Tuple, Union, Any\n\nNumber = Union[int, float]\n\n\ndef average_tuple(data: Tuple[Tuple[Number, ...], ...]) -> List[float]:\n    \"\"\"\n    Takes a tuple of tuples of numbers and returns a list containing\n    the average of each inner tuple. For an empty inner tuple, returns 0.0.\n    \"\"\"\n    averages: List[float] = []\n    for inner in data:\n        if not inner:\n            averages.append(0.0)\n        else:\n            total = 0.0\n            count = 0\n            for value in inner:\n                total += float(value)\n                count += 1\n            averages.append(total / count if count else 0.0)\n    return averages"}
{"benchmark": "mbpp", "task_id": "720", "prompt": "Write a function to add a dictionary to the tuple. The output should be a tuple.", "reference_code": "def add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup) ", "test_imports": [], "test_list": ["assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})", "assert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})", "assert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})"], "model_name": "openai/gpt-5", "generated_code": "def add_dict_to_tuple(tup, dictionary):\n    \"\"\"\n    Append the given dictionary as a single element to the provided tuple.\n\n    Parameters:\n    - tup: A tuple to which the dictionary will be added.\n    - dictionary: The dictionary to append to the tuple.\n\n    Returns:\n    - A new tuple with the dictionary appended as the last element.\n    \"\"\"\n    return tuple(tup) + (dictionary,)"}
{"benchmark": "mbpp", "task_id": "605", "prompt": "Write a function to check if the given integer is a prime number.", "reference_code": "def prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False", "test_imports": [], "test_list": ["assert prime_num(13)==True", "assert prime_num(7)==True", "assert prime_num(-1010)==False"], "model_name": "openai/gpt-5", "generated_code": "def prime_num(n: int) -> bool:\n    \"\"\"\n    Determine whether the given integer n is a prime number.\n\n    Args:\n        n (int): The integer to check.\n\n    Returns:\n        bool: True if n is prime, False otherwise.\n    \"\"\"\n    if not isinstance(n, int):\n        return False\n\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True  # 2 and 3 are prime\n\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n\n    # Check for factors of the form 6k ± 1 up to sqrt(n)\n    i = 5\n    # i * i <= n avoids floating point sqrt\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n\n    return True"}
{"benchmark": "mbpp", "task_id": "626", "prompt": "Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.", "reference_code": "def triangle_area(r) :  \n    if r < 0 : \n        return None\n    return r * r ", "test_imports": [], "test_list": ["assert triangle_area(-1) == None", "assert triangle_area(0) == 0", "assert triangle_area(2) == 4"], "model_name": "openai/gpt-5", "generated_code": "def triangle_area(radius):\n    \"\"\"\n    Compute the area of the largest triangle that can be inscribed in a semicircle\n    with the given radius.\n\n    The maximum area occurs when the triangle's base is the diameter and the apex\n    is at the top of the semicircle, yielding area = r^2.\n\n    Parameters:\n        radius (float or int): The radius of the semicircle (must be non-negative).\n\n    Returns:\n        float: The maximum area of the inscribed triangle.\n\n    Raises:\n        ValueError: If radius is negative.\n    \"\"\"\n    if radius < 0:\n        raise ValueError(\"Radius must be non-negative\")\n    r = float(radius)\n    return r * r"}
{"benchmark": "mbpp", "task_id": "724", "prompt": "Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.", "reference_code": "def power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])", "test_imports": [], "test_list": ["assert power_base_sum(2,100)==115", "assert power_base_sum(8,10)==37", "assert power_base_sum(8,15)==62", "assert power_base_sum(3,3)==9"], "model_name": "openai/gpt-5", "generated_code": "def power_base_sum(base, power):\n    \"\"\"\n    Calculate the sum of all digits of (base ** power).\n\n    Args:\n        base: Integer-like value representing the base.\n        power: Integer-like value representing the exponent (must be non-negative).\n\n    Returns:\n        int: Sum of the digits of abs(base) ** power.\n\n    Raises:\n        ValueError: If power is negative.\n    \"\"\"\n    # Convert inputs to integers\n    base_int = int(base)\n    power_int = int(power)\n\n    if power_int < 0:\n        raise ValueError(\"power must be non-negative\")\n\n    value = abs(base_int) ** power_int\n    return sum(int(d) for d in str(value))"}
{"benchmark": "mbpp", "task_id": "608", "prompt": "Write a python function to find nth bell number.", "reference_code": "def bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] ", "test_imports": [], "test_list": ["assert bell_Number(2) == 2", "assert bell_Number(3) == 5", "assert bell_Number(4) == 15"], "model_name": "openai/gpt-5", "generated_code": "def bell_Number(n):\n    \"\"\"\n    Compute the nth Bell number using the Bell triangle.\n    Bell numbers count the number of partitions of a set of size n.\n    By convention: B0 = 1, B1 = 1, B2 = 2, ...\n\n    Parameters:\n        n (int): non-negative integer\n\n    Returns:\n        int: the nth Bell number\n\n    Raises:\n        ValueError: if n is negative or not an integer convertible\n    \"\"\"\n    if not isinstance(n, int):\n        raise ValueError(\"n must be an integer\")\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n\n    # Bell triangle of size (n+1) x (n+1)\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n\n    for i in range(1, n + 1):\n        # First element of current row is the last element of previous row\n        bell[i][0] = bell[i - 1][i - 1]\n        # Fill the rest of the row\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n\n    return bell[n][0]"}
{"benchmark": "mbpp", "task_id": "604", "prompt": "Write a function to reverse words seperated by spaces in a given string.", "reference_code": "def reverse_words(s):\n        return ' '.join(reversed(s.split()))", "test_imports": [], "test_list": ["assert reverse_words(\"python program\")==(\"program python\")", "assert reverse_words(\"java language\")==(\"language java\")", "assert reverse_words(\"indian man\")==(\"man indian\")"], "model_name": "openai/gpt-5", "generated_code": "def reverse_words(s):\n    \"\"\"\n    Reverse characters of each word separated by spaces in the given string,\n    preserving the original spacing.\n    Example: \"hello world\" -> \"olleh dlrow\"\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n\n    n = len(s)\n    i = 0\n    result_parts = []\n\n    while i < n:\n        if s[i] == ' ':\n            # Preserve spaces as is\n            result_parts.append(' ')\n            i += 1\n        else:\n            # Find the next space to get the word boundary\n            j = i\n            while j < n and s[j] != ' ':\n                j += 1\n            # Reverse the word and add to result\n            result_parts.append(s[i:j][::-1])\n            i = j\n\n    return ''.join(result_parts)"}
{"benchmark": "mbpp", "task_id": "635", "prompt": "Write a function to sort the given list.", "reference_code": "import heapq as hq\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]", "test_imports": [], "test_list": ["assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]", "assert heap_sort( [7, 1, 9, 5])==[1,5,7,9]"], "model_name": "openai/gpt-5", "generated_code": "from typing import List, Any\n\ndef heap_sort(lst: List[Any]) -> List[Any]:\n    \"\"\"\n    Sorts the given list in ascending order using heap sort.\n    The sort is performed in-place and the same list is returned.\n    \"\"\"\n    n = len(lst)\n\n    def sift_down(start: int, end: int) -> None:\n        root = start\n        while True:\n            child = 2 * root + 1  # left child\n            if child > end:\n                break\n            swap = root\n            if lst[swap] < lst[child]:\n                swap = child\n            if child + 1 <= end and lst[swap] < lst[child + 1]:\n                swap = child + 1\n            if swap == root:\n                return\n            lst[root], lst[swap] = lst[swap], lst[root]\n            root = swap\n\n    # Build max-heap\n    for start in range(n // 2 - 1, -1, -1):\n        sift_down(start, n - 1)\n\n    # Heap sort\n    for end in range(n - 1, 0, -1):\n        lst[0], lst[end] = lst[end], lst[0]\n        sift_down(0, end - 1)\n\n    return lst"}
{"benchmark": "mbpp", "task_id": "731", "prompt": "Write a function to find the lateral surface area of a cone given radius r and the height h.", "reference_code": "import math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA", "test_imports": [], "test_list": ["assert lateralsurface_cone(5,12)==204.20352248333654", "assert lateralsurface_cone(10,15)==566.3586699569488", "assert lateralsurface_cone(19,17)==1521.8090132193388"], "model_name": "openai/gpt-5", "generated_code": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Calculate the lateral (curved) surface area of a right circular cone.\n    \n    Parameters:\n    - r: radius of the cone's base\n    - h: height of the cone\n    \n    Returns:\n    - Lateral surface area: π * r * sqrt(r^2 + h^2)\n    \"\"\"\n    l = math.sqrt(r * r + h * h)  # slant height\n    return math.pi * r * l"}
{"benchmark": "mbpp", "task_id": "637", "prompt": "Write a function to check whether the given amount has no profit and no loss", "reference_code": "def noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False", "test_imports": [], "test_list": ["assert noprofit_noloss(1500,1200)==False", "assert noprofit_noloss(100,100)==True", "assert noprofit_noloss(2000,5000)==False"], "model_name": "openai/gpt-5", "generated_code": "from math import isclose\n\ndef noprofit_noloss(cost_price, selling_price):\n    \"\"\"\n    Check whether there is neither profit nor loss.\n\n    Arguments:\n    - cost_price: numeric (int/float or numeric string)\n    - selling_price: numeric (int/float or numeric string)\n\n    Returns:\n    - True if selling_price equals cost_price (within floating-point tolerance), else False.\n    \"\"\"\n    try:\n        cp = float(cost_price)\n        sp = float(selling_price)\n    except Exception as e:\n        raise TypeError(\"cost_price and selling_price must be numeric or numeric strings\") from e\n\n    return isclose(cp, sp)"}
{"benchmark": "mbpp", "task_id": "733", "prompt": "Write a function to find the index of the first occurrence of a given number in a sorted array.", "reference_code": "def find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result", "test_imports": [], "test_list": ["assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1", "assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2", "assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4"], "model_name": "openai/gpt-5", "generated_code": "def find_first_occurrence(arr, target):\n    \"\"\"\n    Find the index of the first occurrence of target in a sorted array.\n    Returns -1 if target is not present.\n\n    Parameters:\n    - arr: list of comparable elements sorted in non-decreasing order\n    - target: element to search for\n\n    Returns:\n    - int: index of the first occurrence, or -1 if not found\n    \"\"\"\n    if not arr:\n        return -1\n\n    left, right = 0, len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        val = arr[mid]\n\n        if val == target:\n            result = mid\n            right = mid - 1  # continue searching to the left\n        elif val < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result"}
{"benchmark": "mbpp", "task_id": "607", "prompt": "Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.", "reference_code": "import re\n\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)", "test_imports": [], "test_list": ["assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)", "assert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)", "assert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)"], "model_name": "openai/gpt-5", "generated_code": "import re\nfrom typing import Optional, Tuple, Union\n\ndef find_literals(text: str, pattern: Union[str, re.Pattern]) -> Tuple[Optional[str], int, int]:\n    \"\"\"\n    Search the given text for the first occurrence of the regex pattern.\n\n    Returns:\n        A tuple of (matched_substring, start_index, end_index).\n        If no match is found, returns (None, -1, -1).\n    \"\"\"\n    regex = re.compile(pattern) if isinstance(pattern, str) else pattern\n    match = regex.search(text)\n    if not match:\n        return (None, -1, -1)\n    return (match.group(0), match.start(), match.end())"}
{"benchmark": "mbpp", "task_id": "611", "prompt": "Write a function which given a matrix represented as a list of lists returns the max of the n'th column.", "reference_code": "def max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) ", "test_imports": [], "test_list": ["assert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19", "assert max_of_nth([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) == 10", "assert max_of_nth([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1) == 11"], "model_name": "openai/gpt-5", "generated_code": "from typing import List, Any\n\ndef max_of_nth(matrix: List[List[Any]], n: int) -> Any:\n    \"\"\"\n    Return the maximum value from the n-th column (0-based index) of the matrix.\n    Assumes the matrix is non-empty and each row has at least n+1 elements.\n    \"\"\"\n    return max(row[n] for row in matrix)"}
{"benchmark": "mbpp", "task_id": "725", "prompt": "Write a function to extract values between quotation marks \" \" of the given string.", "reference_code": "import re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))", "test_imports": [], "test_list": ["assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']", "assert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']", "assert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']", "assert extract_quotation(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") == []"], "model_name": "openai/gpt-5", "generated_code": "import re\nfrom typing import List\n\ndef extract_quotation(s: str) -> List[str]:\n    \"\"\"\n    Extract substrings enclosed in double quotation marks from the input string.\n\n    Args:\n        s (str): Input string.\n\n    Returns:\n        List[str]: A list of substrings found between pairs of double quotes,\n                   in the order they appear. If no matches, returns an empty list.\n    \"\"\"\n    if s is None:\n        return []\n    if not isinstance(s, str):\n        s = str(s)\n    return re.findall(r'\"([^\"]*)\"', s)"}
{"benchmark": "mbpp", "task_id": "736", "prompt": "Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php", "reference_code": "import bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i", "test_imports": [], "test_list": ["assert left_insertion([1,2,4,5],6)==4", "assert left_insertion([1,2,4,5],3)==2", "assert left_insertion([1,2,4,5],7)==4"], "model_name": "openai/gpt-5", "generated_code": "def left_insertion(a, x):\n    \"\"\"\n    Locate the left insertion point for x in a sorted list a.\n    Returns the index where x should be inserted to maintain sorted order.\n    If x is already present, the insertion point is before (to the left of) any existing entries.\n    \"\"\"\n    lo, hi = 0, len(a)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if a[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid\n    return lo"}
{"benchmark": "mbpp", "task_id": "630", "prompt": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.", "reference_code": "def adjac(ele, sub = []): \n  if not ele: \n     yield sub \n  else: \n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \n                for idx in adjac(ele[1:], sub + [j])] \ndef get_coordinates(test_tup):\n  return list(adjac(test_tup))", "test_imports": [], "test_list": ["assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]", "assert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]", "assert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]"], "model_name": "openai/gpt-5", "generated_code": "from itertools import product\nfrom typing import Iterable, List, Tuple, Any\n\ndef get_coordinates(coord: Iterable) -> List[Tuple[Any, ...]]:\n    \"\"\"\n    Return all adjacent coordinates around the given coordinate tuple.\n    Adjacent means all points at Chebyshev distance 1 (including diagonals)\n    in the same dimensionality as the input, excluding the point itself.\n\n    For example:\n    - Input (x, y) -> returns 8 neighbors:\n      (x-1,y-1), (x-1,y), (x-1,y+1), (x,y-1), (x,y+1), (x+1,y-1), (x+1,y), (x+1,y+1)\n    - Input (x,) -> returns two neighbors: (x-1,), (x+1,)\n    - Input () -> returns []\n    \"\"\"\n    # Ensure tuple for consistent operations\n    coord = tuple(coord)\n    n = len(coord)\n    if n == 0:\n        return []\n\n    deltas = list(product((-1, 0, 1), repeat=n))\n    # Exclude the zero-vector (no movement)\n    neighbors = []\n    for delta in deltas:\n        if all(d == 0 for d in delta):\n            continue\n        neighbors.append(tuple(c + d for c, d in zip(coord, delta)))\n\n    # Deterministic ordering\n    neighbors.sort()\n    return neighbors"}
{"benchmark": "mbpp", "task_id": "737", "prompt": "Write a function to check whether the given string is starting with a vowel or not using regex.", "reference_code": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n\treturn re.search(regex, string)", "test_imports": [], "test_list": ["assert check_str(\"annie\")", "assert not check_str(\"dawood\")", "assert check_str(\"Else\")"], "model_name": "openai/gpt-5", "generated_code": "import re\n\ndef check_str(s):\n    \"\"\"\n    Check if the given string starts with a vowel using regex.\n    Returns True if it starts with a vowel (a, e, i, o, u; case-insensitive), else False.\n    \"\"\"\n    if not isinstance(s, str) or s == \"\":\n        return False\n    return re.match(r'^[aeiou]', s, re.IGNORECASE) is not None"}
{"benchmark": "mbpp", "task_id": "741", "prompt": "Write a python function to check whether all the characters are same or not.", "reference_code": "def all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True", "test_imports": [], "test_list": ["assert all_Characters_Same(\"python\") == False", "assert all_Characters_Same(\"aaa\") == True", "assert all_Characters_Same(\"data\") == False"], "model_name": "openai/gpt-5", "generated_code": "def all_Characters_Same(s):\n    \"\"\"\n    Check whether all characters in the string s are the same.\n\n    Args:\n        s (str): Input string.\n\n    Returns:\n        bool: True if all characters are the same or s is empty; False otherwise.\n    \"\"\"\n    if not s:\n        return True\n    first = s[0]\n    for ch in s:\n        if ch != first:\n            return False\n    return True"}
{"benchmark": "mbpp", "task_id": "643", "prompt": "Write a function that checks if a strings contains 'z', except at the start and end of the word.", "reference_code": "import re\ndef text_match_wordz_middle(text):\n        return bool(re.search(r'\\Bz\\B',  text))", "test_imports": [], "test_list": ["assert text_match_wordz_middle(\"pythonzabc.\")==True", "assert text_match_wordz_middle(\"zxyabc.\")==False", "assert text_match_wordz_middle(\"  lang  .\")==False"], "model_name": "openai/gpt-5", "generated_code": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Return True if the text contains the letter 'z' that is not at the start or end of a word.\n    \"\"\"\n    if not isinstance(text, str) or len(text) < 3:\n        return False\n    return re.search(r'\\Bz\\B', text) is not None"}
{"benchmark": "mbpp", "task_id": "746", "prompt": "Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.", "reference_code": "import math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    return (math.pi*r**2) * (a/360)", "test_imports": [], "test_list": ["assert sector_area(4,45)==6.283185307179586", "assert sector_area(9,45)==31.808625617596654", "assert sector_area(9,361)==None"], "model_name": "openai/gpt-5", "generated_code": "import math\n\ndef sector_area(radius, angle):\n    \"\"\"\n    Calculate the area of a sector given the radius and angle in degrees.\n    Returns None if the angle is greater than 360 degrees.\n    \"\"\"\n    if angle > 360:\n        return None\n    return math.pi * (radius ** 2) * (angle / 360.0)"}
{"benchmark": "mbpp", "task_id": "744", "prompt": "Write a function to check if the given tuple has any none value or not.", "reference_code": "def check_none(test_tup):\n  res = any(map(lambda ele: ele is None, test_tup))\n  return res ", "test_imports": [], "test_list": ["assert check_none((10, 4, 5, 6, None)) == True", "assert check_none((7, 8, 9, 11, 14)) == False", "assert check_none((1, 2, 3, 4, None)) == True"], "model_name": "openai/gpt-5", "generated_code": "def check_none(t):\n    \"\"\"\n    Check if the given tuple contains any None value.\n\n    Args:\n        t (tuple): The tuple to inspect.\n\n    Returns:\n        bool: True if any element in the tuple is None, otherwise False.\n    \"\"\"\n    return any(x is None for x in t)"}
{"benchmark": "mbpp", "task_id": "617", "prompt": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.", "reference_code": "def min_Jumps(steps, d): \n    (a, b) = steps\n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2", "test_imports": [], "test_list": ["assert min_Jumps((3,4),11)==3.5", "assert min_Jumps((3,4),0)==0", "assert min_Jumps((11,14),11)==1"], "model_name": "openai/gpt-5", "generated_code": "import math\nfrom typing import Union\n\nNumber = Union[int, float]\n\n\ndef min_Jumps(d: Number, k: Number) -> int:\n    \"\"\"\n    Return the minimum number of jumps of fixed length k required to reach (d, 0) from (0, 0) in 2D.\n\n    Each jump must be exactly of length k in any direction.\n\n    Rules:\n    - If d == 0: 0 jumps.\n    - If d == k: 1 jump.\n    - If 0 < d < k: 2 jumps (cannot reach in one since jump is exactly length k).\n    - If d > k: ceil(d / k) jumps.\n\n    If k == 0:\n    - Return 0 if d == 0, otherwise return -1 (impossible to move).\n\n    Parameters:\n        d: Target distance along x-axis (non-negative). If negative provided, absolute value is used.\n        k: Jump length (non-negative). If negative provided, absolute value is used.\n\n    Returns:\n        Minimum number of jumps as an integer, or -1 if impossible (only when k == 0 and d > 0).\n    \"\"\"\n    # Normalize to non-negative distances\n    if isinstance(d, bool):\n        d = int(d)\n    if isinstance(k, bool):\n        k = int(k)\n\n    try:\n        d_val = abs(d)\n        k_val = abs(k)\n    except TypeError:\n        raise TypeError(\"d and k must be numeric values\")\n\n    # Handle zero-length jump edge case\n    if k_val == 0:\n        return 0 if d_val == 0 else -1\n\n    # Trivial cases\n    if d_val == 0:\n        return 0\n    if d_val == k_val:\n        return 1\n    if d_val < k_val:\n        return 2\n\n    # General case\n    if isinstance(d_val, int) and isinstance(k_val, int):\n        return (d_val + k_val - 1) // k_val\n    else:\n        return int(math.ceil(d_val / k_val))"}
{"benchmark": "mbpp", "task_id": "742", "prompt": "Write a function to caluclate the area of a tetrahedron.", "reference_code": "import math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area", "test_imports": [], "test_list": ["assert area_tetrahedron(3)==15.588457268119894", "assert area_tetrahedron(20)==692.8203230275509", "assert area_tetrahedron(10)==173.20508075688772"], "model_name": "openai/gpt-5", "generated_code": "import math\n\ndef area_tetrahedron(a):\n    \"\"\"\n    Compute the surface area of a regular tetrahedron with edge length a.\n    \n    Parameters:\n        a (int | float): Edge length of the regular tetrahedron.\n        \n    Returns:\n        float: Surface area, equal to sqrt(3) * a^2.\n    \"\"\"\n    try:\n        side = float(a)\n    except (TypeError, ValueError):\n        raise TypeError(\"Edge length must be a number\")\n    side = abs(side)\n    return math.sqrt(3.0) * (side ** 2)"}
{"benchmark": "mbpp", "task_id": "614", "prompt": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.", "reference_code": "def cummulative_sum(test_list):\n  res = sum(map(sum, test_list))\n  return (res)", "test_imports": [], "test_list": ["assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30", "assert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37", "assert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44"], "model_name": "openai/gpt-5", "generated_code": "from typing import Iterable, Tuple, Union\n\nNumber = Union[int, float]\n\n\ndef cummulative_sum(tuple_list: Iterable[Tuple[Number, ...]]) -> Number:\n    \"\"\"\n    Return the total sum of all numeric values contained in a list (or iterable) of tuples.\n\n    Example:\n        cummulative_sum([(1, 2), (3, 4), (5, 6)]) -> 21\n    \"\"\"\n    return sum(sum(t) for t in tuple_list)"}
{"benchmark": "mbpp", "task_id": "622", "prompt": "Write a function to find the median of two sorted lists of same size.", "reference_code": "def get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2", "test_imports": [], "test_list": ["assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0", "assert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5", "assert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0"], "model_name": "openai/gpt-5", "generated_code": "from typing import List, Optional, Union\n\nNumber = Union[int, float]\n\n\ndef get_median(a: List[Number], b: List[Number]) -> Optional[float]:\n    \"\"\"\n    Find the median of two sorted lists (assumed non-decreasing) of the same size.\n    Returns:\n        - The median as a float (average of the two middle values).\n        - None if both lists are empty.\n    \"\"\"\n\n    def kth_smallest(arr1: List[Number], arr2: List[Number], k: int) -> Number:\n        \"\"\"\n        Returns the k-th smallest element (1-based) in the merged sorted array of arr1 and arr2.\n        Assumes both arrays are sorted in non-decreasing order.\n        \"\"\"\n        i, j = 0, 0\n        n1, n2 = len(arr1), len(arr2)\n\n        while True:\n            if i == n1:\n                return arr2[j + k - 1]\n            if j == n2:\n                return arr1[i + k - 1]\n            if k == 1:\n                return arr1[i] if arr1[i] <= arr2[j] else arr2[j]\n\n            # Split k into two parts\n            pa = min(n1 - i, k // 2)\n            pb = k - pa\n\n            # Compare the pa-th element in arr1 with the pb-th in arr2 (relative to i and j)\n            if arr1[i + pa - 1] <= arr2[j + pb - 1]:\n                i += pa\n                k -= pa\n            else:\n                j += pb\n                k -= pb\n\n    n1, n2 = len(a), len(b)\n    total = n1 + n2\n    if total == 0:\n        return None\n\n    # For two lists of the same size, total is even; compute average of middle two.\n    left_mid = kth_smallest(a, b, total // 2)\n    right_mid = kth_smallest(a, b, total // 2 + 1)\n    return (left_mid + right_mid) / 2.0"}
{"benchmark": "mbpp", "task_id": "721", "prompt": "Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.", "reference_code": "def maxAverageOfPath(cost):\n  N = len(cost)\n  dp = [[0 for i in range(N + 1)] for j in range(N + 1)]\n  dp[0][0] = cost[0][0]\n  for i in range(1, N):\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  for j in range(1, N):\n    dp[0][j] = dp[0][j - 1] + cost[0][j]\n  for i in range(1, N):\n    for j in range(1, N):\n      dp[i][j] = max(dp[i - 1][j],\n                     dp[i][j - 1]) + cost[i][j]\n  return dp[N - 1][N - 1] / (2 * N - 1)", "test_imports": [], "test_list": ["assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2", "assert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2", "assert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2", "assert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8"], "model_name": "openai/gpt-5", "generated_code": "from typing import List, Union\n\ndef maxAverageOfPath(matrix: List[List[Union[int, float]]]) -> float:\n    \"\"\"\n    Compute the maximum average cost along any path from top-left to bottom-right\n    moving only right or down. Average = total cost / number of cells visited.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return 0.0\n\n    rows, cols = len(matrix), len(matrix[0])\n    dp = [[float('-inf')] * cols for _ in range(rows)]\n    dp[0][0] = matrix[0][0]\n\n    for i in range(rows):\n        for j in range(cols):\n            if i == 0 and j == 0:\n                continue\n            best_prev = float('-inf')\n            if i > 0:\n                best_prev = max(best_prev, dp[i - 1][j])\n            if j > 0:\n                best_prev = max(best_prev, dp[i][j - 1])\n            dp[i][j] = best_prev + matrix[i][j]\n\n    total_cost = dp[rows - 1][cols - 1]\n    path_length = rows + cols - 1\n    return total_cost / path_length"}
{"benchmark": "mbpp", "task_id": "644", "prompt": "Write a python function to reverse an array upto a given position.", "reference_code": "def reverse_Array_Upto_K(input, k): \n  return (input[k-1::-1] + input[k:]) ", "test_imports": [], "test_list": ["assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]", "assert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]", "assert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]"], "model_name": "openai/gpt-5", "generated_code": "def reverse_Array_Upto_K(arr, k):\n    \"\"\"\n    Reverse the array up to the given position k (inclusive, 0-based index).\n\n    Parameters:\n    - arr: list of elements\n    - k: integer index (0-based). If k >= len(arr), the entire array is reversed.\n         If k < 0, the array is returned unchanged (as a shallow copy).\n\n    Returns:\n    - A new list with elements from index 0 to k reversed, followed by the rest.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return []\n    if k < 0:\n        return arr[:]\n    if k >= n:\n        k = n - 1\n    return arr[:k + 1][::-1] + arr[k + 1:]"}
{"benchmark": "mbpp", "task_id": "755", "prompt": "Write a function to find the second smallest number in a list.", "reference_code": "def second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]", "test_imports": [], "test_list": ["assert second_smallest([1, 2, -8, -2, 0, -2])==-2", "assert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5", "assert second_smallest([2,2])==None", "assert second_smallest([2,2,2])==None"], "model_name": "openai/gpt-5", "generated_code": "def second_smallest(numbers):\n    \"\"\"\n    Return the second smallest distinct number in the iterable 'numbers'.\n    If there are fewer than two distinct numbers, return None.\n    \"\"\"\n    first = float('inf')\n    second = float('inf')\n    seen_first = False  # Track if we've set a real first (handles case when first stays inf)\n\n    for x in numbers:\n        # Skip values that are not comparable to numbers (defensive)\n        try:\n            # Ensure it raises if x is not comparable\n            _ = x < first\n        except Exception:\n            continue\n\n        if x < first:\n            second = first\n            first = x\n            seen_first = True\n        elif x != first and x < second:\n            second = x\n\n    if not seen_first or second == float('inf'):\n        return None\n    return second"}
{"benchmark": "mbpp", "task_id": "606", "prompt": "Write a function to convert degrees to radians.", "reference_code": "import math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian", "test_imports": [], "test_list": ["assert radian_degree(90)==1.5707963267948966", "assert radian_degree(60)==1.0471975511965976", "assert radian_degree(120)==2.0943951023931953"], "model_name": "openai/gpt-5", "generated_code": "import math\nimport numbers\nfrom typing import Any\n\ndef radian_degree(degrees: Any):\n    \"\"\"\n    Convert degrees to radians.\n\n    - If 'degrees' is a number (int, float, etc.), returns a float radians value.\n    - If 'degrees' is a list/tuple/set, returns the same type with each element converted.\n    - If 'degrees' is a dict, returns a dict with values converted.\n    - For other iterables (excluding str/bytes), returns a list of converted values.\n    \"\"\"\n    # Scalar number\n    if isinstance(degrees, numbers.Number):\n        return degrees * math.pi / 180.0\n\n    # Strings/bytes are not supported as numeric input\n    if isinstance(degrees, (str, bytes)):\n        raise TypeError(\"radian_degree expects a number or an iterable of numbers, not str/bytes\")\n\n    # Common container types: preserve type\n    if isinstance(degrees, list):\n        return [radian_degree(x) for x in degrees]\n    if isinstance(degrees, tuple):\n        return tuple(radian_degree(x) for x in degrees)\n    if isinstance(degrees, set):\n        return {radian_degree(x) for x in degrees}\n    if isinstance(degrees, dict):\n        return {k: radian_degree(v) for k, v in degrees.items()}\n\n    # Generic iterable (fall back to list)\n    try:\n        iterator = iter(degrees)\n    except TypeError as e:\n        # Not iterable and not a number\n        raise TypeError(\"radian_degree expects a number or an iterable of numbers\") from e\n\n    return [radian_degree(x) for x in iterator]"}
{"benchmark": "mbpp", "task_id": "754", "prompt": "We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.", "reference_code": "def extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result", "test_imports": [], "test_list": ["assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]", "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]", "assert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]", "assert extract_index_list([1, 2, 3, 4, 6, 6, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[]"], "model_name": "openai/gpt-5", "generated_code": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    Return a list of elements that are the same at the same index across l1, l2, and l3.\n    Only compares up to the length of the shortest list.\n    \"\"\"\n    return [a for a, b, c in zip(l1, l2, l3) if a == b == c]"}
{"benchmark": "mbpp", "task_id": "734", "prompt": "Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/", "reference_code": "def sum_Of_Subarray_Prod(arr):\n    ans = 0\n    res = 0\n    i = len(arr) - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)", "test_imports": [], "test_list": ["assert sum_Of_Subarray_Prod([1,2,3]) == 20", "assert sum_Of_Subarray_Prod([1,2]) == 5", "assert sum_Of_Subarray_Prod([1,2,3,4]) == 84"], "model_name": "openai/gpt-5", "generated_code": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Compute the sum of products of all possible non-empty contiguous subarrays.\n\n    For array arr = [a1, a2, ..., an],\n    result = sum over all 1 <= i <= j <= n of (a_i * a_{i+1} * ... * a_j)\n\n    Uses dynamic programming:\n    Let prev be the sum of products of all subarrays ending at the previous index.\n    For current element x:\n        curr = x * (prev + 1)\n    The total answer is the sum of curr over all indices.\n\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    prev = 0\n    total = 0\n    for x in arr:\n        prev = x * (prev + 1)\n        total += prev\n    return total"}
{"benchmark": "mbpp", "task_id": "751", "prompt": "Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/", "reference_code": "def check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)", "test_imports": [], "test_list": ["assert check_min_heap([1, 2, 3, 4, 5, 6]) == True", "assert check_min_heap([2, 3, 4, 5, 10, 15]) == True", "assert check_min_heap([2, 10, 4, 5, 3, 15]) == False"], "model_name": "openai/gpt-5", "generated_code": "def check_min_heap(arr):\n    \"\"\"\n    Check if the given array represents a min-heap.\n    \n    A min-heap has the property that each parent node is less than or equal to its children.\n    In array representation, for each index i:\n      - left child index = 2*i + 1\n      - right child index = 2*i + 2\n\n    Returns:\n        True if arr represents a min-heap, False otherwise.\n    \"\"\"\n    if arr is None:\n        return False\n\n    n = len(arr)\n    # Only need to check internal nodes (parents). Leaves start from index n//2\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = left + 1\n\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n\n    return True"}
{"benchmark": "mbpp", "task_id": "740", "prompt": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/", "reference_code": "def tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) ", "test_imports": [], "test_list": ["assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}", "assert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}", "assert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}"], "model_name": "openai/gpt-5", "generated_code": "from typing import Any, Dict, Tuple, Iterable\n\ndef tuple_to_dict(tp: Tuple[Any, ...]) -> Dict[Any, Any]:\n    \"\"\"\n    Convert a tuple into a dictionary using adjacent elements as key-value pairs.\n    Example: (1, 2, 3, 4) -> {1: 2, 3: 4}\n    If the tuple has an odd length, the last element is ignored.\n    \"\"\"\n    if tp is None:\n        return {}\n    try:\n        # Works for sequences supporting slicing\n        return dict(zip(tp[::2], tp[1::2]))\n    except TypeError:\n        # Fallback for generic iterables (though the input is expected to be a tuple)\n        it = iter(tp)\n        res: Dict[Any, Any] = {}\n        for k in it:\n            try:\n                v = next(it)\n            except StopIteration:\n                break\n            res[k] = v\n        return res"}
{"benchmark": "mbpp", "task_id": "756", "prompt": "Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php", "reference_code": "import re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False", "test_imports": [], "test_list": ["assert text_match_zero_one(\"ac\")==False", "assert text_match_zero_one(\"dc\")==False", "assert text_match_zero_one(\"abbbba\")==True", "assert text_match_zero_one(\"dsabbbba\")==True", "assert text_match_zero_one(\"asbbbba\")==False", "assert text_match_zero_one(\"abaaa\")==True"], "model_name": "openai/gpt-5", "generated_code": "import re\n\ndef text_match_zero_one(text: str) -> bool:\n    \"\"\"\n    Check if the input string matches the pattern: 'a' followed by one or more 'b's.\n    Returns True if it matches exactly, otherwise False.\n    \"\"\"\n    return re.fullmatch(r\"ab+\", text) is not None"}
{"benchmark": "mbpp", "task_id": "632", "prompt": "Write a python function to move all zeroes to the end of the given list.", "reference_code": "def move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a", "test_imports": [], "test_list": ["assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]", "assert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]", "assert move_zero([0,1,0,1,1]) == [1,1,1,0,0]"], "model_name": "openai/gpt-5", "generated_code": "from typing import List, Any\n\ndef move_zero(lst: List[Any]) -> List[Any]:\n    \"\"\"\n    Move all numeric zeros to the end of the list, preserving the order of non-zero elements\n    and the relative order of zeros. Booleans are not treated as zeros.\n    Operates in-place and also returns the modified list.\n    \"\"\"\n    # Classify elements while preserving order\n    non_zeros = []\n    zeros = []\n    for x in lst:\n        if x == 0 and not isinstance(x, bool):\n            zeros.append(x)\n        else:\n            non_zeros.append(x)\n\n    # Modify in place and return\n    lst[:] = non_zeros + zeros\n    return lst"}
{"benchmark": "mbpp", "task_id": "767", "prompt": "Write a python function to count the number of pairs whose sum is equal to ‘sum’. The funtion gets as input a list of numbers and the sum,", "reference_code": "def get_pairs_count(arr, sum):\n    count = 0  \n    for i in range(len(arr)):\n        for j in range(i + 1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count", "test_imports": [], "test_list": ["assert get_pairs_count([1,1,1,1],2) == 6", "assert get_pairs_count([1,5,7,-1,5],6) == 3", "assert get_pairs_count([1,-2,3],1) == 1", "assert get_pairs_count([-1,-2,3],-3) == 1"], "model_name": "openai/gpt-5", "generated_code": "from collections import defaultdict\nfrom typing import Iterable, Union\n\nNumber = Union[int, float]\n\n\ndef get_pairs_count(numbers: Iterable[Number], sum: Number) -> int:\n    \"\"\"\n    Count the number of unordered index pairs (i, j) with i < j such that\n    numbers[i] + numbers[j] == sum.\n\n    Args:\n        numbers: Iterable of numeric values.\n        sum: Target sum for the pairs.\n\n    Returns:\n        Integer count of pairs.\n    \"\"\"\n    if numbers is None:\n        return 0\n\n    count = 0\n    freq = defaultdict(int)\n\n    for x in numbers:\n        complement = sum - x\n        if complement in freq:\n            count += freq[complement]\n        freq[x] += 1\n\n    return count"}
{"benchmark": "mbpp", "task_id": "764", "prompt": "Write a python function to count number of digits in a given string.", "reference_code": "def number_ctr(str):\n      number_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \n      return  number_ctr", "test_imports": [], "test_list": ["assert number_ctr('program2bedone') == 1", "assert number_ctr('3wonders') == 1", "assert number_ctr('123') == 3", "assert number_ctr('3wond-1ers2') == 3"], "model_name": "openai/gpt-5", "generated_code": "def number_ctr(s):\n    \"\"\"\n    Count the number of digit characters in the given string.\n\n    A digit is any character for which str.isdigit() returns True,\n    including Unicode digits.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        int: The count of digit characters in the string. If input is not a string, returns 0.\n    \"\"\"\n    if not isinstance(s, str):\n        return 0\n    return sum(1 for ch in s if ch.isdigit())"}
{"benchmark": "mbpp", "task_id": "743", "prompt": "Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/", "reference_code": "def rotate_right(list, m):\n  result =  list[-m:] + list[:-m]\n  return result", "test_imports": [], "test_list": ["assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]", "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]", "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]"], "model_name": "openai/gpt-5", "generated_code": "from typing import Iterable, List, Any\n\n\ndef rotate_right(lst: Iterable[Any], n: int) -> List[Any]:\n    \"\"\"\n    Rotate a given list to the right by n positions and return the rotated list.\n\n    - If n is larger than the list length, it wraps around using modulo.\n    - If n is negative, it performs a left rotation by abs(n) positions.\n    - Does not modify the original list and always returns a new list.\n\n    Parameters:\n        lst (Iterable[Any]): The input list (or iterable) to rotate.\n        n (int): Number of positions to rotate to the right.\n\n    Returns:\n        List[Any]: A new list rotated to the right by n positions.\n\n    Raises:\n        TypeError: If n is not an integer or lst is not iterable.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n\n    try:\n        L = list(lst)\n    except TypeError as exc:\n        raise TypeError(\"lst must be an iterable\") from exc\n\n    length = len(L)\n    if length == 0:\n        return []\n\n    k = n % length\n    if k == 0:\n        return L.copy()\n    return L[-k:] + L[:-k]"}
{"benchmark": "mbpp", "task_id": "766", "prompt": "Write a function to return a list of all pairs of consecutive items in a given list.", "reference_code": "def pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp", "test_imports": [], "test_list": ["assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]", "assert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]", "assert pair_wise([5,1,9,7,10])==[(5, 1), (1, 9), (9, 7), (7, 10)]", "assert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]"], "model_name": "openai/gpt-5", "generated_code": "from typing import List, Tuple, Any\n\ndef pair_wise(lst: List[Any]) -> List[Tuple[Any, Any]]:\n    \"\"\"\n    Return a list of all pairs of consecutive items in a given list.\n\n    Example:\n    pair_wise([1, 2, 3, 4]) -> [(1, 2), (2, 3), (3, 4)]\n    \"\"\"\n    return [(lst[i], lst[i + 1]) for i in range(len(lst) - 1)]"}
{"benchmark": "mbpp", "task_id": "638", "prompt": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.", "reference_code": "import math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))", "test_imports": [], "test_list": ["assert wind_chill(120,35)==40", "assert wind_chill(40,20)==19", "assert wind_chill(10,8)==6"], "model_name": "openai/gpt-5", "generated_code": "import math\n\ndef wind_chill(velocity, temperature):\n    \"\"\"\n    Calculate the wind chill index given wind speed (km/h) and temperature (°C),\n    rounded to the nearest integer.\n    Formula (Environment Canada/NOAA):\n    WCI = 13.12 + 0.6215*T - 11.37*V^0.16 + 0.3965*T*V^0.16\n    \"\"\"\n    v16 = velocity ** 0.16 if velocity >= 0 else (-velocity) ** 0.16  # handle potential negative gracefully\n    wci = 13.12 + 0.6215 * temperature - 11.37 * v16 + 0.3965 * temperature * v16\n    return int(round(wci))"}
{"benchmark": "mbpp", "task_id": "735", "prompt": "Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/", "reference_code": "def set_middle_bits(n):  \n    n |= n >> 1; \n    n |= n >> 2; \n    n |= n >> 4; \n    n |= n >> 8; \n    n |= n >> 16;  \n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n): \n    if (n == 1): \n        return 1\n    return n ^ set_middle_bits(n) ", "test_imports": [], "test_list": ["assert toggle_middle_bits(9) == 15", "assert toggle_middle_bits(10) == 12", "assert toggle_middle_bits(11) == 13", "assert toggle_middle_bits(0b1000001) == 0b1111111", "assert toggle_middle_bits(0b1001101) == 0b1110011"], "model_name": "openai/gpt-5", "generated_code": "def toggle_middle_bits(n: int) -> int:\n    \"\"\"\n    Toggle all bits of n except the most significant (first) and least significant (last) bits.\n    The \"first\" bit is the most significant set bit in n's binary representation.\n    The \"last\" bit is the least significant bit (bit 0).\n\n    For numbers with bit length <= 2, there are no middle bits to toggle; n is returned unchanged.\n\n    Parameters:\n        n (int): Non-negative integer.\n\n    Returns:\n        int: Result after toggling the middle bits.\n\n    Raises:\n        ValueError: If n is negative.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n\n    bit_len = n.bit_length()\n    if bit_len <= 2:\n        return n\n\n    # Create mask with 1s from bit positions 1 through (bit_len - 2)\n    mask = ((1 << (bit_len - 2)) - 1) << 1\n\n    return n ^ mask"}
{"benchmark": "mbpp", "task_id": "745", "prompt": "Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php", "reference_code": "def divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]", "test_imports": [], "test_list": ["assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(20,25)==[22, 24]"], "model_name": "openai/gpt-5", "generated_code": "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    \"\"\"\n    Return a list of integers between startnum and endnum (inclusive)\n    where each number is divisible by every non-zero digit it contains.\n    Numbers containing the digit zero are excluded.\n    \"\"\"\n    def is_divisible_by_its_digits(n: int) -> bool:\n        x = abs(n)\n        if x == 0:\n            return False  # contains digit 0\n        while x > 0:\n            d = x % 10\n            if d == 0 or n % d != 0:\n                return False\n            x //= 10\n        return True\n\n    lo, hi = (startnum, endnum) if startnum <= endnum else (endnum, startnum)\n    return [n for n in range(lo, hi + 1) if is_divisible_by_its_digits(n)]"}
{"benchmark": "mbpp", "task_id": "777", "prompt": "Write a python function to find the sum of non-repeated elements in a given list.", "reference_code": "def find_sum(arr): \n    arr.sort() \n    sum = arr[0] \n    for i in range(len(arr)-1): \n        if (arr[i] != arr[i+1]): \n            sum = sum + arr[i+1]   \n    return sum", "test_imports": [], "test_list": ["assert find_sum([1,2,3,1,1,4,5,6]) == 21", "assert find_sum([1,10,9,4,2,10,10,45,4]) == 71", "assert find_sum([12,10,9,45,2,10,10,45,10]) == 78"], "model_name": "openai/gpt-5", "generated_code": "from collections import Counter\nfrom typing import Iterable, Any\n\n\ndef find_sum(items: Iterable[Any]) -> int:\n    \"\"\"\n    Return the sum of elements that appear exactly once in the given iterable.\n\n    Assumes elements are numeric (e.g., ints/floats). If non-numeric elements are present,\n    a TypeError may be raised during summation.\n    \"\"\"\n    counts = Counter(items)\n    total = 0\n    for value, freq in counts.items():\n        if freq == 1:\n            total += value\n    return total"}
{"benchmark": "mbpp", "task_id": "747", "prompt": "Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/", "reference_code": "def lcs_of_three(X, Y, Z): \n  m = len(X)\n  n = len(Y)\n  o = len(Z)\n  L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n  for i in range(m+1): \n\t  for j in range(n+1): \n\t\t  for k in range(o+1): \n\t\t\t  if (i == 0 or j == 0 or k == 0): \n\t\t\t\t  L[i][j][k] = 0\n\t\t\t  elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n\t\t\t\t  L[i][j][k] = L[i-1][j-1][k-1] + 1\n\t\t\t  else: \n\t\t\t\t  L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n  return L[m][n][o]", "test_imports": [], "test_list": ["assert lcs_of_three('AGGT12', '12TXAYB', '12XBA') == 2", "assert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels') == 5", "assert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea') == 3"], "model_name": "openai/gpt-5", "generated_code": "def lcs_of_three(a, b, c):\n    \"\"\"\n    Returns the length of the longest common subsequence among three strings a, b, and c.\n    Uses dynamic programming with O(len(b) * len(c)) space.\n    \"\"\"\n    la, lb, lc = len(a), len(b), len(c)\n    if la == 0 or lb == 0 or lc == 0:\n        return 0\n\n    # prev and curr are (lb+1) x (lc+1) DP layers for consecutive i values\n    prev = [[0] * (lc + 1) for _ in range(lb + 1)]\n\n    for i in range(1, la + 1):\n        curr = [[0] * (lc + 1) for _ in range(lb + 1)]\n        ai = a[i - 1]\n        for j in range(1, lb + 1):\n            bj = b[j - 1]\n            # Iterate over k dimension\n            for k in range(1, lc + 1):\n                ck = c[k - 1]\n                if ai == bj and bj == ck:\n                    curr[j][k] = prev[j - 1][k - 1] + 1\n                else:\n                    # Recurrence: max among removing one character from one of the strings\n                    curr[j][k] = max(prev[j][k], curr[j - 1][k], curr[j][k - 1])\n        prev = curr\n\n    return prev[lb][lc]"}
{"benchmark": "mbpp", "task_id": "778", "prompt": "Write a function to pack consecutive duplicates of a given list elements into sublists.", "reference_code": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]", "test_imports": [], "test_list": ["assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]", "assert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]", "assert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]"], "model_name": "openai/gpt-5", "generated_code": "from typing import List, Any\n\n\ndef pack_consecutive_duplicates(lst: List[Any]) -> List[List[Any]]:\n    \"\"\"\n    Pack consecutive duplicate elements of the given list into sublists.\n    Example:\n        ['a', 'a', 'b', 'c', 'c', 'a'] -> [['a', 'a'], ['b'], ['c', 'c'], ['a']]\n    \"\"\"\n    result: List[List[Any]] = []\n    if not lst:\n        return result\n\n    current_group = [lst[0]]\n    for item in lst[1:]:\n        if item == current_group[-1]:\n            current_group.append(item)\n        else:\n            result.append(current_group)\n            current_group = [item]\n    result.append(current_group)\n    return result"}
{"benchmark": "mbpp", "task_id": "759", "prompt": "Write a function to check whether a given string is a decimal number with a precision of 2.", "reference_code": "def is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)", "test_imports": [], "test_list": ["assert is_decimal('123.11')==True", "assert is_decimal('e666.86')==False", "assert is_decimal('3.124587')==False", "assert is_decimal('1.11')==True", "assert is_decimal('1.1.11')==False"], "model_name": "openai/gpt-5", "generated_code": "import re\n\ndef is_decimal(s):\n    \"\"\"\n    Check whether the given string represents a decimal number\n    with exactly two digits after the decimal point.\n    Examples of valid strings: '0.00', '123.45', '+7.89', '-10.00'\n    \"\"\"\n    if not isinstance(s, str):\n        return False\n    pattern = r'^[+-]?\\d+\\.\\d{2}$'\n    return re.fullmatch(pattern, s) is not None"}
{"benchmark": "mbpp", "task_id": "772", "prompt": "Write a function to remove all the words with k length in the given string.", "reference_code": "def remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res) ", "test_imports": [], "test_list": ["assert remove_length('The person is most value tet', 3) == 'person is most value'", "assert remove_length('If you told me about this ok', 4) == 'If you me about ok'", "assert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'"], "model_name": "openai/gpt-5", "generated_code": "def remove_length(s, k):\n    \"\"\"\n    Remove all words of length k from the given string s.\n    \n    Args:\n        s (str): Input string.\n        k (int): Target word length to remove.\n        \n    Returns:\n        str: String with words of length k removed, normalized whitespace.\n    \"\"\"\n    return ' '.join(word for word in s.split() if len(word) != k)"}
{"benchmark": "mbpp", "task_id": "750", "prompt": "Write a function to add the given tuple to the given list.", "reference_code": "def add_tuple(test_list, test_tup):\n  test_list += test_tup\n  return test_list", "test_imports": [], "test_list": ["assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]", "assert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]", "assert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]"], "model_name": "openai/gpt-5", "generated_code": "from typing import List, Tuple, Any\n\ndef add_tuple(lst: List[Any], tup: Tuple[Any, ...]) -> List[Any]:\n    \"\"\"\n    Return a new list with the given tuple appended as a single element.\n    Does not modify the original list.\n    \"\"\"\n    new_list = list(lst)\n    new_list.append(tup)\n    return new_list"}
{"benchmark": "mbpp", "task_id": "760", "prompt": "Write a python function to check whether a list of numbers contains only one distinct element or not.", "reference_code": "def unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1", "test_imports": [], "test_list": ["assert unique_Element([1,1,1]) == True", "assert unique_Element([1,2,1,2]) == False", "assert unique_Element([1,2,3,4,5]) == False"], "model_name": "openai/gpt-5", "generated_code": "def unique_Element(nums):\n    \"\"\"\n    Check whether a list (or iterable) of numbers contains only one distinct element.\n\n    Returns:\n        True if the iterable is non-empty and all elements are equal to the first element.\n        False otherwise (including for an empty list).\n    \"\"\"\n    it = iter(nums)\n    try:\n        first = next(it)\n    except StopIteration:\n        return False\n    for x in it:\n        if x != first:\n            return False\n    return True"}
{"benchmark": "mbpp", "task_id": "738", "prompt": "Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php", "reference_code": "def geometric_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)", "test_imports": [], "test_list": ["assert geometric_sum(7) == 1.9921875", "assert geometric_sum(4) == 1.9375", "assert geometric_sum(8) == 1.99609375"], "model_name": "openai/gpt-5", "generated_code": "def geometric_sum(n):\n    \"\"\"\n    Calculate the geometric sum of powers of 1/2 up to exponent n-1:\n    S(n) = 1 + 1/2 + 1/4 + ... + (1/2)^(n-1)\n\n    Parameters:\n        n (int): Number of terms. For n <= 0, returns 0.0.\n\n    Returns:\n        float: The computed geometric sum.\n    \"\"\"\n    if n <= 0:\n        return 0.0\n    if n == 1:\n        return 1.0\n    return geometric_sum(n - 1) + (0.5) ** (n - 1)"}
{"benchmark": "mbpp", "task_id": "771", "prompt": "Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/", "reference_code": "from collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack", "test_imports": [], "test_list": ["assert check_expression(\"{()}[{}]\") == True", "assert check_expression(\"{()}[{]\") == False", "assert check_expression(\"{()}[{}][]({})\") == True"], "model_name": "openai/gpt-5", "generated_code": "def check_expression(expression):\n    \"\"\"\n    Check if the given expression has balanced parentheses.\n    Considers the following brackets: (), {}, []\n    Returns True if balanced, False otherwise.\n    \"\"\"\n    if expression is None:\n        return False\n\n    opening = {'(', '{', '['}\n    matching = {')': '(', '}': '{', ']': '['}\n    stack = []\n\n    # Iterate through each character in the expression\n    for ch in str(expression):\n        if ch in opening:\n            stack.append(ch)\n        elif ch in matching:\n            if not stack or stack[-1] != matching[ch]:\n                return False\n            stack.pop()\n        # Ignore all other characters\n\n    return len(stack) == 0"}
{"benchmark": "mbpp", "task_id": "786", "prompt": "Write a function to locate the right insertion point for a specified value in sorted order.", "reference_code": "import bisect\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)", "test_imports": [], "test_list": ["assert right_insertion([1,2,4,5],6)==4", "assert right_insertion([1,2,4,5],3)==2", "assert right_insertion([1,2,4,5],7)==4"], "model_name": "openai/gpt-5", "generated_code": "from typing import Sequence, Any\n\ndef right_insertion(arr: Sequence[Any], value: Any) -> int:\n    \"\"\"\n    Return the index where to insert value in arr, assuming arr is sorted,\n    to the right of any existing entries of value (like bisect_right).\n\n    Parameters:\n    - arr: A sorted sequence.\n    - value: The value to insert.\n\n    Returns:\n    - The insertion index as an integer.\n    \"\"\"\n    lo, hi = 0, len(arr)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if value < arr[mid]:\n            hi = mid\n        else:\n            lo = mid + 1\n    return lo"}
{"benchmark": "mbpp", "task_id": "792", "prompt": "Write a python function to count the number of lists in a given number of lists.", "reference_code": "def count_list(input_list): \n    return len(input_list)", "test_imports": [], "test_list": ["assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4", "assert count_list([[1,2],[2,3],[4,5]]) == 3", "assert count_list([[1,0],[2,0]]) == 2"], "model_name": "openai/gpt-5", "generated_code": "from typing import Any, Iterable\n\ndef count_list(items: Iterable[Any]) -> int:\n    \"\"\"\n    Count the number of elements that are lists within the given iterable.\n\n    Parameters:\n    items (Iterable[Any]): The iterable to inspect.\n\n    Returns:\n    int: The number of elements in 'items' that are of type list.\n    \"\"\"\n    return sum(1 for element in items if isinstance(element, list))"}
{"benchmark": "mbpp", "task_id": "757", "prompt": "Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/", "reference_code": "def count_reverse_pairs(test_list):\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \n  return res", "test_imports": [], "test_list": ["assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2", "assert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == 1", "assert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == 2"], "model_name": "openai/gpt-5", "generated_code": "def count_reverse_pairs(strings):\n    \"\"\"\n    Count the number of pairs (i, j) with i < j such that strings[j] is the reverse of strings[i].\n    For palindromic strings, each pair of identical strings contributes as a reverse pair.\n    \n    Args:\n        strings (list[str]): List of strings.\n        \n    Returns:\n        int: Number of reverse pairs.\n    \"\"\"\n    if not strings:\n        return 0\n\n    counts = {}\n    total_pairs = 0\n\n    for s in strings:\n        rs = s[::-1]\n        total_pairs += counts.get(rs, 0)\n        counts[s] = counts.get(s, 0) + 1\n\n    return total_pairs"}
{"benchmark": "mbpp", "task_id": "776", "prompt": "Write a function to count those characters which have vowels as their neighbors in the given string.", "reference_code": "def count_vowels(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res) ", "test_imports": [], "test_list": ["assert count_vowels('bestinstareels') == 7", "assert count_vowels('partofthejourneyistheend') == 12", "assert count_vowels('amazonprime') == 5"], "model_name": "openai/gpt-5", "generated_code": "def count_vowels(s: str) -> int:\n    \"\"\"\n    Count the number of characters in the string that have vowels as both immediate neighbors.\n\n    A character at position i is counted if s[i-1] and s[i+1] are vowels.\n    Vowels considered: a, e, i, o, u (case-insensitive).\n    \"\"\"\n    vowels = set(\"aeiouAEIOU\")\n    n = len(s)\n    if n < 3:\n        return 0\n    count = 0\n    for i in range(1, n - 1):\n        if s[i - 1] in vowels and s[i + 1] in vowels:\n            count += 1\n    return count"}
{"benchmark": "mbpp", "task_id": "762", "prompt": "Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.", "reference_code": "def check_monthnumber_number(monthnum3):\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11", "test_imports": [], "test_list": ["assert check_monthnumber_number(6)==True", "assert check_monthnumber_number(2)==False", "assert check_monthnumber_number(12)==False"], "model_name": "openai/gpt-5", "generated_code": "def check_monthnumber_number(month):\n    \"\"\"\n    Check whether the given month number contains 30 days.\n\n    Args:\n        month (int): Month number from 1 to 12.\n\n    Returns:\n        bool: True if the month has 30 days (April, June, September, November), else False.\n              Returns False for invalid inputs as well.\n    \"\"\"\n    if not isinstance(month, int) or isinstance(month, bool):\n        return False\n    if month < 1 or month > 12:\n        return False\n    return month in {4, 6, 9, 11}"}
{"benchmark": "mbpp", "task_id": "763", "prompt": "Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/", "reference_code": "def find_min_diff(arr,n): \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff ", "test_imports": [], "test_list": ["assert find_min_diff((1,5,3,19,18,25),6) == 1", "assert find_min_diff((4,3,2,6),4) == 1", "assert find_min_diff((30,5,20,9),4) == 4"], "model_name": "openai/gpt-5", "generated_code": "from typing import Iterable, Union\n\nNumber = Union[int, float]\n\ndef find_min_diff(arr: Iterable[Number]) -> Number:\n    \"\"\"\n    Find the minimum absolute difference between any two elements in the given iterable.\n    Returns 0 if the iterable has fewer than two elements.\n\n    Parameters:\n        arr: Iterable of numbers (int or float).\n\n    Returns:\n        The minimum absolute difference (same numeric type semantics as input).\n    \"\"\"\n    lst = list(arr)\n    n = len(lst)\n    if n < 2:\n        return 0\n\n    lst.sort()\n    # Initialize with difference of first adjacent pair\n    min_diff = lst[1] - lst[0]\n    if min_diff < 0:\n        min_diff = abs(min_diff)\n    if min_diff == 0:\n        return 0\n\n    prev = lst[1]\n    for i in range(2, n):\n        curr = lst[i]\n        diff = curr - prev\n        if diff < 0:\n            diff = abs(diff)\n        if diff < min_diff:\n            min_diff = diff\n            if min_diff == 0:\n                return 0\n        prev = curr\n\n    return min_diff"}
{"benchmark": "mbpp", "task_id": "753", "prompt": "Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases", "reference_code": "def min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) ", "test_imports": [], "test_list": ["assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]", "assert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]", "assert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]"], "model_name": "openai/gpt-5", "generated_code": "from typing import List, Tuple, Any\n\n\ndef min_k(test_list: List[Tuple[Any, ...]], K: int) -> List[Tuple[Any, ...]]:\n    \"\"\"\n    Return the minimum K records (tuples) from the list based on the second element of each tuple.\n    - If K <= 0, returns an empty list.\n    - If K >= len(test_list), returns all elements sorted by their second element.\n    - Stable for ties: preserves original order among elements with equal second elements.\n    \"\"\"\n    if K <= 0 or not test_list:\n        return []\n    # Pair each tuple with its original index for stable ordering on ties\n    # Sort by (second element, original index)\n    indexed_sorted = sorted(\n        ((t[1], idx, t) for idx, t in enumerate(test_list)),\n        key=lambda x: (x[0], x[1]),\n    )\n    return [t for _, _, t in indexed_sorted[:K]]"}
{"benchmark": "mbpp", "task_id": "748", "prompt": "Write a function to put spaces between words starting with capital letters in a given string.", "reference_code": "import re\ndef capital_words_spaces(str1):\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)", "test_imports": [], "test_list": ["assert capital_words_spaces(\"Python\") == 'Python'", "assert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'", "assert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'"], "model_name": "openai/gpt-5", "generated_code": "import re\n\ndef capital_words_spaces(s):\n    \"\"\"\n    Insert spaces between words that start with capital letters in the given string.\n    Example: 'BruceWayneIsBatman' -> 'Bruce Wayne Is Batman'\n    \"\"\"\n    return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", s)"}
{"benchmark": "mbpp", "task_id": "801", "prompt": "Write a python function to count the number of equal numbers from three given integers.", "reference_code": "def test_three_equal(x,y,z):\n  result = set([x,y,z])\n  if len(result)==3:\n    return 0\n  else:\n    return 4-len(result)", "test_imports": [], "test_list": ["assert test_three_equal(1,1,1) == 3", "assert test_three_equal(-1,-2,-3) == 0", "assert test_three_equal(1,2,2) == 2"], "model_name": "openai/gpt-5", "generated_code": "def test_three_equal(a, b, c):\n    \"\"\"\n    Return the count of equal numbers among three integers:\n    - 3 if all three are equal\n    - 2 if exactly two are equal\n    - 0 if all are different\n    \"\"\"\n    if a == b == c:\n        return 3\n    if a == b or b == c or a == c:\n        return 2\n    return 0"}
{"benchmark": "mbpp", "task_id": "788", "prompt": "Write a function to create a new tuple from the given string and list.", "reference_code": "def new_tuple(test_list, test_str):\n  return tuple(test_list + [test_str])", "test_imports": [], "test_list": ["assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')", "assert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')", "assert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')"], "model_name": "openai/gpt-5", "generated_code": "def new_tuple(s, lst):\n    \"\"\"\n    Create a new tuple from the given string and list by concatenating:\n    - a tuple of the characters from the string\n    - a tuple of the elements from the list\n    \"\"\"\n    return tuple(s) + tuple(lst)"}
{"benchmark": "mbpp", "task_id": "787", "prompt": "Write a function that matches a string that has an a followed by three 'b'.", "reference_code": "import re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)", "test_imports": [], "test_list": ["assert not text_match_three(\"ac\")", "assert not text_match_three(\"dc\")", "assert text_match_three(\"abbbba\")", "assert text_match_three(\"caacabbbba\")"], "model_name": "openai/gpt-5", "generated_code": "import re\n\ndef text_match_three(text: str) -> bool:\n    \"\"\"\n    Return True if the string contains 'a' followed by exactly three 'b' in sequence ('abbb'),\n    otherwise return False.\n    \"\"\"\n    return re.search(r'ab{3}', text) is not None"}
{"benchmark": "mbpp", "task_id": "791", "prompt": "Write a function to remove tuples from the given tuple.", "reference_code": "def remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) ", "test_imports": [], "test_list": ["assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)", "assert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)", "assert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)", "assert remove_nested((3, 7, 9, (6, 8), (5,12), 12)) == (3, 7, 9, 12)"], "model_name": "openai/gpt-5", "generated_code": "from typing import Tuple, Any\n\ndef remove_nested(items: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    \"\"\"\n    Remove elements that are tuples from the given tuple.\n\n    Parameters:\n        items: A tuple potentially containing elements of any type, including tuples.\n\n    Returns:\n        A new tuple containing only the elements from `items` that are not tuples.\n    \"\"\"\n    # Keep only non-tuple elements, preserving order\n    return tuple(elem for elem in items if not isinstance(elem, tuple))"}
{"benchmark": "mbpp", "task_id": "796", "prompt": "Write function to find the sum of all items in the given dictionary.", "reference_code": "def return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum", "test_imports": [], "test_list": ["assert return_sum({'a': 100, 'b':200, 'c':300}) == 600", "assert return_sum({'a': 25, 'b':18, 'c':45}) == 88", "assert return_sum({'a': 36, 'b':39, 'c':49}) == 124"], "model_name": "openai/gpt-5", "generated_code": "def return_sum(d):\n    \"\"\"\n    Return the sum of all values in the given dictionary.\n\n    Parameters:\n    d (dict): Dictionary with numeric values.\n\n    Returns:\n    int/float: Sum of the dictionary's values.\n    \"\"\"\n    return sum(d.values())"}
{"benchmark": "mbpp", "task_id": "794", "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.", "reference_code": "import re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        return re.search(patterns,  text)", "test_imports": [], "test_list": ["assert text_starta_endb(\"aabbbb\")", "assert not text_starta_endb(\"aabAbbbc\")", "assert not text_starta_endb(\"accddbbjjj\")"], "model_name": "openai/gpt-5", "generated_code": "import re\n\n# Precompiled regex: starts with 'a', followed by any characters, ends with 'b'\n_PATTERN_START_A_END_B = re.compile(r'^a.*b$')\n\n\ndef text_starta_endb(text: str) -> bool:\n    \"\"\"\n    Return True if the given text starts with 'a' and ends with 'b'\n    with any characters (including none) in between; otherwise False.\n    \"\"\"\n    if text is None:\n        return False\n    return _PATTERN_START_A_END_B.match(text) is not None"}
{"benchmark": "mbpp", "task_id": "799", "prompt": "Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.", "reference_code": "def left_rotate(n,d):   \n    INT_BITS = 32\n    return (n << d)|(n >> (INT_BITS - d))  ", "test_imports": [], "test_list": ["assert left_rotate(16,2) == 64", "assert left_rotate(10,2) == 40", "assert left_rotate(99,3) == 792", "assert left_rotate(99,3) == 792", "assert left_rotate(0b0001,3) == 0b1000", "assert left_rotate(0b0101,3) == 0b101000", "assert left_rotate(0b11101,3) == 0b11101000"], "model_name": "openai/gpt-5", "generated_code": "def left_rotate(n, d):\n    \"\"\"\n    Rotate the 32-bit representation of n to the left by d bits.\n    Treats n as an unsigned 32-bit integer and returns an unsigned 32-bit result.\n    \"\"\"\n    INT_BITS = 32\n    n &= 0xFFFFFFFF\n    d %= INT_BITS\n    if d == 0:\n        return n\n    return ((n << d) | (n >> (INT_BITS - d))) & 0xFFFFFFFF"}
{"benchmark": "mbpp", "task_id": "790", "prompt": "Write a python function to check whether every even index contains even numbers of a given list.", "reference_code": "def even_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))", "test_imports": [], "test_list": ["assert even_position([3,2,1]) == False", "assert even_position([1,2,3]) == False", "assert even_position([2,1,4]) == True"], "model_name": "openai/gpt-5", "generated_code": "def even_position(lst):\n    \"\"\"\n    Check whether every even index in the list contains an even integer.\n    \n    Parameters:\n    - lst: list of elements (expected integers)\n    \n    Returns:\n    - True if all elements at even indices (0, 2, 4, ...) are even integers.\n      False otherwise.\n    \"\"\"\n    for i, val in enumerate(lst):\n        if i % 2 == 0:\n            if not isinstance(val, int) or val % 2 != 0:\n                return False\n    return True"}
{"benchmark": "mbpp", "task_id": "793", "prompt": "Write a python function to find the last position of an element in a sorted array.", "reference_code": "def last(arr,x):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res", "test_imports": [], "test_list": ["assert last([1,2,3],1) == 0", "assert last([1,1,1,2,3,4],1) == 2", "assert last([2,3,2,3,6,8,9],3) == 3"], "model_name": "openai/gpt-5", "generated_code": "def last(arr, x):\n    \"\"\"\n    Return the last index of element x in a sorted (non-decreasing) array arr.\n    If x is not present, return -1.\n\n    Parameters:\n    - arr: list-like sequence sorted in ascending order\n    - x: value to find\n\n    Returns:\n    - int: last index of x, or -1 if not found\n    \"\"\"\n    if not arr:\n        return -1\n\n    low, high = 0, len(arr) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n        val = arr[mid]\n        if val == x:\n            result = mid  # record current match\n            low = mid + 1  # move right to find last occurrence\n        elif val < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result"}
{"benchmark": "mbpp", "task_id": "758", "prompt": "Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.", "reference_code": "def unique_sublists(list1):\n    result ={}\n    for l in  list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result", "test_imports": [], "test_list": ["assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}", "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}", "assert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}", "assert unique_sublists([['john']])=={('john',): 1}"], "model_name": "openai/gpt-5", "generated_code": "from collections import Counter\nfrom typing import Any, Dict, Iterable, Tuple\n\ndef unique_sublists(lst: Iterable[Any]) -> Dict[Tuple[Any, ...], int]:\n    \"\"\"\n    Count occurrences of sublists in a list-like iterable.\n    Returns a dictionary mapping each sublist (converted to a tuple, recursively)\n    to the number of its occurrences in the original list.\n\n    Non-list elements in the outer iterable are ignored.\n    \"\"\"\n\n    def to_tuple(value: Any) -> Any:\n        # Recursively convert lists (and tuples) to tuples to ensure hashability.\n        if isinstance(value, list):\n            return tuple(to_tuple(v) for v in value)\n        if isinstance(value, tuple):\n            return tuple(to_tuple(v) for v in value)\n        # For broader robustness, convert sets and dicts into hashable representations.\n        if isinstance(value, set):\n            return tuple(sorted(to_tuple(v) for v in value))\n        if isinstance(value, dict):\n            return tuple(sorted((to_tuple(k), to_tuple(v)) for k, v in value.items()))\n        return value\n\n    counts = Counter()\n    for item in lst:\n        if isinstance(item, list):\n            key = to_tuple(item)\n            counts[key] += 1\n    return dict(counts)"}
{"benchmark": "mbpp", "task_id": "752", "prompt": "Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...", "reference_code": "def jacobsthal_num(n): \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]", "test_imports": [], "test_list": ["assert jacobsthal_num(5) == 11", "assert jacobsthal_num(2) == 1", "assert jacobsthal_num(4) == 5", "assert jacobsthal_num(13) == 2731"], "model_name": "openai/gpt-5", "generated_code": "def jacobsthal_num(n):\n    \"\"\"\n    Return the nth Jacobsthal number.\n    J_0 = 0, J_1 = 1, J_n = J_{n-1} + 2*J_{n-2}\n    Closed form: J_n = (2^n - (-1)^n) / 3\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n\n    # Compute 2^n using bit shift for efficiency\n    pow2 = 1 << n\n    # (-1)^n is 1 for even n, -1 for odd n\n    numerator = pow2 - 1 if (n & 1) == 0 else pow2 + 1\n    return numerator // 3"}
{"benchmark": "mbpp", "task_id": "797", "prompt": "Write a python function to find the sum of all odd natural numbers within the range l and r.", "reference_code": "def sum_odd(n): \n    terms = (n + 1)//2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)", "test_imports": [], "test_list": ["assert sum_in_range(2,5) == 8", "assert sum_in_range(5,7) == 12", "assert sum_in_range(7,13) == 40"], "model_name": "openai/gpt-5", "generated_code": "def sum_in_range(l, r):\n    \"\"\"\n    Return the sum of all odd natural numbers within the inclusive range [l, r].\n    Natural numbers are positive integers (1, 2, 3, ...).\n    \"\"\"\n    # Normalize the range and ensure we only consider natural numbers (>= 1)\n    if l > r:\n        return 0\n    start = max(l, 1)\n    end = r\n\n    # Adjust start to the first odd number >= start\n    if start % 2 == 0:\n        start += 1\n    # Adjust end to the last odd number <= end\n    if end % 2 == 0:\n        end -= 1\n\n    if start > end:\n        return 0\n\n    # Number of odd terms in the sequence\n    n = ((end - start) // 2) + 1\n    # Sum of arithmetic progression: n * (first + last) // 2\n    return n * (start + end) // 2"}
{"benchmark": "mbpp", "task_id": "798", "prompt": "Write a python function to find the sum of an array.", "reference_code": "def _sum(arr):  \n    sum=0\n    for i in arr: \n        sum = sum + i      \n    return(sum)  ", "test_imports": [], "test_list": ["assert _sum([1, 2, 3]) == 6", "assert _sum([15, 12, 13, 10]) == 50", "assert _sum([0, 1, 2]) == 3"], "model_name": "openai/gpt-5", "generated_code": "from typing import Iterable, Optional, Union\n\nNumber = Union[int, float]\n\n\ndef _sum(arr: Optional[Iterable[Number]], n: Optional[int] = None) -> Number:\n    \"\"\"\n    Returns the sum of elements in `arr`. If `n` is provided, sums at most the first `n` elements.\n\n    - arr: Iterable of numbers (e.g., list, tuple). If None, returns 0.\n    - n: Optional integer indicating the number of elements to sum from the start.\n\n    Examples:\n        _sum([1, 2, 3]) -> 6\n        _sum([1, 2, 3], 2) -> 3\n    \"\"\"\n    if arr is None:\n        return 0  # Nothing to sum\n\n    if n is not None and n <= 0:\n        return 0\n\n    total: Number = 0\n    if n is None:\n        for x in arr:\n            total += x  # type: ignore[operator]\n        return total\n\n    # Sum up to n elements\n    count = 0\n    for x in arr:\n        total += x  # type: ignore[operator]\n        count += 1\n        if count >= n:\n            break\n    return total"}
{"benchmark": "mbpp", "task_id": "773", "prompt": "Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.", "reference_code": "import re\ndef occurance_substring(text,pattern):\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)", "test_imports": [], "test_list": ["assert occurance_substring('python programming, python language','python')==('python', 0, 6)", "assert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)", "assert occurance_substring('python programming,programming language','language')==('language', 31, 39)", "assert occurance_substring('c++ programming, c++ language','python')==None"], "model_name": "openai/gpt-5", "generated_code": "import re\nfrom typing import List, Tuple, Optional\n\n\ndef occurance_substring(text: str, substring: str) -> Optional[List[Tuple[int, int]]]:\n    \"\"\"\n    Find all non-overlapping occurrences and positions (start, end) of a substring within a string.\n    Returns a list of (start_index, end_index) tuples, or None if there is no match.\n\n    Parameters:\n        text (str): The text to search within.\n        substring (str): The substring to search for.\n\n    Returns:\n        Optional[List[Tuple[int, int]]]: List of (start, end) index tuples, or None if no matches.\n    \"\"\"\n    if not isinstance(text, str) or not isinstance(substring, str):\n        return None\n\n    # Avoid infinite/ambiguous matches for empty substring\n    if substring == \"\":\n        return None\n\n    matches = [(m.start(), m.end()) for m in re.finditer(re.escape(substring), text)]\n    return matches if matches else None"}
{"benchmark": "mbpp", "task_id": "769", "prompt": "Write a python function to get the difference between two lists.", "reference_code": "def Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n ", "test_imports": [], "test_list": ["assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]", "assert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]", "assert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]"], "model_name": "openai/gpt-5", "generated_code": "from typing import List, Any\n\ndef Diff(list1: List[Any], list2: List[Any]) -> List[Any]:\n    \"\"\"\n    Return the difference between two lists:\n    elements present in list1 but not in list2.\n    Preserves the order of list1.\n    \"\"\"\n    try:\n        set2 = set(list2)\n        return [x for x in list1 if x not in set2]\n    except TypeError:\n        # Fallback for unhashable elements in list2\n        return [x for x in list1 if x not in list2]"}
{"benchmark": "mbpp", "task_id": "749", "prompt": "Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/", "reference_code": "def sort_numeric_strings(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result", "test_imports": [], "test_list": ["assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]", "assert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]", "assert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]"], "model_name": "openai/gpt-5", "generated_code": "from decimal import Decimal\n\n\ndef sort_numeric_strings(strings):\n    \"\"\"\n    Sort a list of strings representing numbers numerically and return a new list.\n    Handles integers, decimals, and scientific notation.\n    \"\"\"\n    return sorted(strings, key=lambda s: Decimal(str(s).strip()))"}
{"benchmark": "mbpp", "task_id": "775", "prompt": "Write a python function to check whether every odd index contains odd numbers of a given list.", "reference_code": "def odd_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))", "test_imports": [], "test_list": ["assert odd_position([2,1,4,3,6,7,6,3]) == True", "assert odd_position([4,1,2]) == True", "assert odd_position([1,2,3]) == False"], "model_name": "openai/gpt-5", "generated_code": "def odd_position(nums):\n    \"\"\"\n    Check whether every odd index (1, 3, 5, ...) in the list contains an odd number.\n    Returns True if the condition holds for all applicable indices, otherwise False.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"}
{"benchmark": "mbpp", "task_id": "800", "prompt": "Write a function to remove all whitespaces from a string.", "reference_code": "import re\ndef remove_all_spaces(text):\n return (re.sub(r'\\s+', '',text))", "test_imports": [], "test_list": ["assert remove_all_spaces('python  program')==('pythonprogram')", "assert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')", "assert remove_all_spaces('python                     program')==('pythonprogram')", "assert remove_all_spaces('   python                     program')=='pythonprogram'"], "model_name": "openai/gpt-5", "generated_code": "def remove_all_spaces(s):\n    \"\"\"\n    Remove all whitespace characters from the given string.\n\n    This removes spaces, tabs, newlines, and any character for which str.isspace() returns True.\n\n    Args:\n        s (str): Input string.\n\n    Returns:\n        str: String with all whitespace characters removed.\n    \"\"\"\n    return \"\".join(ch for ch in s if not ch.isspace())"}
{"benchmark": "mbpp", "task_id": "805", "prompt": "Write a function that returns the list in a list of lists whose sum of elements is the highest.", "reference_code": "def max_sum_list(lists):\n return max(lists, key=sum)", "test_imports": [], "test_list": ["assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]", "assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10]", "assert max_sum_list([[2,3,1]])==[2,3,1]"], "model_name": "openai/gpt-5", "generated_code": "from typing import List, Iterable, Any\n\ndef max_sum_list(lists: Iterable[Iterable[float]]) -> List[float]:\n    \"\"\"\n    Return the sublist with the highest sum from an iterable of lists.\n    - If the input is empty or contains no valid sublists, returns [].\n    - In case of ties, returns the first sublist with the maximum sum.\n    \"\"\"\n    if not lists:\n        return []\n    best_list = []\n    best_sum = float(\"-inf\")\n    for lst in lists:\n        # Ensure lst is iterable (like a list) and its elements are summable\n        try:\n            current_sum = sum(lst)  # May raise TypeError if elements aren't numeric\n        except Exception:\n            continue\n        if current_sum > best_sum:\n            best_sum = current_sum\n            best_list = list(lst) if not isinstance(lst, list) else lst\n    return best_list"}
{"benchmark": "mbpp", "task_id": "779", "prompt": "Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.", "reference_code": "def unique_sublists(list1):\n    result ={}\n    for l in list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result", "test_imports": [], "test_list": ["assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}", "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}", "assert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}"], "model_name": "openai/gpt-5", "generated_code": ""}
{"benchmark": "mbpp", "task_id": "782", "prompt": "Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/", "reference_code": "def odd_length_sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum", "test_imports": [], "test_list": ["assert odd_length_sum([1,2,4]) == 14", "assert odd_length_sum([1,2,1,2]) == 15", "assert odd_length_sum([1,7]) == 8"], "model_name": "openai/gpt-5", "generated_code": "from typing import Sequence, Union\n\nNumber = Union[int, float]\n\n\ndef odd_length_sum(arr: Sequence[Number]) -> Number:\n    \"\"\"\n    Compute the sum of all odd-length subarrays of the input sequence.\n\n    Each element arr[i] contributes to ((i+1)*(n-i)+1)//2 odd-length subarrays.\n    \"\"\"\n    n = len(arr)\n    total = 0\n    for i, val in enumerate(arr):\n        left = i + 1\n        right = n - i\n        odd_count = (left * right + 1) // 2\n        total += val * odd_count\n    return total"}
{"benchmark": "mbpp", "task_id": "783", "prompt": "Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/", "reference_code": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v", "test_imports": [], "test_list": ["assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)", "assert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)", "assert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)"], "model_name": "openai/gpt-5", "generated_code": ""}
{"benchmark": "mbpp", "task_id": "809", "prompt": "Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.", "reference_code": "def check_smaller(test_tup1, test_tup2):\n  return all(x > y for x, y in zip(test_tup1, test_tup2))", "test_imports": [], "test_list": ["assert check_smaller((1, 2, 3), (2, 3, 4)) == False", "assert check_smaller((4, 5, 6), (3, 4, 5)) == True", "assert check_smaller((11, 12, 13), (10, 11, 12)) == True"], "model_name": "openai/gpt-5", "generated_code": "from typing import Tuple, Any\n\ndef check_smaller(t1: Tuple[Any, ...], t2: Tuple[Any, ...]) -> bool:\n    \"\"\"\n    Check if each element of the second tuple is smaller than its corresponding element\n    in the first tuple. Returns False if tuples have different lengths or if elements\n    are not comparable.\n\n    Example:\n        check_smaller((5, 10, 15), (4, 9, 14)) -> True\n        check_smaller((5, 10), (6, 9)) -> False\n    \"\"\"\n    if len(t1) != len(t2):\n        return False\n    try:\n        return all(b < a for a, b in zip(t1, t2))\n    except TypeError:\n        # In case elements are not comparable\n        return False"}
{"benchmark": "mbpp", "task_id": "807", "prompt": "Write a python function to find the first odd number in a given list of numbers.", "reference_code": "def first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd", "test_imports": [], "test_list": ["assert first_odd([1,3,5]) == 1", "assert first_odd([2,4,1,3]) == 1", "assert first_odd ([8,9,1]) == 9"], "model_name": "openai/gpt-5", "generated_code": "def first_odd(numbers):\n    \"\"\"\n    Return the first odd number in the given iterable of numbers.\n    - Integers are checked directly (bools are ignored).\n    - Floats that represent whole numbers are considered by their integer value.\n    Returns None if no odd number is found.\n    \"\"\"\n    for n in numbers:\n        # Ignore booleans (since bool is a subclass of int in Python)\n        if isinstance(n, bool):\n            continue\n\n        if isinstance(n, int):\n            if n % 2 != 0:\n                return n\n        elif isinstance(n, float):\n            if n.is_integer() and int(n) % 2 != 0:\n                return int(n)\n    return None"}
{"benchmark": "mbpp", "task_id": "803", "prompt": "Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/", "reference_code": "def is_perfect_square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False", "test_imports": [], "test_list": ["assert not is_perfect_square(10)", "assert is_perfect_square(36)", "assert not is_perfect_square(14)", "assert is_perfect_square(14*14)", "assert not is_perfect_square(125)", "assert is_perfect_square(125*125)"], "model_name": "openai/gpt-5", "generated_code": "import math\n\ndef _isqrt_nonneg(n: int) -> int:\n    # Integer square root for non-negative integers (fallback if math.isqrt is unavailable)\n    if n < 2:\n        return n\n    x = n\n    y = (x + n // x) // 2\n    while y < x:\n        x, y = y, (y + n // y) // 2\n    return x\n\ndef is_perfect_square(x):\n    # Normalize input to integer if possible\n    if isinstance(x, float):\n        if not math.isfinite(x) or not x.is_integer():\n            return False\n        x = int(x)\n    elif not isinstance(x, int):\n        try:\n            x = int(x)\n        except Exception:\n            return False\n\n    if x < 0:\n        return False\n\n    try:\n        root = math.isqrt(x)\n    except AttributeError:\n        root = _isqrt_nonneg(x)\n\n    return root * root == x"}
{"benchmark": "mbpp", "task_id": "806", "prompt": "Write a function to find maximum run of uppercase characters in the given string.", "reference_code": "def max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)", "test_imports": [], "test_list": ["assert max_run_uppercase('GeMKSForGERksISBESt') == 5", "assert max_run_uppercase('PrECIOusMOVemENTSYT') == 6", "assert max_run_uppercase('GooGLEFluTTER') == 4"], "model_name": "openai/gpt-5", "generated_code": "def max_run_uppercase(s):\n    \"\"\"\n    Return the length of the longest consecutive run of ASCII uppercase letters (A-Z) in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    for ch in s:\n        if 'A' <= ch <= 'Z':\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run"}
{"benchmark": "mbpp", "task_id": "603", "prompt": "Write a function to get all lucid numbers smaller than or equal to a given integer.", "reference_code": "def get_ludic(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics", "test_imports": [], "test_list": ["assert get_ludic(10) == [1, 2, 3, 5, 7]", "assert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]", "assert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]"], "model_name": "openai/gpt-5", "generated_code": ""}
{"benchmark": "mbpp", "task_id": "781", "prompt": "Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php", "reference_code": "import math \ndef count_divisors(n) : \n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \n        if (n % i == 0) : \n            if( n // i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count % 2 == 0", "test_imports": [], "test_list": ["assert count_divisors(10)", "assert not count_divisors(100)", "assert count_divisors(125)"], "model_name": "openai/gpt-5", "generated_code": "def count_divisors(n):\n    \"\"\"\n    Check whether the count of positive divisors of n is even.\n    Returns True if even, False otherwise.\n    For n == 0, returns False (divisors are undefined/infinite).\n    \"\"\"\n    n = abs(n)\n    if n == 0:\n        return False\n    # The number of positive divisors of n is odd iff n is a perfect square.\n    # Therefore, it is even iff n is not a perfect square.\n    import math\n    r = math.isqrt(n)\n    return r * r != n"}
{"benchmark": "mbpp", "task_id": "780", "prompt": "Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/", "reference_code": "from itertools import combinations \ndef find_combinations(test_list):\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return (res) ", "test_imports": [], "test_list": ["assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]", "assert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]", "assert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]"], "model_name": "openai/gpt-5", "generated_code": ""}
{"benchmark": "mbpp", "task_id": "804", "prompt": "Write a function to check whether the product of numbers in a list is even or not.", "reference_code": "def is_product_even(arr): \n    for i in range(len(arr)): \n        if (arr[i] & 1) == 0: \n            return True\n    return False", "test_imports": [], "test_list": ["assert is_product_even([1,2,3])", "assert is_product_even([1,2,1,4])", "assert not is_product_even([1,1])"], "model_name": "openai/gpt-5", "generated_code": "def is_product_even(numbers):\n    \"\"\"\n    Determine if the product of numbers in the list is even.\n\n    Returns True if any element is even (which makes the product even),\n    otherwise returns False. For an empty list, returns False (since the\n    empty product is 1, which is odd).\n    \"\"\"\n    for n in numbers:\n        try:\n            if n % 2 == 0:\n                return True\n        except Exception:\n            # If n doesn't support modulo, ignore it\n            continue\n    return False"}
{"benchmark": "mbpp", "task_id": "808", "prompt": "Write a function to check if the given tuples contain the k or not.", "reference_code": "def check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return res ", "test_imports": [], "test_list": ["assert check_K((10, 4, 5, 6, 8), 6) == True", "assert check_K((1, 2, 3, 4, 5, 6), 7) == False", "assert check_K((7, 8, 9, 44, 11, 12), 11) == True"], "model_name": "openai/gpt-5", "generated_code": "from collections.abc import Iterable\n\ndef check_K(tuples_collection, k):\n    \"\"\"\n    Check if the given tuples contain the value k.\n\n    The function supports:\n    - A list/tuple of tuples/lists (checks each inner sequence for k).\n    - A single tuple/list (checks directly for k).\n\n    Returns:\n        bool: True if k is found, False otherwise.\n    \"\"\"\n    # If not iterable, cannot contain k\n    if not isinstance(tuples_collection, Iterable) or isinstance(tuples_collection, (str, bytes)):\n        return False\n\n    found_nested = False\n    for elem in tuples_collection:\n        # Check for nested tuple/list\n        if isinstance(elem, (tuple, list)):\n            found_nested = True\n            if k in elem:\n                return True\n\n    if found_nested:\n        return False\n\n    # Treat as a single tuple/list (not a collection of tuples)\n    try:\n        return k in tuples_collection\n    except Exception:\n        return False"}
{"benchmark": "mbpp", "task_id": "633", "prompt": "Write a python function to find the sum of xor of all pairs of numbers in the given list.", "reference_code": "def pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans ", "test_imports": [], "test_list": ["assert pair_xor_Sum([5,9,7,6],4) == 47", "assert pair_xor_Sum([7,3,5],3) == 12", "assert pair_xor_Sum([7,3],2) == 4"], "model_name": "openai/gpt-5", "generated_code": ""}
{"benchmark": "mbpp", "task_id": "627", "prompt": "Write a python function to find the smallest missing number from a sorted list of natural numbers.", "reference_code": "def find_First_Missing(array,start=0,end=None):\n    if end is None:\n      end = len(array) - 1   \n    if (start > end): \n        return end + 1\n    if (start != array[start]): \n        return start; \n    mid = int((start + end) / 2) \n    if (array[mid] == mid): \n        return find_First_Missing(array,mid+1,end) \n    return find_First_Missing(array,start,mid) ", "test_imports": [], "test_list": ["assert find_First_Missing([0,1,2,3]) == 4", "assert find_First_Missing([0,1,2,6,9]) == 3", "assert find_First_Missing([2,3,5,8,9]) == 0"], "model_name": "openai/gpt-5", "generated_code": ""}
{"benchmark": "mbpp", "task_id": "784", "prompt": "Write a function to find the product of first even and odd number of a given list.", "reference_code": "def mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)", "test_imports": [], "test_list": ["assert mul_even_odd([1,3,5,7,4,1,6,8])==4", "assert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2", "assert mul_even_odd([1,5,7,9,10])==10"], "model_name": "openai/gpt-5", "generated_code": "from typing import Iterable, Optional\n\ndef mul_even_odd(nums: Iterable[int]) -> Optional[int]:\n    \"\"\"\n    Return the product of the first even and the first odd numbers in the given iterable.\n    If either an even or an odd number is not present, return None.\n\n    Booleans are ignored (since bool is a subclass of int in Python).\n    \"\"\"\n    first_even = None\n    first_odd = None\n\n    for n in nums:\n        # Ignore booleans\n        if isinstance(n, bool):\n            continue\n        if isinstance(n, int):\n            if first_even is None and n % 2 == 0:\n                first_even = n\n            elif first_odd is None and n % 2 != 0:\n                first_odd = n\n            if first_even is not None and first_odd is not None:\n                break\n\n    if first_even is None or first_odd is None:\n        return None\n    return first_even * first_odd"}
{"benchmark": "mbpp", "task_id": "620", "prompt": "Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.", "reference_code": "def largest_subset(a):\n\tn = len(a)\n\tdp = [0 for i in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0;\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)", "test_imports": [], "test_list": ["assert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4", "assert largest_subset([10, 5, 3, 15, 20]) == 3", "assert largest_subset([18, 1, 3, 6, 13, 17]) == 4"], "model_name": "openai/gpt-5", "generated_code": ""}
{"benchmark": "mbpp", "task_id": "785", "prompt": "Write a function to convert tuple string to integer tuple.", "reference_code": "def tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) ", "test_imports": [], "test_list": ["assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)", "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)", "assert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)", "assert tuple_str_int(\"(7, 81, 19)\") == (7, 81, 19)"], "model_name": "openai/gpt-5", "generated_code": ""}
{"benchmark": "mbpp", "task_id": "765", "prompt": "Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/", "reference_code": "import math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) ", "test_imports": [], "test_list": ["assert is_polite(7) == 11", "assert is_polite(4) == 7", "assert is_polite(9) == 13"], "model_name": "openai/gpt-5", "generated_code": ""}
{"benchmark": "mbpp", "task_id": "739", "prompt": "Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/", "reference_code": "import math \ndef find_Index(n): \n    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)", "test_imports": [], "test_list": ["assert find_Index(2) == 4", "assert find_Index(3) == 14", "assert find_Index(4) == 45"], "model_name": "openai/gpt-5", "generated_code": ""}
{"benchmark": "mbpp", "task_id": "770", "prompt": "Write a python function to find the sum of fourth power of first n odd natural numbers.", "reference_code": "def odd_num_sum(n) : \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm ", "test_imports": [], "test_list": ["assert odd_num_sum(2) == 82", "assert odd_num_sum(3) == 707", "assert odd_num_sum(4) == 3108"], "model_name": "openai/gpt-5", "generated_code": ""}
{"benchmark": "mbpp", "task_id": "802", "prompt": "Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/", "reference_code": "def count_rotation(arr):   \n    for i in range (1,len(arr)): \n        if (arr[i] < arr[i - 1]): \n            return i  \n    return 0", "test_imports": [], "test_list": ["assert count_rotation([3,2,1]) == 1", "assert count_rotation([4,5,1,2,3]) == 2", "assert count_rotation([7,8,9,1,2,3]) == 3", "assert count_rotation([1,2,3]) == 0", "assert count_rotation([1,3,2]) == 2"], "model_name": "openai/gpt-5", "generated_code": ""}
