{"benchmark": "mbpp", "task_id": "606", "prompt": "Write a function to convert degrees to radians.", "reference_code": "import math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian", "test_imports": [], "test_list": ["assert radian_degree(90)==1.5707963267948966", "assert radian_degree(60)==1.0471975511965976", "assert radian_degree(120)==2.0943951023931953"], "model_name": "google/gemini-2.5-flash", "generated_code": "import math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    Args:\n        degrees: The angle in degrees.\n\n    Returns:\n        The angle in radians.\n    \"\"\"\n    return degrees * (math.pi / 180)"}
{"benchmark": "mbpp", "task_id": "604", "prompt": "Write a function to reverse words seperated by spaces in a given string.", "reference_code": "def reverse_words(s):\n        return ' '.join(reversed(s.split()))", "test_imports": [], "test_list": ["assert reverse_words(\"python program\")==(\"program python\")", "assert reverse_words(\"java language\")==(\"language java\")", "assert reverse_words(\"indian man\")==(\"man indian\")"], "model_name": "google/gemini-2.5-flash", "generated_code": "def reverse_words(s: str) -> str:\n    \"\"\"\n    Reverses words separated by spaces in a given string.\n\n    Args:\n        s: The input string.\n\n    Returns:\n        The string with words reversed.\n    \"\"\"\n    words = s.split(' ')\n    reversed_words = [word[::-1] for word in words]\n    return ' '.join(reversed_words)"}
{"benchmark": "mbpp", "task_id": "610", "prompt": "Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.", "reference_code": "def remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]", "test_imports": [], "test_list": ["assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]", "assert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]", "assert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]"], "model_name": "google/gemini-2.5-flash", "generated_code": "def remove_kth_element(input_list: list, k: int) -> list:\n    \"\"\"\n    Removes the k'th element from a list.\n\n    Args:\n        input_list: The list from which to remove an element.\n        k: The index of the element to remove (0-indexed).\n\n    Returns:\n        A new list with the k'th element removed.\n        If k is out of bounds, the original list is returned.\n    \"\"\"\n    if not (0 <= k < len(input_list)):\n        return list(input_list)  # Return a copy if k is out of bounds\n\n    return input_list[:k] + input_list[k+1:]"}
{"benchmark": "mbpp", "task_id": "605", "prompt": "Write a function to check if the given integer is a prime number.", "reference_code": "def prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False", "test_imports": [], "test_list": ["assert prime_num(13)==True", "assert prime_num(7)==True", "assert prime_num(-1010)==False"], "model_name": "google/gemini-2.5-flash", "generated_code": "def prime_num(number: int) -> bool:\n    \"\"\"\n    Checks if the given integer is a prime number.\n\n    A prime number is a natural number greater than 1 that has no positive divisors\n    other than 1 and itself.\n\n    Args:\n        number: An integer.\n\n    Returns:\n        True if the number is prime, False otherwise.\n    \"\"\"\n    if number <= 1:\n        return False\n    if number <= 3:\n        return True\n    if number % 2 == 0 or number % 3 == 0:\n        return False\n    i = 5\n    while i * i <= number:\n        if number % i == 0 or number % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"benchmark": "mbpp", "task_id": "602", "prompt": "Write a python function to find the first repeated character in a given string.", "reference_code": "def first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c", "test_imports": [], "test_list": ["assert first_repeated_char(\"abcabc\") == \"a\"", "assert first_repeated_char(\"abc\") == None", "assert first_repeated_char(\"123123\") == \"1\""], "model_name": "google/gemini-2.5-flash", "generated_code": "def first_repeated_char(s: str) -> str:\n    \"\"\"\n    Finds the first repeated character in a given string.\n\n    Args:\n        s: The input string.\n\n    Returns:\n        The first character that appears more than once in the string.\n        If no character is repeated, an empty string is returned.\n    \"\"\"\n    seen_chars = set()\n    for char in s:\n        if char in seen_chars:\n            return char\n        seen_chars.add(char)\n    return \"\""}
{"benchmark": "mbpp", "task_id": "615", "prompt": "Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.", "reference_code": "def average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result", "test_imports": [], "test_list": ["assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]", "assert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]", "assert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]"], "model_name": "google/gemini-2.5-flash", "generated_code": "def average_tuple(tuple_of_tuples: tuple) -> list:\n    \"\"\"\n    Calculates the average value for each inner tuple in a tuple of tuples.\n\n    Args:\n        tuple_of_tuples: A tuple where each element is another tuple of numbers.\n\n    Returns:\n        A list containing the average value for each inner tuple.\n        If an inner tuple is empty, its average is considered 0.\n        If the input tuple_of_tuples is empty, an empty list is returned.\n    \"\"\"\n    averages = []\n    for inner_tuple in tuple_of_tuples:\n        if inner_tuple:  # Check if the inner tuple is not empty\n            averages.append(sum(inner_tuple) / len(inner_tuple))\n        else:\n            averages.append(0)  # Average of an empty tuple is 0\n    return averages"}
{"benchmark": "mbpp", "task_id": "614", "prompt": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.", "reference_code": "def cummulative_sum(test_list):\n  res = sum(map(sum, test_list))\n  return (res)", "test_imports": [], "test_list": ["assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30", "assert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37", "assert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44"], "model_name": "google/gemini-2.5-flash", "generated_code": "def cummulative_sum(tuple_list):\n    \"\"\"\n    Calculates the cumulative sum of all numeric values within a list of tuples.\n\n    Args:\n        tuple_list: A list of tuples, where each tuple can contain numbers\n                    (integers or floats) and other data types.\n\n    Returns:\n        The cumulative sum of all numeric values found in the tuples.\n    \"\"\"\n    total_sum = 0\n    for tpl in tuple_list:\n        for item in tpl:\n            if isinstance(item, (int, float)):\n                total_sum += item\n    return total_sum"}
{"benchmark": "mbpp", "task_id": "619", "prompt": "Write a function to move all the numbers to the end of the given string.", "reference_code": "def move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) ", "test_imports": [], "test_list": ["assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'", "assert move_num('Avengers124Assemble') == 'AvengersAssemble124'", "assert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'"], "model_name": "google/gemini-2.5-flash", "generated_code": "def move_num(s: str) -> str:\n    \"\"\"\n    Moves all numbers to the end of the given string, maintaining the relative order\n    of both non-numeric characters and numeric characters.\n\n    Args:\n        s: The input string.\n\n    Returns:\n        A new string with all numbers moved to the end.\n    \"\"\"\n    non_numeric_chars = []\n    numeric_chars = []\n\n    for char in s:\n        if char.isdigit():\n            numeric_chars.append(char)\n        else:\n            non_numeric_chars.append(char)\n\n    return \"\".join(non_numeric_chars + numeric_chars)"}
{"benchmark": "mbpp", "task_id": "607", "prompt": "Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.", "reference_code": "import re\n\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)", "test_imports": [], "test_list": ["assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)", "assert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)", "assert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)"], "model_name": "google/gemini-2.5-flash", "generated_code": "import re\nfrom typing import Optional, Tuple\n\ndef find_literals(pattern: str, text: str) -> Optional[Tuple[str, int, int]]:\n    \"\"\"\n    Searches a string for a regex pattern.\n\n    Args:\n        pattern: The regex pattern to search for.\n        text: The string to search within.\n\n    Returns:\n        A tuple containing the matching substring, its start index, and its end index\n        if a match is found. Returns None if no match is found.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    return None"}
{"benchmark": "mbpp", "task_id": "616", "prompt": "Write a function which takes two tuples of the same length and performs the element wise modulo.", "reference_code": "def tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) ", "test_imports": [], "test_list": ["assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)", "assert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)", "assert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)"], "model_name": "google/gemini-2.5-flash", "generated_code": "def tuple_modulo(tuple1: tuple, tuple2: tuple) -> tuple:\n    \"\"\"\n    Performs element-wise modulo operation on two tuples of the same length.\n\n    Args:\n        tuple1: The first tuple of numbers.\n        tuple2: The second tuple of numbers.\n\n    Returns:\n        A new tuple containing the results of the element-wise modulo operation.\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    result = []\n    for i in range(len(tuple1)):\n        # Ensure tuple2[i] is not zero to avoid ZeroDivisionError\n        if tuple2[i] == 0:\n            raise ZeroDivisionError(f\"Cannot perform modulo by zero at index {i}\")\n        result.append(tuple1[i] % tuple2[i])\n    return tuple(result)"}
{"benchmark": "mbpp", "task_id": "612", "prompt": "Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.", "reference_code": "def merge(lst):  \n    return [list(ele) for ele in list(zip(*lst))] ", "test_imports": [], "test_list": ["assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]", "assert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]", "assert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]"], "model_name": "google/gemini-2.5-flash", "generated_code": "def merge(list_of_lists: list[list]) -> list[list]:\n    \"\"\"\n    Splits a list of lists (where each sublist has two elements) into two separate lists.\n\n    Args:\n        list_of_lists: A list of lists, where each sublist contains two elements.\n\n    Returns:\n        A list containing two lists. The first inner list contains all the first\n        elements from the input sublists, and the second inner list contains\n        all the second elements.\n    \"\"\"\n    first_elements = []\n    second_elements = []\n\n    for sublist in list_of_lists:\n        if len(sublist) == 2:\n            first_elements.append(sublist[0])\n            second_elements.append(sublist[1])\n        # Handle cases where sublist might not have exactly two elements\n        # For this problem, we assume valid input as per description.\n        # If strict validation is needed, an error could be raised or\n        # such sublists could be skipped.\n\n    return [first_elements, second_elements]"}
{"benchmark": "mbpp", "task_id": "618", "prompt": "Write a function to divide two lists element wise.", "reference_code": "def div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)", "test_imports": [], "test_list": ["assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]", "assert div_list([3,2],[1,4])==[3.0, 0.5]", "assert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]"], "model_name": "google/gemini-2.5-flash", "generated_code": "def div_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Divides two lists element-wise.\n\n    Args:\n        list1: The first list (numerator).\n        list2: The second list (denominator).\n\n    Returns:\n        A new list containing the element-wise division of list1 by list2.\n        If an element in list2 is zero, the corresponding result will be float('inf')\n        for positive numerator, float('-inf') for negative numerator, and NaN for zero numerator.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    result = []\n    for i in range(len(list1)):\n        numerator = list1[i]\n        denominator = list2[i]\n\n        if denominator == 0:\n            if numerator > 0:\n                result.append(float('inf'))\n            elif numerator < 0:\n                result.append(float('-inf'))\n            else:\n                result.append(float('nan'))  # 0/0 is NaN\n        else:\n            result.append(numerator / denominator)\n    return result"}
{"benchmark": "mbpp", "task_id": "611", "prompt": "Write a function which given a matrix represented as a list of lists returns the max of the n'th column.", "reference_code": "def max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) ", "test_imports": [], "test_list": ["assert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19", "assert max_of_nth([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) == 10", "assert max_of_nth([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1) == 11"], "model_name": "google/gemini-2.5-flash", "generated_code": "def max_of_nth(matrix: list[list[int]], n: int) -> int:\n    \"\"\"\n    Given a matrix represented as a list of lists, returns the maximum value\n    in the n-th column.\n\n    Args:\n        matrix: A list of lists of integers representing the matrix.\n                Assumes a non-empty matrix and that all rows have at least n+1 columns.\n        n: The index of the column to find the maximum value in.\n\n    Returns:\n        The maximum integer value found in the specified column.\n    \"\"\"\n    if not matrix:\n        raise ValueError(\"Matrix cannot be empty.\")\n    if not (0 <= n < len(matrix[0])):\n        raise IndexError(\"Column index 'n' is out of bounds for the matrix.\")\n\n    max_val = matrix[0][n]\n    for row in matrix:\n        if n >= len(row):\n            raise IndexError(f\"Row has fewer than {n+1} columns.\")\n        if row[n] > max_val:\n            max_val = row[n]\n    return max_val"}
{"benchmark": "mbpp", "task_id": "620", "prompt": "Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.", "reference_code": "def largest_subset(a):\n\tn = len(a)\n\tdp = [0 for i in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0;\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)", "test_imports": [], "test_list": ["assert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4", "assert largest_subset([10, 5, 3, 15, 20]) == 3", "assert largest_subset([18, 1, 3, 6, 13, 17]) == 4"], "model_name": "google/gemini-2.5-flash", "generated_code": "def largest_subset(nums: list[int]) -> int:\n    \"\"\"\n    Finds the size of the largest subset of a list of numbers so that every pair is divisible.\n\n    Args:\n        nums: A list of integers.\n\n    Returns:\n        The size of the largest divisible subset.\n    \"\"\"\n    if not nums:\n        return 0\n\n    # Sort the numbers to simplify divisibility checks.\n    # If a % b == 0 and b % c == 0, then a % c == 0.\n    # This property is crucial for dynamic programming.\n    nums.sort()\n\n    n = len(nums)\n    # dp[i] will store the size of the largest divisible subset ending with nums[i]\n    dp = [1] * n\n\n    # Iterate through each number to build up the dp array\n    for i in range(n):\n        # For each number nums[i], check all previous numbers nums[j]\n        for j in range(i):\n            # If nums[i] is divisible by nums[j], it means nums[i] can extend\n            # the divisible subset ending at nums[j].\n            if nums[i] % nums[j] == 0:\n                # Update dp[i] if including nums[i] creates a larger subset\n                # than what was previously found for nums[i].\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    # The maximum value in dp array is the size of the largest divisible subset\n    return max(dp) if dp else 0"}
{"benchmark": "mbpp", "task_id": "608", "prompt": "Write a python function to find nth bell number.", "reference_code": "def bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] ", "test_imports": [], "test_list": ["assert bell_Number(2) == 2", "assert bell_Number(3) == 5", "assert bell_Number(4) == 15"], "model_name": "google/gemini-2.5-flash", "generated_code": "def bell_Number(n: int) -> int:\n    \"\"\"\n    Calculates the nth Bell number.\n\n    The Bell number B_n is the number of partitions of a set of n elements.\n\n    Args:\n        n: The non-negative integer for which to calculate the Bell number.\n\n    Returns:\n        The nth Bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n\n    # Create a 2D array (triangle) to store Bell numbers\n    # bell[i][j] stores the number of partitions of a set of i elements\n    # into j non-empty subsets.\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n\n    # Base case: B(0,0) = 1 (one way to partition an empty set into zero subsets)\n    bell[0][0] = 1\n\n    # Fill the Bell triangle\n    for i in range(1, n + 1):\n        # The first element in each row is the last element of the previous row\n        # This corresponds to B(i, 0) = B(i-1, i-1)\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            # Recurrence relation: bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n\n    # The nth Bell number is the last element in the nth row\n    return bell[n][0]"}
{"benchmark": "mbpp", "task_id": "624", "prompt": "Write a python function to convert a given string to uppercase.", "reference_code": "def is_upper(string):\n  return (string.upper())", "test_imports": [], "test_list": ["assert is_upper(\"person\") ==\"PERSON\"", "assert is_upper(\"final\") == \"FINAL\"", "assert is_upper(\"Valid\") == \"VALID\""], "model_name": "google/gemini-2.5-flash", "generated_code": "def is_upper(input_string: str) -> str:\n    \"\"\"\n    Converts a given string to uppercase.\n\n    Args:\n        input_string: The string to convert.\n\n    Returns:\n        The uppercase version of the input string.\n    \"\"\"\n    return input_string.upper()"}
{"benchmark": "mbpp", "task_id": "623", "prompt": "Write a function to compute the n-th power of each number in a list.", "reference_code": "def nth_nums(nums,n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums", "test_imports": [], "test_list": ["assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]", "assert nth_nums([10,20,30],3)==([1000, 8000, 27000])", "assert nth_nums([12,15],5)==([248832, 759375])"], "model_name": "google/gemini-2.5-flash", "generated_code": "def nth_nums(nums: list[int], n: int) -> list[int]:\n    \"\"\"\n    Computes the n-th power of each number in a list.\n\n    Args:\n        nums: A list of integers.\n        n: The power to which each number should be raised.\n\n    Returns:\n        A new list containing each number from the input list raised to the power of n.\n    \"\"\"\n    return [num ** n for num in nums]"}
{"benchmark": "mbpp", "task_id": "625", "prompt": "Write a python function to interchange the first and last element in a given list.", "reference_code": "def swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp   \n    return newList ", "test_imports": [], "test_list": ["assert swap_List([1,2,3]) == [3,2,1]", "assert swap_List([1,2,3,4,4]) == [4,2,3,4,1]", "assert swap_List([4,5,6]) == [6,5,4]"], "model_name": "google/gemini-2.5-flash", "generated_code": "def swap_List(newlist):\n    \"\"\"\n    Interchanges the first and last element in a given list.\n\n    Args:\n        newlist: The list whose first and last elements need to be swapped.\n\n    Returns:\n        The list with the first and last elements swapped.\n        Returns the original list if it has less than two elements.\n    \"\"\"\n    if len(newlist) < 2:\n        return newlist\n\n    newlist[0], newlist[-1] = newlist[-1], newlist[0]\n    return newlist"}
{"benchmark": "mbpp", "task_id": "617", "prompt": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.", "reference_code": "def min_Jumps(steps, d): \n    (a, b) = steps\n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2", "test_imports": [], "test_list": ["assert min_Jumps((3,4),11)==3.5", "assert min_Jumps((3,4),0)==0", "assert min_Jumps((11,14),11)==1"], "model_name": "google/gemini-2.5-flash", "generated_code": "import math\n\ndef min_Jumps(d: int, jump_length: int) -> int:\n    \"\"\"\n    Calculates the minimum number of jumps required to reach a point (d, 0) from the origin (0, 0)\n    in a 2D plane, given a fixed jump length.\n\n    The jumps can be made in any direction.\n\n    Args:\n        d: The x-coordinate of the target point (d, 0).\n        jump_length: The fixed length of each jump.\n\n    Returns:\n        The minimum number of jumps required. Returns 0 if d is 0.\n        Returns -1 if it's impossible to reach the point (e.g., jump_length is 0 and d is not 0).\n    \"\"\"\n    if d == 0:\n        return 0\n    if jump_length <= 0:\n        return -1  # Cannot reach a non-zero 'd' with zero or negative jump length\n\n    # The problem can be simplified to a 1D problem.\n    # We need to cover a distance 'd' using jumps of length 'jump_length'.\n    # The minimum number of jumps is simply d / jump_length, rounded up.\n    # This is equivalent to math.ceil(d / jump_length).\n\n    # Since d and jump_length are integers, we can use integer division and modulo\n    # to achieve the same result as math.ceil for positive numbers.\n    # (d + jump_length - 1) // jump_length is a common way to compute ceil(d / jump_length)\n    # for positive integers d and jump_length.\n\n    # However, d can be negative. The problem statement implies reaching (d, 0) from origin,\n    # which means the absolute distance is |d|.\n    # Let's assume d represents the target x-coordinate, and we want to cover the distance |d|.\n    \n    abs_d = abs(d)\n    \n    return (abs_d + jump_length - 1) // jump_length"}
{"benchmark": "mbpp", "task_id": "628", "prompt": "Write a function to replace all spaces in the given string with '%20'.", "reference_code": "def replace_spaces(string):\n  return string.replace(\" \", \"%20\")", "test_imports": [], "test_list": ["assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'", "assert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'", "assert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'"], "model_name": "google/gemini-2.5-flash", "generated_code": "def replace_spaces(s: str) -> str:\n    \"\"\"\n    Replace all spaces in the given string with '%20'.\n\n    Args:\n        s: The input string.\n\n    Returns:\n        The string with spaces replaced by '%20'.\n    \"\"\"\n    return s.replace(\" \", \"%20\")"}
{"benchmark": "mbpp", "task_id": "622", "prompt": "Write a function to find the median of two sorted lists of same size.", "reference_code": "def get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2", "test_imports": [], "test_list": ["assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0", "assert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5", "assert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0"], "model_name": "google/gemini-2.5-flash", "generated_code": "def get_median(list1: list, list2: list) -> float:\n    \"\"\"\n    Finds the median of two sorted lists of the same size.\n\n    Args:\n        list1: The first sorted list.\n        list2: The second sorted list.\n\n    Returns:\n        The median of the two combined lists.\n    \"\"\"\n    n = len(list1)\n    i = 0  # Current index of list1\n    j = 0  # Current index of list2\n    m1 = -1  # To store the (n-1)-th element\n    m2 = -1  # To store the n-th element\n\n    # Iterate n times to find the middle two elements\n    for count in range(n + 1):\n        if i == n:  # All elements of list1 are processed\n            m1 = m2\n            m2 = list2[j]\n            j += 1\n        elif j == n:  # All elements of list2 are processed\n            m1 = m2\n            m2 = list1[i]\n            i += 1\n        elif list1[i] <= list2[j]:\n            m1 = m2\n            m2 = list1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = list2[j]\n            j += 1\n\n    return (m1 + m2) / 2.0"}
{"benchmark": "mbpp", "task_id": "626", "prompt": "Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.", "reference_code": "def triangle_area(r) :  \n    if r < 0 : \n        return None\n    return r * r ", "test_imports": [], "test_list": ["assert triangle_area(-1) == None", "assert triangle_area(0) == 0", "assert triangle_area(2) == 4"], "model_name": "google/gemini-2.5-flash", "generated_code": "def triangle_area(r: float) -> float:\n    \"\"\"\n    Calculates the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n    The largest triangle inscribed in a semicircle will have its base along the diameter\n    of the semicircle and its apex at the highest point of the semicircle.\n    The base of this triangle will be equal to the diameter (2 * r).\n    The height of this triangle will be equal to the radius (r).\n\n    Args:\n        r: The radius of the semicircle.\n\n    Returns:\n        The area of the largest inscribed triangle.\n    \"\"\"\n    if r < 0:\n        raise ValueError(\"Radius cannot be negative.\")\n    \n    # Base of the triangle is the diameter of the semicircle\n    base = 2 * r\n    # Height of the triangle is the radius of the semicircle\n    height = r\n    \n    # Area of a triangle = 0.5 * base * height\n    area = 0.5 * base * height\n    \n    return area"}
{"benchmark": "mbpp", "task_id": "629", "prompt": "Write a python function to find even numbers from a list of numbers.", "reference_code": "def Split(list): \n    return [num for num in list if num % 2 == 0]", "test_imports": [], "test_list": ["assert Split([1,2,3,4,5]) == [2,4]", "assert Split([4,5,6,7,8,0,1]) == [4,6,8,0]", "assert Split ([8,12,15,19]) == [8,12]"], "model_name": "google/gemini-2.5-flash", "generated_code": "def Split(list_of_numbers: list) -> list:\n    \"\"\"\n    Finds even numbers from a list of numbers.\n\n    Args:\n        list_of_numbers: A list of integers.\n\n    Returns:\n        A new list containing only the even numbers from the input list.\n    \"\"\"\n    even_numbers = []\n    for number in list_of_numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"}
{"benchmark": "mbpp", "task_id": "627", "prompt": "Write a python function to find the smallest missing number from a sorted list of natural numbers.", "reference_code": "def find_First_Missing(array,start=0,end=None):\n    if end is None:\n      end = len(array) - 1   \n    if (start > end): \n        return end + 1\n    if (start != array[start]): \n        return start; \n    mid = int((start + end) / 2) \n    if (array[mid] == mid): \n        return find_First_Missing(array,mid+1,end) \n    return find_First_Missing(array,start,mid) ", "test_imports": [], "test_list": ["assert find_First_Missing([0,1,2,3]) == 4", "assert find_First_Missing([0,1,2,6,9]) == 3", "assert find_First_Missing([2,3,5,8,9]) == 0"], "model_name": "google/gemini-2.5-flash", "generated_code": "def find_First_Missing(numbers):\n    \"\"\"\n    Finds the smallest missing natural number from a sorted list of natural numbers.\n\n    Args:\n        numbers: A sorted list of natural numbers (positive integers).\n\n    Returns:\n        The smallest missing natural number. If no number is missing,\n        it returns the next natural number after the last element in the list.\n        If the list is empty, it returns 1.\n    \"\"\"\n    if not numbers:\n        return 1\n\n    n = len(numbers)\n\n    # Check if the first element is not 1\n    if numbers[0] != 1:\n        return 1\n\n    # Iterate through the list to find the first missing number\n    for i in range(n - 1):\n        if numbers[i + 1] != numbers[i] + 1:\n            return numbers[i] + 1\n\n    # If no number is missing in between, the missing number is the next one after the last element\n    return numbers[n - 1] + 1"}
{"benchmark": "mbpp", "task_id": "632", "prompt": "Write a python function to move all zeroes to the end of the given list.", "reference_code": "def move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a", "test_imports": [], "test_list": ["assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]", "assert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]", "assert move_zero([0,1,0,1,1]) == [1,1,1,0,0]"], "model_name": "google/gemini-2.5-flash", "generated_code": "def move_zero(num_list: list) -> None:\n    \"\"\"\n    Moves all zeroes to the end of the given list in-place.\n\n    Args:\n        num_list: The list of numbers to modify.\n    \"\"\"\n    if not num_list:\n        return\n\n    non_zero_ptr = 0\n    for i in range(len(num_list)):\n        if num_list[i] != 0:\n            num_list[non_zero_ptr], num_list[i] = num_list[i], num_list[non_zero_ptr]\n            non_zero_ptr += 1"}
{"benchmark": "mbpp", "task_id": "631", "prompt": "Write a function to replace whitespaces with an underscore and vice versa in a given string.", "reference_code": "def replace_spaces(text):\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)", "test_imports": [], "test_list": ["assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'", "assert replace_spaces('The_Avengers') == 'The Avengers'", "assert replace_spaces('Fast and Furious') == 'Fast_and_Furious'"], "model_name": "google/gemini-2.5-flash", "generated_code": "def replace_spaces(text: str) -> str:\n    \"\"\"\n    Replaces whitespaces with an underscore and vice versa in a given string.\n\n    Args:\n        text: The input string.\n\n    Returns:\n        The modified string with whitespaces replaced by underscores and\n        underscores replaced by whitespaces.\n    \"\"\"\n    result_chars = []\n    for char in text:\n        if char == ' ':\n            result_chars.append('_')\n        elif char == '_':\n            result_chars.append(' ')\n        else:\n            result_chars.append(char)\n    return \"\".join(result_chars)"}
{"benchmark": "mbpp", "task_id": "630", "prompt": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.", "reference_code": "def adjac(ele, sub = []): \n  if not ele: \n     yield sub \n  else: \n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \n                for idx in adjac(ele[1:], sub + [j])] \ndef get_coordinates(test_tup):\n  return list(adjac(test_tup))", "test_imports": [], "test_list": ["assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]", "assert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]", "assert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]"], "model_name": "google/gemini-2.5-flash", "generated_code": "def get_coordinates(coordinate: tuple) -> list:\n    \"\"\"\n    Extracts all the adjacent coordinates of the given coordinate tuple.\n\n    Args:\n        coordinate: A tuple representing the (x, y) coordinate.\n\n    Returns:\n        A list of tuples, where each tuple represents an adjacent coordinate.\n    \"\"\"\n    x, y = coordinate\n    adjacent_coordinates = []\n\n    # Check all 8 possible adjacent positions\n    for dx in [-1, 0, 1]:\n        for dy in [-1, 0, 1]:\n            # Exclude the coordinate itself\n            if dx == 0 and dy == 0:\n                continue\n            adjacent_coordinates.append((x + dx, y + dy))\n\n    return adjacent_coordinates"}
{"benchmark": "mbpp", "task_id": "637", "prompt": "Write a function to check whether the given amount has no profit and no loss", "reference_code": "def noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False", "test_imports": [], "test_list": ["assert noprofit_noloss(1500,1200)==False", "assert noprofit_noloss(100,100)==True", "assert noprofit_noloss(2000,5000)==False"], "model_name": "google/gemini-2.5-flash", "generated_code": "def noprofit_noloss(actual_cost, sales_amount):\n  \"\"\"\n  Checks whether the given amount has no profit and no loss.\n\n  Args:\n    actual_cost: The actual cost of an item.\n    sales_amount: The sales amount of the item.\n\n  Returns:\n    True if there is no profit and no loss (actual_cost equals sales_amount),\n    False otherwise.\n  \"\"\"\n  return actual_cost == sales_amount"}
{"benchmark": "mbpp", "task_id": "603", "prompt": "Write a function to get all lucid numbers smaller than or equal to a given integer.", "reference_code": "def get_ludic(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics", "test_imports": [], "test_list": ["assert get_ludic(10) == [1, 2, 3, 5, 7]", "assert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]", "assert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]"], "model_name": "google/gemini-2.5-flash", "generated_code": "def get_ludic(n: int) -> list[int]:\n    \"\"\"\n    Returns a list of all Ludic numbers less than or equal to n.\n\n    A Ludic number is a natural number obtained by a sieve process similar to the Sieve of Eratosthenes.\n    The process starts with a list of natural numbers [1, 2, 3, 4, 5, ...].\n    1 is the first Ludic number.\n    Then, remove every 2nd number from the remaining list. The next remaining number is 3, which is the second Ludic number.\n    Then, remove every 3rd number from the remaining list. The next remaining number is 5, which is the third Ludic number.\n    And so on.\n\n    For example:\n    Initial list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    1 is Ludic.\n    Remove every 2nd number (2, 4, 6, 8, 10, 12, 14): [1, 3, 5, 7, 9, 11, 13, 15]\n    3 is Ludic.\n    Remove every 3rd number (9, 15): [1, 3, 5, 7, 11, 13]\n    5 is Ludic.\n    Remove every 5th number (none in this short list): [1, 3, 5, 7, 11, 13]\n    7 is Ludic.\n    ...\n\n    Args:\n        n: An integer.\n\n    Returns:\n        A list of Ludic numbers less than or equal to n.\n    \"\"\"\n    if n < 1:\n        return []\n\n    numbers = list(range(1, n + 1))\n    ludic_numbers = []\n    current_index = 0\n\n    while current_index < len(numbers):\n        ludic_num = numbers[current_index]\n        ludic_numbers.append(ludic_num)\n\n        if ludic_num == 1:\n            # For the first Ludic number (1), we don't remove any elements based on it.\n            # We just move to the next number in the list.\n            current_index += 1\n            continue\n\n        # Remove every ludic_num-th element from the *remaining* list\n        # The indices are 1-based for removal, so we need to adjust for 0-based list indexing.\n        # We iterate backwards to avoid issues with changing list size during removal.\n        to_remove_indices = []\n        for i in range(len(numbers)):\n            if (i + 1) % ludic_num == 0:\n                to_remove_indices.append(i)\n\n        # Remove elements from the list in reverse order of indices\n        for i in reversed(to_remove_indices):\n            if i < len(numbers):  # Ensure index is still valid\n                del numbers[i]\n\n        # After removal, the current_index might point to a different number or be out of bounds.\n        # We need to find the next number in the *modified* list.\n        # The next Ludic number will be the first element after the current Ludic number's original position\n        # that hasn't been removed.\n        # Since we always append the current ludic_num and then remove based on it,\n        # the next ludic number will be the element at the current_index in the *new* list.\n        # The current_index itself doesn't need to be incremented here, as the list shrinks.\n        # The loop condition `current_index < len(numbers)` will naturally handle termination.\n        pass\n\n    return ludic_numbers"}
{"benchmark": "mbpp", "task_id": "633", "prompt": "Write a python function to find the sum of xor of all pairs of numbers in the given list.", "reference_code": "def pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans ", "test_imports": [], "test_list": ["assert pair_xor_Sum([5,9,7,6],4) == 47", "assert pair_xor_Sum([7,3,5],3) == 12", "assert pair_xor_Sum([7,3],2) == 4"], "model_name": "google/gemini-2.5-flash", "generated_code": "def pair_xor_Sum(nums):\n    \"\"\"\n    Calculates the sum of XOR of all pairs of numbers in the given list.\n\n    Args:\n        nums: A list of integers.\n\n    Returns:\n        The sum of XOR of all pairs of numbers.\n    \"\"\"\n    n = len(nums)\n    total_xor_sum = 0\n\n    # Iterate through each bit position from 0 to 31 (assuming 32-bit integers)\n    for i in range(32):\n        # Count the number of elements with the i-th bit set\n        count_set_bit = 0\n        for num in nums:\n            if (num >> i) & 1:\n                count_set_bit += 1\n\n        # For each bit position, if there are 'count_set_bit' numbers with the bit set\n        # and (n - count_set_bit) numbers with the bit unset,\n        # then there will be count_set_bit * (n - count_set_bit) pairs\n        # where one number has the bit set and the other has it unset.\n        # For these pairs, the i-th bit of their XOR sum will be 1.\n        # The contribution of these pairs to the total XOR sum is\n        # count_set_bit * (n - count_set_bit) * (2^i).\n        total_xor_sum += count_set_bit * (n - count_set_bit) * (1 << i)\n\n    return total_xor_sum"}
{"benchmark": "mbpp", "task_id": "639", "prompt": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.", "reference_code": "def sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))", "test_imports": [], "test_list": ["assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16", "assert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10", "assert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6"], "model_name": "google/gemini-2.5-flash", "generated_code": "def sample_nam(names):\n    \"\"\"\n    Calculates the sum of the lengths of names in a list,\n    excluding names that start with a lowercase letter.\n\n    Args:\n        names: A list of strings (names).\n\n    Returns:\n        An integer representing the sum of the lengths of the filtered names.\n    \"\"\"\n    total_length = 0\n    for name in names:\n        if name and name[0].isupper():\n            total_length += len(name)\n    return total_length"}
{"benchmark": "mbpp", "task_id": "640", "prompt": "Write a function to remove the parenthesis and what is inbetween them from a string.", "reference_code": "import re\ndef remove_parenthesis(items):\n for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))", "test_imports": [], "test_list": ["assert remove_parenthesis([\"python (chrome)\"])==(\"python\")", "assert remove_parenthesis([\"string(.abc)\"])==(\"string\")", "assert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")"], "model_name": "google/gemini-2.5-flash", "generated_code": "def remove_parenthesis(text: str) -> str:\n    \"\"\"\n    Removes parentheses and the text within them from a string.\n\n    Args:\n        text: The input string.\n\n    Returns:\n        The string with parentheses and their contents removed.\n    \"\"\"\n    result = []\n    parenthesis_level = 0\n\n    for char in text:\n        if char == '(':\n            parenthesis_level += 1\n        elif char == ')':\n            if parenthesis_level > 0:\n                parenthesis_level -= 1\n            # If parenthesis_level is already 0, it means an unmatched ')'\n            # We still don't add it to the result.\n        elif parenthesis_level == 0:\n            result.append(char)\n\n    return \"\".join(result)"}
{"benchmark": "mbpp", "task_id": "638", "prompt": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.", "reference_code": "import math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))", "test_imports": [], "test_list": ["assert wind_chill(120,35)==40", "assert wind_chill(40,20)==19", "assert wind_chill(10,8)==6"], "model_name": "google/gemini-2.5-flash", "generated_code": "import math\n\ndef wind_chill(velocity, temperature):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    The formula for wind chill index (WCI) is:\n    WCI = 13.12 + 0.6215 * T - 11.37 * V^0.16 + 0.3965 * T * V^0.16\n\n    Where:\n    T = air temperature in Celsius\n    V = wind speed in kilometers per hour\n\n    Args:\n        velocity (float): Wind velocity in km/h.\n        temperature (float): Temperature in Celsius.\n\n    Returns:\n        int: The wind chill index rounded to the next integer.\n    \"\"\"\n    if velocity < 0.0 or temperature > 10.0:\n        return temperature  # Wind chill is not defined for these conditions, return temperature as per common practice.\n\n    # The formula is valid for temperatures equal to or less than 10°C\n    # and wind speeds greater than or equal to 4.8 km/h.\n    # For wind speeds less than 4.8 km/h, the wind chill index is generally considered to be the air temperature.\n    if velocity < 4.8:\n        return math.ceil(temperature)\n\n    wci = 13.12 + 0.6215 * temperature - 11.37 * (velocity**0.16) + 0.3965 * temperature * (velocity**0.16)\n    return math.ceil(wci)"}
{"benchmark": "mbpp", "task_id": "641", "prompt": "Write a function to find the nth nonagonal number.", "reference_code": "def is_nonagonal(n): \n\treturn int(n * (7 * n - 5) / 2) ", "test_imports": [], "test_list": ["assert is_nonagonal(10) == 325", "assert is_nonagonal(15) == 750", "assert is_nonagonal(18) == 1089"], "model_name": "google/gemini-2.5-flash", "generated_code": "def is_nonagonal(n: int) -> int:\n    \"\"\"\n    Calculates the nth nonagonal number.\n\n    A nonagonal number is a figurate number that represents a nonagon.\n    The formula for the nth nonagonal number is n * (7 * n - 5) / 2.\n\n    Args:\n        n: The position of the nonagonal number to find (n >= 1).\n\n    Returns:\n        The nth nonagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    return n * (7 * n - 5) // 2"}
{"benchmark": "mbpp", "task_id": "643", "prompt": "Write a function that checks if a strings contains 'z', except at the start and end of the word.", "reference_code": "import re\ndef text_match_wordz_middle(text):\n        return bool(re.search(r'\\Bz\\B',  text))", "test_imports": [], "test_list": ["assert text_match_wordz_middle(\"pythonzabc.\")==True", "assert text_match_wordz_middle(\"zxyabc.\")==False", "assert text_match_wordz_middle(\"  lang  .\")==False"], "model_name": "google/gemini-2.5-flash", "generated_code": "import re\n\ndef text_match_wordz_middle(word):\n  \"\"\"\n  Checks if a string contains 'z', except at the start and end of the word.\n\n  Args:\n    word: The string to check.\n\n  Returns:\n    True if 'z' is found in the middle of the word, False otherwise.\n  \"\"\"\n  return re.search(r'\\B[zZ]\\B', word) is not None"}
{"benchmark": "mbpp", "task_id": "635", "prompt": "Write a function to sort the given list.", "reference_code": "import heapq as hq\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]", "test_imports": [], "test_list": ["assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]", "assert heap_sort( [7, 1, 9, 5])==[1,5,7,9]"], "model_name": "google/gemini-2.5-flash", "generated_code": "def heap_sort(arr):\n    \"\"\"\n    Sorts a list of elements using the heap sort algorithm.\n\n    Args:\n        arr: The list of elements to be sorted.\n\n    Returns:\n        The sorted list.\n    \"\"\"\n    n = len(arr)\n\n    # Build a maxheap.\n    # Since the last parent will be at ((n//2)-1), we can start there.\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    # One by one extract elements\n    for i in range(n - 1, 0, -1):\n        # Move current root to end\n        arr[i], arr[0] = arr[0], arr[i]\n        # call max heapify on the reduced heap\n        heapify(arr, i, 0)\n    return arr\n\ndef heapify(arr, n, i):\n    \"\"\"\n    Heapifies a subtree rooted with node i.\n\n    Args:\n        arr: The list representing the heap.\n        n: The size of the heap.\n        i: The root index of the subtree to be heapified.\n    \"\"\"\n    largest = i  # Initialize largest as root\n    l = 2 * i + 1  # left = 2*i + 1\n    r = 2 * i + 2  # right = 2*i + 2\n\n    # See if left child of root exists and is greater than root\n    if l < n and arr[largest] < arr[l]:\n        largest = l\n\n    # See if right child of root exists and is greater than root\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n\n    # Change root, if needed\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]  # swap\n\n        # Heapify the root.\n        heapify(arr, n, largest)"}
{"benchmark": "mbpp", "task_id": "644", "prompt": "Write a python function to reverse an array upto a given position.", "reference_code": "def reverse_Array_Upto_K(input, k): \n  return (input[k-1::-1] + input[k:]) ", "test_imports": [], "test_list": ["assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]", "assert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]", "assert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]"], "model_name": "google/gemini-2.5-flash", "generated_code": "def reverse_Array_Upto_K(arr, k):\n    \"\"\"\n    Reverses an array up to a given position k (inclusive).\n\n    Args:\n        arr: The input list (array) to be modified.\n        k: The position up to which the array should be reversed.\n           k is 0-indexed.\n\n    Returns:\n        The modified list with elements from index 0 to k reversed.\n        If k is out of bounds (k < 0 or k >= len(arr)), the original\n        array is returned without modification.\n    \"\"\"\n    if not arr or k < 0 or k >= len(arr):\n        return arr\n\n    left = 0\n    right = k\n\n    while left < right:\n        arr[left], arr[right] = arr[right], arr[left]\n        left += 1\n        right -= 1\n    return arr"}
{"benchmark": "mbpp", "task_id": "720", "prompt": "Write a function to add a dictionary to the tuple. The output should be a tuple.", "reference_code": "def add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup) ", "test_imports": [], "test_list": ["assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})", "assert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})", "assert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})"], "model_name": "google/gemini-2.5-flash", "generated_code": "def add_dict_to_tuple(original_tuple, dict_to_add):\n    \"\"\"\n    Adds a dictionary to a tuple.\n\n    Args:\n        original_tuple: The original tuple.\n        dict_to_add: The dictionary to add.\n\n    Returns:\n        A new tuple with the dictionary appended.\n    \"\"\"\n    return original_tuple + (dict_to_add,)"}
{"benchmark": "mbpp", "task_id": "723", "prompt": "The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.", "reference_code": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result", "test_imports": [], "test_list": ["assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4", "assert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11", "assert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1", "assert count_same_pair([0, 1, 1, 2],[0, 1, 2, 2])==3"], "model_name": "google/gemini-2.5-flash", "generated_code": "def count_same_pair(list1, list2):\n    \"\"\"\n    Counts the number of indices where two lists of the same length have the same values.\n\n    Args:\n        list1: The first list.\n        list2: The second list.\n\n    Returns:\n        The number of indices where list1[i] == list2[i].\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"}
{"benchmark": "mbpp", "task_id": "724", "prompt": "Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.", "reference_code": "def power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])", "test_imports": [], "test_list": ["assert power_base_sum(2,100)==115", "assert power_base_sum(8,10)==37", "assert power_base_sum(8,15)==62", "assert power_base_sum(3,3)==9"], "model_name": "google/gemini-2.5-flash", "generated_code": "def power_base_sum(base, power):\n    \"\"\"\n    Calculates the sum of all digits of the base to the specified power.\n\n    Args:\n        base (int): The base number.\n        power (int): The power to which the base is raised.\n\n    Returns:\n        int: The sum of the digits of the result.\n    \"\"\"\n    result = base ** power\n    digit_sum = 0\n    for digit_char in str(result):\n        digit_sum += int(digit_char)\n    return digit_sum"}
{"benchmark": "mbpp", "task_id": "722", "prompt": "The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.", "reference_code": "def filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    ", "test_imports": [], "test_list": ["assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}", "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}", "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}"], "model_name": "google/gemini-2.5-flash", "generated_code": "def filter_data(students_data: dict, min_height: float, min_weight: float) -> dict:\n    \"\"\"\n    Filters students that have height and weight above the minimum.\n\n    Args:\n        students_data: A dictionary with a student name as a key and a tuple of\n                       (student_height, student_weight) as a value.\n        min_height: The minimal height for filtering.\n        min_weight: The minimal weight for filtering.\n\n    Returns:\n        A new dictionary containing only the students whose height and weight\n        are both above the specified minimums.\n    \"\"\"\n    filtered_students = {}\n    for name, (height, weight) in students_data.items():\n        if height > min_height and weight > min_weight:\n            filtered_students[name] = (height, weight)\n    return filtered_students"}
{"benchmark": "mbpp", "task_id": "725", "prompt": "Write a function to extract values between quotation marks \" \" of the given string.", "reference_code": "import re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))", "test_imports": [], "test_list": ["assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']", "assert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']", "assert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']", "assert extract_quotation(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") == []"], "model_name": "google/gemini-2.5-flash", "generated_code": "import re\n\ndef extract_quotation(text: str) -> list[str]:\n    \"\"\"\n    Extracts values between quotation marks \" \" from the given string.\n\n    Args:\n        text: The input string.\n\n    Returns:\n        A list of strings found between quotation marks.\n    \"\"\"\n    return re.findall(r'\"([^\"]*)\"', text)"}
{"benchmark": "mbpp", "task_id": "726", "prompt": "Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.", "reference_code": "def multiply_elements(test_tup):\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ", "test_imports": [], "test_list": ["assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)", "assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)", "assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)", "assert multiply_elements((12,)) == ()"], "model_name": "google/gemini-2.5-flash", "generated_code": "def multiply_elements(numbers_tuple: tuple) -> tuple:\n    \"\"\"\n    Multiplies adjacent elements in a tuple of numbers.\n\n    Args:\n        numbers_tuple: A tuple of numbers (t_1, ..., t_{N+1}).\n\n    Returns:\n        A tuple of length N where the i-th element is equal to t_i * t_{i+1}.\n    \"\"\"\n    if not numbers_tuple or len(numbers_tuple) < 2:\n        return ()\n\n    result = []\n    for i in range(len(numbers_tuple) - 1):\n        result.append(numbers_tuple[i] * numbers_tuple[i+1])\n    return tuple(result)"}
{"benchmark": "mbpp", "task_id": "728", "prompt": "Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].", "reference_code": "def sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list", "test_imports": [], "test_list": ["assert sum_list([10,20,30],[15,25,35])==[25,45,65]", "assert sum_list([1,2,3],[5,6,7])==[6,8,10]", "assert sum_list([15,20,30],[15,45,75])==[30,65,105]"], "model_name": "google/gemini-2.5-flash", "generated_code": "def sum_list(list1, list2):\n    \"\"\"\n    Takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n\n    Args:\n        list1 (list): The first list of numbers.\n        list2 (list): The second list of numbers.\n\n    Returns:\n        list: A new list where each element is the sum of the corresponding elements\n              from list1 and list2.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i] + list2[i])\n    return result"}
{"benchmark": "mbpp", "task_id": "730", "prompt": "Write a function to remove consecutive duplicates of a given list.", "reference_code": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)] ", "test_imports": [], "test_list": ["assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]", "assert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]", "assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']", "assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd', 'a', 'a'])==['a', 'b', 'c', 'd', 'a']"], "model_name": "google/gemini-2.5-flash", "generated_code": "def consecutive_duplicates(input_list):\n    \"\"\"\n    Removes consecutive duplicates from a given list.\n\n    Args:\n        input_list: A list of elements.\n\n    Returns:\n        A new list with consecutive duplicates removed.\n    \"\"\"\n    if not input_list:\n        return []\n\n    result = [input_list[0]]\n    for i in range(1, len(input_list)):\n        if input_list[i] != input_list[i - 1]:\n            result.append(input_list[i])\n    return result"}
{"benchmark": "mbpp", "task_id": "731", "prompt": "Write a function to find the lateral surface area of a cone given radius r and the height h.", "reference_code": "import math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA", "test_imports": [], "test_list": ["assert lateralsurface_cone(5,12)==204.20352248333654", "assert lateralsurface_cone(10,15)==566.3586699569488", "assert lateralsurface_cone(19,17)==1521.8090132193388"], "model_name": "google/gemini-2.5-flash", "generated_code": "import math\n\ndef lateralsurface_cone(r, h):\n  \"\"\"\n  Calculates the lateral surface area of a cone given its radius and height.\n\n  Args:\n    r: The radius of the cone's base.\n    h: The height of the cone.\n\n  Returns:\n    The lateral surface area of the cone.\n  \"\"\"\n  slant_height = math.sqrt(r**2 + h**2)\n  lateral_surface_area = math.pi * r * slant_height\n  return lateral_surface_area"}
{"benchmark": "mbpp", "task_id": "721", "prompt": "Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.", "reference_code": "def maxAverageOfPath(cost):\n  N = len(cost)\n  dp = [[0 for i in range(N + 1)] for j in range(N + 1)]\n  dp[0][0] = cost[0][0]\n  for i in range(1, N):\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  for j in range(1, N):\n    dp[0][j] = dp[0][j - 1] + cost[0][j]\n  for i in range(1, N):\n    for j in range(1, N):\n      dp[i][j] = max(dp[i - 1][j],\n                     dp[i][j - 1]) + cost[i][j]\n  return dp[N - 1][N - 1] / (2 * N - 1)", "test_imports": [], "test_list": ["assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2", "assert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2", "assert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2", "assert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8"], "model_name": "google/gemini-2.5-flash", "generated_code": "def maxAverageOfPath(matrix: list[list[int]]) -> float:\n    \"\"\"\n    Given a square matrix of size N*N, find a path from the top-left cell\n    to the bottom-right cell, moving only right or down, such that the\n    average cost of the cells in the path is maximized.\n\n    Args:\n        matrix: A list of lists representing the N*N matrix with integer costs.\n\n    Returns:\n        The maximum average cost of a path.\n    \"\"\"\n    n = len(matrix)\n    if n == 0:\n        return 0.0\n    if n == 1 and len(matrix[0]) == 1:\n        return float(matrix[0][0])\n\n    # The number of cells in any path from (0,0) to (n-1, n-1) is (n-1) + (n-1) + 1 = 2n - 1.\n    path_length = 2 * n - 1\n\n    # dp_sum[r][c] stores the maximum sum of costs to reach (r, c)\n    dp_sum = [[0] * n for _ in range(n)]\n\n    # Initialize the first cell\n    dp_sum[0][0] = matrix[0][0]\n\n    # Initialize the first row\n    for c in range(1, n):\n        dp_sum[0][c] = dp_sum[0][c - 1] + matrix[0][c]\n\n    # Initialize the first column\n    for r in range(1, n):\n        dp_sum[r][0] = dp_sum[r - 1][0] + matrix[r][0]\n\n    # Fill the rest of the dp_sum table\n    for r in range(1, n):\n        for c in range(1, n):\n            dp_sum[r][c] = max(dp_sum[r - 1][c], dp_sum[r][c - 1]) + matrix[r][c]\n\n    # The maximum sum to reach the bottom-right cell is dp_sum[n-1][n-1]\n    max_total_cost = dp_sum[n - 1][n - 1]\n\n    # The average is the total cost divided by the number of cells in the path\n    return float(max_total_cost) / path_length"}
{"benchmark": "mbpp", "task_id": "732", "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.", "reference_code": "import re\ndef replace_specialchar(text):\n return (re.sub(\"[ ,.]\", \":\", text))\n", "test_imports": [], "test_list": ["assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')", "assert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')", "assert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')"], "model_name": "google/gemini-2.5-flash", "generated_code": "import re\n\ndef replace_specialchar(text: str) -> str:\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots with a colon.\n\n    Args:\n        text: The input string.\n\n    Returns:\n        The string with spaces, commas, and dots replaced by colons.\n    \"\"\"\n    return re.sub(r'[ ,.]', ':', text)"}
{"benchmark": "mbpp", "task_id": "734", "prompt": "Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/", "reference_code": "def sum_Of_Subarray_Prod(arr):\n    ans = 0\n    res = 0\n    i = len(arr) - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)", "test_imports": [], "test_list": ["assert sum_Of_Subarray_Prod([1,2,3]) == 20", "assert sum_Of_Subarray_Prod([1,2]) == 5", "assert sum_Of_Subarray_Prod([1,2,3,4]) == 84"], "model_name": "google/gemini-2.5-flash", "generated_code": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Calculates the sum of products of all possible sublists of a given list.\n\n    Args:\n        arr: A list of numbers.\n\n    Returns:\n        The sum of products of all possible sublists.\n    \"\"\"\n    n = len(arr)\n    total_sum = 0\n\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum"}
{"benchmark": "mbpp", "task_id": "733", "prompt": "Write a function to find the index of the first occurrence of a given number in a sorted array.", "reference_code": "def find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result", "test_imports": [], "test_list": ["assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1", "assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2", "assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4"], "model_name": "google/gemini-2.5-flash", "generated_code": "def find_first_occurrence(arr: list[int], num: int) -> int:\n    \"\"\"\n    Finds the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n        arr: A sorted list of integers.\n        num: The integer to search for.\n\n    Returns:\n        The index of the first occurrence of 'num' in 'arr'.\n        Returns -1 if 'num' is not found in 'arr'.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    first_occurrence_index = -1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == num:\n            first_occurrence_index = mid\n            # Since we want the first occurrence, try to find it in the left half\n            right = mid - 1\n        elif arr[mid] < num:\n            left = mid + 1\n        else:  # arr[mid] > num\n            right = mid - 1\n\n    return first_occurrence_index"}
{"benchmark": "mbpp", "task_id": "737", "prompt": "Write a function to check whether the given string is starting with a vowel or not using regex.", "reference_code": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n\treturn re.search(regex, string)", "test_imports": [], "test_list": ["assert check_str(\"annie\")", "assert not check_str(\"dawood\")", "assert check_str(\"Else\")"], "model_name": "google/gemini-2.5-flash", "generated_code": "import re\n\ndef check_str(text):\n  \"\"\"\n  Checks if the given string starts with a vowel using regex.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    True if the string starts with a vowel (case-insensitive), False otherwise.\n  \"\"\"\n  return bool(re.match(r\"^[aeiouAEIOU]\", text))"}
{"benchmark": "mbpp", "task_id": "738", "prompt": "Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php", "reference_code": "def geometric_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)", "test_imports": [], "test_list": ["assert geometric_sum(7) == 1.9921875", "assert geometric_sum(4) == 1.9375", "assert geometric_sum(8) == 1.99609375"], "model_name": "google/gemini-2.5-flash", "generated_code": "def geometric_sum(n):\n    \"\"\"\n    Calculates the geometric sum of n-1.\n    The geometric sum is defined as 1 + 1/2 + 1/4 + ... + 1/(2^(n-1)).\n\n    Args:\n        n: An integer representing the number of terms in the sum.\n\n    Returns:\n        A float representing the geometric sum.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1 / (2**(n - 1)) + geometric_sum(n - 1)"}
{"benchmark": "mbpp", "task_id": "736", "prompt": "Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php", "reference_code": "import bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i", "test_imports": [], "test_list": ["assert left_insertion([1,2,4,5],6)==4", "assert left_insertion([1,2,4,5],3)==2", "assert left_insertion([1,2,4,5],7)==4"], "model_name": "google/gemini-2.5-flash", "generated_code": "def left_insertion(a, x, lo=0, hi=None):\n    \"\"\"\n    Locate the left insertion point for a specified value in sorted order.\n\n    This function returns an insertion point which comes before (to the left of)\n    any existing entries of x in a.\n\n    Args:\n        a (list): A sorted list.\n        x: The value to search for.\n        lo (int, optional): The lower bound of the search range. Defaults to 0.\n        hi (int, optional): The upper bound of the search range. Defaults to len(a).\n\n    Returns:\n        int: The index where x should be inserted to maintain sorted order.\n    \"\"\"\n    if lo < 0:\n        raise ValueError('lo must be non-negative')\n    if hi is None:\n        hi = len(a)\n\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if a[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid\n    return lo"}
{"benchmark": "mbpp", "task_id": "740", "prompt": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/", "reference_code": "def tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) ", "test_imports": [], "test_list": ["assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}", "assert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}", "assert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}"], "model_name": "google/gemini-2.5-flash", "generated_code": "def tuple_to_dict(tup):\n    \"\"\"\n    Convert a tuple to a key-value dictionary using adjacent elements.\n\n    Args:\n        tup (tuple): The input tuple. It should have an even number of elements.\n\n    Returns:\n        dict: A dictionary where adjacent elements from the tuple form key-value pairs.\n              Returns an empty dictionary if the input tuple is empty or has an odd number of elements.\n    \"\"\"\n    if not tup or len(tup) % 2 != 0:\n        return {}\n\n    result_dict = {}\n    for i in range(0, len(tup), 2):\n        result_dict[tup[i]] = tup[i+1]\n    return result_dict"}
{"benchmark": "mbpp", "task_id": "735", "prompt": "Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/", "reference_code": "def set_middle_bits(n):  \n    n |= n >> 1; \n    n |= n >> 2; \n    n |= n >> 4; \n    n |= n >> 8; \n    n |= n >> 16;  \n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n): \n    if (n == 1): \n        return 1\n    return n ^ set_middle_bits(n) ", "test_imports": [], "test_list": ["assert toggle_middle_bits(9) == 15", "assert toggle_middle_bits(10) == 12", "assert toggle_middle_bits(11) == 13", "assert toggle_middle_bits(0b1000001) == 0b1111111", "assert toggle_middle_bits(0b1001101) == 0b1110011"], "model_name": "google/gemini-2.5-flash", "generated_code": "def toggle_middle_bits(n: int) -> int:\n    \"\"\"\n    Toggles the bits of the number except the first and the last bit.\n\n    Args:\n        n: The input integer.\n\n    Returns:\n        The integer with its middle bits toggled.\n    \"\"\"\n    if n == 0:\n        return 0\n\n    # Find the position of the most significant bit (MSB)\n    # This is equivalent to floor(log2(n))\n    msb_pos = 0\n    temp_n = n\n    while temp_n > 1:\n        temp_n >>= 1\n        msb_pos += 1\n\n    # If n has only 1 or 2 bits, there are no \"middle\" bits to toggle.\n    # For example:\n    # 0 (000) -> msb_pos = -1 (handled by n==0)\n    # 1 (001) -> msb_pos = 0\n    # 2 (010) -> msb_pos = 1\n    # 3 (011) -> msb_pos = 1\n    # In these cases, the loop for toggling won't run, which is correct.\n\n    # Create a mask to toggle bits from position 1 to msb_pos - 1\n    # (0-indexed, so excluding the 0th bit and the msb_pos-th bit)\n    mask = 0\n    for i in range(1, msb_pos):\n        mask |= (1 << i)\n\n    return n ^ mask"}
{"benchmark": "mbpp", "task_id": "741", "prompt": "Write a python function to check whether all the characters are same or not.", "reference_code": "def all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True", "test_imports": [], "test_list": ["assert all_Characters_Same(\"python\") == False", "assert all_Characters_Same(\"aaa\") == True", "assert all_Characters_Same(\"data\") == False"], "model_name": "google/gemini-2.5-flash", "generated_code": "def all_Characters_Same(s: str) -> bool:\n    \"\"\"\n    Checks if all characters in a given string are the same.\n\n    Args:\n        s: The input string.\n\n    Returns:\n        True if all characters in the string are the same, False otherwise.\n        Returns True for an empty string.\n    \"\"\"\n    if not s:\n        return True\n    \n    first_char = s[0]\n    for char in s:\n        if char != first_char:\n            return False\n    return True"}
{"benchmark": "mbpp", "task_id": "744", "prompt": "Write a function to check if the given tuple has any none value or not.", "reference_code": "def check_none(test_tup):\n  res = any(map(lambda ele: ele is None, test_tup))\n  return res ", "test_imports": [], "test_list": ["assert check_none((10, 4, 5, 6, None)) == True", "assert check_none((7, 8, 9, 11, 14)) == False", "assert check_none((1, 2, 3, 4, None)) == True"], "model_name": "google/gemini-2.5-flash", "generated_code": "from typing import Tuple\n\ndef check_none(input_tuple: Tuple) -> bool:\n    \"\"\"\n    Checks if the given tuple has any None value.\n\n    Args:\n        input_tuple: The tuple to check.\n\n    Returns:\n        True if the tuple contains at least one None value, False otherwise.\n    \"\"\"\n    for item in input_tuple:\n        if item is None:\n            return True\n    return False"}
{"benchmark": "mbpp", "task_id": "742", "prompt": "Write a function to caluclate the area of a tetrahedron.", "reference_code": "import math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area", "test_imports": [], "test_list": ["assert area_tetrahedron(3)==15.588457268119894", "assert area_tetrahedron(20)==692.8203230275509", "assert area_tetrahedron(10)==173.20508075688772"], "model_name": "google/gemini-2.5-flash", "generated_code": "import math\n\ndef area_tetrahedron(s: float) -> float:\n    \"\"\"\n    Calculate the surface area of a regular tetrahedron given its side length.\n\n    A regular tetrahedron is a polyhedron composed of four equilateral triangular faces,\n    six straight edges, and four vertex corners.\n\n    The formula for the surface area of a regular tetrahedron with side length 's' is:\n    Area = sqrt(3) * s^2\n\n    Args:\n        s (float): The side length of the regular tetrahedron.\n\n    Returns:\n        float: The surface area of the regular tetrahedron.\n               Returns 0.0 if s is non-positive.\n    \"\"\"\n    if s <= 0:\n        return 0.0\n    return math.sqrt(3) * (s ** 2)"}
{"benchmark": "mbpp", "task_id": "745", "prompt": "Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php", "reference_code": "def divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]", "test_imports": [], "test_list": ["assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(20,25)==[22, 24]"], "model_name": "google/gemini-2.5-flash", "generated_code": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Finds numbers within a given range (startnum to endnum) where every number\n    is divisible by every digit it contains.\n\n    Args:\n        startnum (int): The starting number of the range (inclusive).\n        endnum (int): The ending number of the range (inclusive).\n\n    Returns:\n        list: A list of numbers that satisfy the condition.\n    \"\"\"\n    result = []\n    for num in range(startnum, endnum + 1):\n        s_num = str(num)\n        is_divisible = True\n        for digit_char in s_num:\n            digit = int(digit_char)\n            if digit == 0 or num % digit != 0:\n                is_divisible = False\n                break\n        if is_divisible:\n            result.append(num)\n    return result"}
{"benchmark": "mbpp", "task_id": "743", "prompt": "Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/", "reference_code": "def rotate_right(list, m):\n  result =  list[-m:] + list[:-m]\n  return result", "test_imports": [], "test_list": ["assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]", "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]", "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]"], "model_name": "google/gemini-2.5-flash", "generated_code": "def rotate_right(lst, n):\n    \"\"\"\n    Rotates a given list by a specified number of items to the right direction.\n\n    Args:\n        lst: The input list.\n        n: The number of positions to rotate to the right.\n\n    Returns:\n        A new list that is the rotated version of the input list.\n    \"\"\"\n    if not lst:\n        return []\n    \n    # Ensure n is within the bounds of the list length\n    n = n % len(lst)\n    \n    if n == 0:\n        return list(lst) # Return a copy if no rotation is needed\n\n    # Slice the list into two parts and concatenate them in reverse order\n    # The last 'n' elements go to the beginning, and the rest follow.\n    return lst[-n:] + lst[:-n]"}
{"benchmark": "mbpp", "task_id": "748", "prompt": "Write a function to put spaces between words starting with capital letters in a given string.", "reference_code": "import re\ndef capital_words_spaces(str1):\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)", "test_imports": [], "test_list": ["assert capital_words_spaces(\"Python\") == 'Python'", "assert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'", "assert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'"], "model_name": "google/gemini-2.5-flash", "generated_code": "def capital_words_spaces(str_arg):\n    \"\"\"\n    Puts spaces between words starting with capital letters in a given string.\n\n    Args:\n        str_arg: The input string.\n\n    Returns:\n        The modified string with spaces inserted.\n    \"\"\"\n    if not str_arg:\n        return \"\"\n\n    result = [str_arg[0]]\n    for char in str_arg[1:]:\n        if 'A' <= char <= 'Z':\n            result.append(' ')\n        result.append(char)\n    return \"\".join(result)"}
{"benchmark": "mbpp", "task_id": "746", "prompt": "Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.", "reference_code": "import math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    return (math.pi*r**2) * (a/360)", "test_imports": [], "test_list": ["assert sector_area(4,45)==6.283185307179586", "assert sector_area(9,45)==31.808625617596654", "assert sector_area(9,361)==None"], "model_name": "google/gemini-2.5-flash", "generated_code": "import math\n\ndef sector_area(radius: float, angle: float) -> float | None:\n    \"\"\"\n    Calculates the area of a circular sector.\n\n    Args:\n        radius: The radius of the circle.\n        angle: The central angle of the sector in degrees.\n\n    Returns:\n        The area of the sector if the angle is 360 degrees or less,\n        otherwise None.\n    \"\"\"\n    if angle > 360:\n        return None\n    \n    # Convert angle from degrees to radians\n    angle_rad = math.radians(angle)\n    \n    # Formula for the area of a sector: 0.5 * r^2 * theta (in radians)\n    area = 0.5 * (radius ** 2) * angle_rad\n    \n    return area"}
{"benchmark": "mbpp", "task_id": "749", "prompt": "Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/", "reference_code": "def sort_numeric_strings(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result", "test_imports": [], "test_list": ["assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]", "assert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]", "assert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]"], "model_name": "google/gemini-2.5-flash", "generated_code": "def sort_numeric_strings(list_of_strings):\n    \"\"\"\n    Sorts a given list of strings of numbers numerically.\n\n    Args:\n        list_of_strings: A list of strings, where each string represents a number.\n\n    Returns:\n        A new list containing the strings sorted numerically.\n    \"\"\"\n    return sorted(list_of_strings, key=int)"}
{"benchmark": "mbpp", "task_id": "750", "prompt": "Write a function to add the given tuple to the given list.", "reference_code": "def add_tuple(test_list, test_tup):\n  test_list += test_tup\n  return test_list", "test_imports": [], "test_list": ["assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]", "assert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]", "assert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]"], "model_name": "google/gemini-2.5-flash", "generated_code": "def add_tuple(my_list: list, my_tuple: tuple) -> list:\n    \"\"\"\n    Adds the given tuple to the given list.\n\n    Args:\n        my_list: The list to which the tuple will be added.\n        my_tuple: The tuple to be added to the list.\n\n    Returns:\n        The modified list with the tuple appended.\n    \"\"\"\n    my_list.append(my_tuple)\n    return my_list"}
{"benchmark": "mbpp", "task_id": "747", "prompt": "Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/", "reference_code": "def lcs_of_three(X, Y, Z): \n  m = len(X)\n  n = len(Y)\n  o = len(Z)\n  L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n  for i in range(m+1): \n\t  for j in range(n+1): \n\t\t  for k in range(o+1): \n\t\t\t  if (i == 0 or j == 0 or k == 0): \n\t\t\t\t  L[i][j][k] = 0\n\t\t\t  elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n\t\t\t\t  L[i][j][k] = L[i-1][j-1][k-1] + 1\n\t\t\t  else: \n\t\t\t\t  L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n  return L[m][n][o]", "test_imports": [], "test_list": ["assert lcs_of_three('AGGT12', '12TXAYB', '12XBA') == 2", "assert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels') == 5", "assert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea') == 3"], "model_name": "google/gemini-2.5-flash", "generated_code": "def lcs_of_three(s1: str, s2: str, s3: str) -> int:\n    \"\"\"\n    Finds the length of the longest common subsequence for three given strings.\n\n    Args:\n        s1: The first string.\n        s2: The second string.\n        s3: The third string.\n\n    Returns:\n        The length of the longest common subsequence.\n    \"\"\"\n    n1, n2, n3 = len(s1), len(s2), len(s3)\n\n    # dp[i][j][k] stores the length of LCS of s1[0...i-1], s2[0...j-1], s3[0...k-1]\n    dp = [[[0 for _ in range(n3 + 1)] for _ in range(n2 + 1)] for _ in range(n1 + 1)]\n\n    for i in range(1, n1 + 1):\n        for j in range(1, n2 + 1):\n            for k in range(1, n3 + 1):\n                if s1[i - 1] == s2[j - 1] and s2[j - 1] == s3[k - 1]:\n                    dp[i][j][k] = 1 + dp[i - 1][j - 1][k - 1]\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n\n    return dp[n1][n2][n3]"}
{"benchmark": "mbpp", "task_id": "752", "prompt": "Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...", "reference_code": "def jacobsthal_num(n): \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]", "test_imports": [], "test_list": ["assert jacobsthal_num(5) == 11", "assert jacobsthal_num(2) == 1", "assert jacobsthal_num(4) == 5", "assert jacobsthal_num(13) == 2731"], "model_name": "google/gemini-2.5-flash", "generated_code": "def jacobsthal_num(n: int) -> int:\n    \"\"\"\n    Calculates the nth Jacobsthal number.\n\n    The Jacobsthal numbers are a sequence of integers defined by the recurrence relation:\n    J(n) = J(n-1) + 2 * J(n-2)\n    with initial conditions J(0) = 0 and J(1) = 1.\n\n    Args:\n        n: The index of the Jacobsthal number to calculate (non-negative integer).\n\n    Returns:\n        The nth Jacobsthal number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, b + 2 * a\n        return b"}
{"benchmark": "mbpp", "task_id": "755", "prompt": "Write a function to find the second smallest number in a list.", "reference_code": "def second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]", "test_imports": [], "test_list": ["assert second_smallest([1, 2, -8, -2, 0, -2])==-2", "assert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5", "assert second_smallest([2,2])==None", "assert second_smallest([2,2,2])==None"], "model_name": "google/gemini-2.5-flash", "generated_code": "def second_smallest(numbers):\n    \"\"\"\n    Finds the second smallest number in a list.\n\n    Args:\n        numbers: A list of numbers.\n\n    Returns:\n        The second smallest number in the list.\n        Returns None if the list has fewer than two unique elements.\n    \"\"\"\n    if not numbers or len(numbers) < 2:\n        return None\n\n    # Remove duplicates and sort the list\n    unique_sorted_numbers = sorted(list(set(numbers)))\n\n    if len(unique_sorted_numbers) < 2:\n        return None\n    else:\n        return unique_sorted_numbers[1]"}
{"benchmark": "mbpp", "task_id": "751", "prompt": "Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/", "reference_code": "def check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)", "test_imports": [], "test_list": ["assert check_min_heap([1, 2, 3, 4, 5, 6]) == True", "assert check_min_heap([2, 3, 4, 5, 10, 15]) == True", "assert check_min_heap([2, 10, 4, 5, 3, 15]) == False"], "model_name": "google/gemini-2.5-flash", "generated_code": "def check_min_heap(arr: list) -> bool:\n    \"\"\"\n    Checks if the given array represents a min-heap.\n\n    A binary tree is a min-heap if:\n    1. It is a complete binary tree.\n    2. Every node's value is less than or equal to the value of its children.\n\n    In an array representation of a complete binary tree:\n    - The left child of a node at index `i` is at `2*i + 1`.\n    - The right child of a node at index `i` is at `2*i + 2`.\n\n    Args:\n        arr: A list of numbers representing the binary tree.\n\n    Returns:\n        True if the array represents a min-heap, False otherwise.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return True  # An empty array is considered a valid min-heap\n\n    # We only need to check nodes that have at least one child.\n    # The last non-leaf node is at index (n // 2) - 1.\n    # Nodes from (n // 2) to n-1 are leaf nodes and don't need checking.\n    for i in range(n // 2):\n        left_child_idx = 2 * i + 1\n        right_child_idx = 2 * i + 2\n\n        # Check if the current node is greater than its left child\n        if arr[i] > arr[left_child_idx]:\n            return False\n\n        # Check if the current node is greater than its right child (if it exists)\n        if right_child_idx < n and arr[i] > arr[right_child_idx]:\n            return False\n\n    return True"}
{"benchmark": "mbpp", "task_id": "753", "prompt": "Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases", "reference_code": "def min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) ", "test_imports": [], "test_list": ["assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]", "assert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]", "assert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]"], "model_name": "google/gemini-2.5-flash", "generated_code": "def min_k(test_list, K):\n    \"\"\"\n    Finds the minimum K records from a list of tuples.\n    The comparison is based on the first element of each tuple.\n\n    Args:\n        test_list (list): A list of tuples.\n        K (int): The number of minimum records to retrieve.\n\n    Returns:\n        list: A list containing the K minimum records, sorted by their first element.\n              If K is greater than the number of records, all records are returned.\n    \"\"\"\n    if not test_list or K <= 0:\n        return []\n\n    # Sort the list of tuples based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Return the first K elements\n    return test_list[:K]"}
{"benchmark": "mbpp", "task_id": "754", "prompt": "We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.", "reference_code": "def extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result", "test_imports": [], "test_list": ["assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]", "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]", "assert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]", "assert extract_index_list([1, 2, 3, 4, 6, 6, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[]"], "model_name": "google/gemini-2.5-flash", "generated_code": "def extract_index_list(l1: list, l2: list, l3: list) -> list:\n    \"\"\"\n    Finds common elements from three lists where an element is common if it\n    appears in all three lists under the same index.\n\n    Args:\n        l1: The first list.\n        l2: The second list.\n        l3: The third list.\n\n    Returns:\n        A list of common elements.\n    \"\"\"\n    common_elements = []\n    min_length = min(len(l1), len(l2), len(l3))\n\n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n\n    return common_elements"}
{"benchmark": "mbpp", "task_id": "756", "prompt": "Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php", "reference_code": "import re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False", "test_imports": [], "test_list": ["assert text_match_zero_one(\"ac\")==False", "assert text_match_zero_one(\"dc\")==False", "assert text_match_zero_one(\"abbbba\")==True", "assert text_match_zero_one(\"dsabbbba\")==True", "assert text_match_zero_one(\"asbbbba\")==False", "assert text_match_zero_one(\"abaaa\")==True"], "model_name": "google/gemini-2.5-flash", "generated_code": "import re\n\ndef text_match_zero_one(text):\n    \"\"\"\n    Checks if a string contains an 'a' followed by zero or one 'b'.\n\n    Args:\n      text: The string to check.\n\n    Returns:\n      A match object if a match is found, None otherwise.\n    \"\"\"\n    pattern = 'ab?'\n    return re.search(pattern, text)"}
{"benchmark": "mbpp", "task_id": "739", "prompt": "Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/", "reference_code": "import math \ndef find_Index(n): \n    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)", "test_imports": [], "test_list": ["assert find_Index(2) == 4", "assert find_Index(3) == 14", "assert find_Index(4) == 45"], "model_name": "google/gemini-2.5-flash", "generated_code": "import math\n\ndef find_Index(n: int) -> int:\n    \"\"\"\n    Finds the index of the smallest triangular number with n digits.\n\n    A triangular number is a number obtained by adding all positive integers\n    up to a given positive integer k. The formula for the k-th triangular\n    number is T_k = k * (k + 1) / 2.\n\n    The smallest n-digit number is 10^(n-1).\n    We need to find the smallest k such that T_k >= 10^(n-1).\n    k * (k + 1) / 2 >= 10^(n-1)\n    k^2 + k >= 2 * 10^(n-1)\n    k^2 + k - 2 * 10^(n-1) >= 0\n\n    We can use the quadratic formula to find the roots of k^2 + k - C = 0,\n    where C = 2 * 10^(n-1).\n    k = (-1 +/- sqrt(1 - 4 * 1 * (-C))) / 2\n    k = (-1 +/- sqrt(1 + 4C)) / 2\n\n    Since k must be positive, we take the positive root:\n    k = (-1 + sqrt(1 + 8 * 10^(n-1))) / 2\n\n    The smallest integer k that satisfies the inequality will be ceil(k_value).\n\n    Args:\n        n: The number of digits.\n\n    Returns:\n        The index (k) of the smallest triangular number with n digits.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Smallest n-digit number is 10^(n-1)\n    min_n_digit_number = 10**(n - 1)\n\n    # We need to find k such that k * (k + 1) / 2 >= min_n_digit_number\n    # k^2 + k - 2 * min_n_digit_number >= 0\n    # Using the quadratic formula for k^2 + k - C = 0, where C = 2 * min_n_digit_number\n    # k = (-1 + sqrt(1 + 8 * C)) / 2\n    # k = (-1 + sqrt(1 + 8 * 2 * min_n_digit_number)) / 2\n    # k = (-1 + sqrt(1 + 16 * min_n_digit_number)) / 2\n\n    # Let C_val = 2 * min_n_digit_number\n    C_val = 2 * min_n_digit_number\n    \n    # Calculate the positive root of k^2 + k - C_val = 0\n    # k_approx = (-1 + math.sqrt(1 + 4 * C_val)) / 2\n    # Note: The formula in the problem description and common derivation is k = (-1 + sqrt(1 + 8 * T_k)) / 2\n    # Here, T_k is the target value, which is min_n_digit_number.\n    # So, k_approx = (-1 + math.sqrt(1 + 8 * min_n_digit_number)) / 2\n\n    # Let's re-derive carefully:\n    # We want T_k >= 10^(n-1)\n    # k(k+1)/2 >= 10^(n-1)\n    # k^2 + k >= 2 * 10^(n-1)\n    # k^2 + k - 2 * 10^(n-1) >= 0\n    # Let f(k) = k^2 + k - 2 * 10^(n-1)\n    # We need the smallest integer k for which f(k) >= 0.\n    # The roots of f(k) = 0 are k = (-1 +/- sqrt(1 - 4 * 1 * (-2 * 10^(n-1)))) / 2\n    # k = (-1 +/- sqrt(1 + 8 * 10^(n-1))) / 2\n    # We are interested in the positive root:\n    k_float = (-1 + math.sqrt(1 + 8 * min_n_digit_number)) / 2\n\n    # The smallest integer k that satisfies the inequality will be ceil(k_float).\n    # We use math.ceil to get the smallest integer greater than or equal to k_float.\n    k_index = math.ceil(k_float)\n\n    return int(k_index)"}
{"benchmark": "mbpp", "task_id": "758", "prompt": "Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.", "reference_code": "def unique_sublists(list1):\n    result ={}\n    for l in  list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result", "test_imports": [], "test_list": ["assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}", "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}", "assert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}", "assert unique_sublists([['john']])=={('john',): 1}"], "model_name": "google/gemini-2.5-flash", "generated_code": "def unique_sublists(input_list: list) -> dict:\n    \"\"\"\n    Counts the occurrences of each sublist within a given list.\n    Each sublist is converted to a tuple to be used as a dictionary key.\n\n    Args:\n        input_list: A list that may contain other lists (sublists).\n\n    Returns:\n        A dictionary where keys are tuple representations of the sublists\n        and values are their respective counts.\n    \"\"\"\n    counts = {}\n    for item in input_list:\n        if isinstance(item, list):\n            # Convert the sublist to a tuple to make it hashable\n            sublist_tuple = tuple(item)\n            counts[sublist_tuple] = counts.get(sublist_tuple, 0) + 1\n    return counts"}
{"benchmark": "mbpp", "task_id": "760", "prompt": "Write a python function to check whether a list of numbers contains only one distinct element or not.", "reference_code": "def unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1", "test_imports": [], "test_list": ["assert unique_Element([1,1,1]) == True", "assert unique_Element([1,2,1,2]) == False", "assert unique_Element([1,2,3,4,5]) == False"], "model_name": "google/gemini-2.5-flash", "generated_code": "def unique_Element(input_list):\n    \"\"\"\n    Checks whether a list of numbers contains only one distinct element or not.\n\n    Args:\n        input_list: A list of numbers.\n\n    Returns:\n        True if the list contains only one distinct element, False otherwise.\n        Returns True for an empty list.\n    \"\"\"\n    if not input_list:\n        return True\n    \n    first_element = input_list[0]\n    for element in input_list:\n        if element != first_element:\n            return False\n    return True"}
{"benchmark": "mbpp", "task_id": "762", "prompt": "Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.", "reference_code": "def check_monthnumber_number(monthnum3):\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11", "test_imports": [], "test_list": ["assert check_monthnumber_number(6)==True", "assert check_monthnumber_number(2)==False", "assert check_monthnumber_number(12)==False"], "model_name": "google/gemini-2.5-flash", "generated_code": "def check_monthnumber_number(month_number: int) -> bool:\n    \"\"\"\n    Checks whether the given month number contains 30 days or not.\n    Months are given as numbers from 1 to 12.\n\n    Args:\n        month_number: An integer representing the month (1 for January, 12 for December).\n\n    Returns:\n        True if the month has 30 days, False otherwise.\n    \"\"\"\n    if month_number in (4, 6, 9, 11):\n        return True\n    else:\n        return False"}
{"benchmark": "mbpp", "task_id": "757", "prompt": "Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/", "reference_code": "def count_reverse_pairs(test_list):\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \n  return res", "test_imports": [], "test_list": ["assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2", "assert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == 1", "assert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == 2"], "model_name": "google/gemini-2.5-flash", "generated_code": "def count_reverse_pairs(arr):\n    \"\"\"\n    Counts the number of pairs of reverse strings in the given list.\n\n    Args:\n        arr: A list of strings.\n\n    Returns:\n        An integer representing the count of reverse string pairs.\n    \"\"\"\n    count = 0\n    seen = set()\n\n    for s in arr:\n        if s in seen:\n            continue\n        \n        reversed_s = s[::-1]\n        \n        if reversed_s != s and reversed_s in arr:\n            # To avoid double counting and counting a string with itself if it's a palindrome\n            # We add both the original and its reverse to 'seen' to ensure they are not processed again.\n            # This handles cases like ['ab', 'ba', 'ab'] where 'ab' and 'ba' form one pair.\n            # If 'ab' is processed, 'ba' is found. Both are added to 'seen'.\n            # When 'ba' is later encountered, it's skipped because it's in 'seen'.\n            # When the second 'ab' is encountered, it's skipped because it's in 'seen'.\n            count += 1\n            seen.add(s)\n            seen.add(reversed_s)\n        elif reversed_s == s:\n            # If the string is a palindrome, we still need to mark it as seen\n            # to avoid processing it multiple times if it appears more than once.\n            seen.add(s)\n\n    return count"}
{"benchmark": "mbpp", "task_id": "763", "prompt": "Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/", "reference_code": "def find_min_diff(arr,n): \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff ", "test_imports": [], "test_list": ["assert find_min_diff((1,5,3,19,18,25),6) == 1", "assert find_min_diff((4,3,2,6),4) == 1", "assert find_min_diff((30,5,20,9),4) == 4"], "model_name": "google/gemini-2.5-flash", "generated_code": "def find_min_diff(arr):\n    \"\"\"\n    Finds the minimum difference between any two elements in a given array.\n\n    Args:\n        arr: A list of numbers.\n\n    Returns:\n        The minimum absolute difference between any two elements in the array.\n        Returns 0 if the array has less than two elements.\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    arr.sort()\n    min_diff = float('inf')\n\n    for i in range(n - 1):\n        min_diff = min(min_diff, arr[i+1] - arr[i])\n\n    return min_diff"}
{"benchmark": "mbpp", "task_id": "764", "prompt": "Write a python function to count number of digits in a given string.", "reference_code": "def number_ctr(str):\n      number_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \n      return  number_ctr", "test_imports": [], "test_list": ["assert number_ctr('program2bedone') == 1", "assert number_ctr('3wonders') == 1", "assert number_ctr('123') == 3", "assert number_ctr('3wond-1ers2') == 3"], "model_name": "google/gemini-2.5-flash", "generated_code": "def number_ctr(input_string):\n    \"\"\"\n    Counts the number of digits in a given string.\n\n    Args:\n        input_string: The string to analyze.\n\n    Returns:\n        The count of digits in the string.\n    \"\"\"\n    count = 0\n    for char in input_string:\n        if '0' <= char <= '9':  # Check if the character is a digit\n            count += 1\n    return count"}
{"benchmark": "mbpp", "task_id": "765", "prompt": "Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/", "reference_code": "import math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) ", "test_imports": [], "test_list": ["assert is_polite(7) == 11", "assert is_polite(4) == 7", "assert is_polite(9) == 13"], "model_name": "google/gemini-2.5-flash", "generated_code": "def is_polite(n: int) -> int:\n    \"\"\"\n    Finds the nth polite number.\n\n    A polite number is a positive integer that can be expressed as the sum of two or more\n    consecutive positive integers.\n\n    The nth polite number is equivalent to the nth odd number.\n\n    Args:\n        n: The index of the polite number to find (1-indexed).\n\n    Returns:\n        The nth polite number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n    return 2 * n - 1"}
{"benchmark": "mbpp", "task_id": "766", "prompt": "Write a function to return a list of all pairs of consecutive items in a given list.", "reference_code": "def pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp", "test_imports": [], "test_list": ["assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]", "assert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]", "assert pair_wise([5,1,9,7,10])==[(5, 1), (1, 9), (9, 7), (7, 10)]", "assert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]"], "model_name": "google/gemini-2.5-flash", "generated_code": "def pair_wise(iterable):\n    \"\"\"\n    Returns a list of all pairs of consecutive items in a given list.\n\n    For example:\n    pair_wise([1, 2, 3, 4]) == [[1, 2], [2, 3], [3, 4]]\n    pair_wise([]) == []\n    pair_wise([1]) == []\n    \"\"\"\n    if not iterable or len(iterable) < 2:\n        return []\n\n    pairs = []\n    for i in range(len(iterable) - 1):\n        pairs.append([iterable[i], iterable[i+1]])\n    return pairs"}
{"benchmark": "mbpp", "task_id": "770", "prompt": "Write a python function to find the sum of fourth power of first n odd natural numbers.", "reference_code": "def odd_num_sum(n) : \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm ", "test_imports": [], "test_list": ["assert odd_num_sum(2) == 82", "assert odd_num_sum(3) == 707", "assert odd_num_sum(4) == 3108"], "model_name": "google/gemini-2.5-flash", "generated_code": "def odd_num_sum(n: int) -> int:\n    \"\"\"\n    Calculates the sum of the fourth power of the first n odd natural numbers.\n\n    Args:\n        n: The number of odd natural numbers to consider.\n\n    Returns:\n        The sum of the fourth power of the first n odd natural numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n\n    total_sum = 0\n    for i in range(1, n + 1):\n        odd_number = 2 * i - 1\n        total_sum += odd_number ** 4\n    return total_sum"}
{"benchmark": "mbpp", "task_id": "769", "prompt": "Write a python function to get the difference between two lists.", "reference_code": "def Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n ", "test_imports": [], "test_list": ["assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]", "assert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]", "assert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]"], "model_name": "google/gemini-2.5-flash", "generated_code": "def Diff(li1, li2):\n    \"\"\"\n    Calculates the difference between two lists.\n    The difference is defined as elements present in li1 but not in li2,\n    and elements present in li2 but not in li1.\n\n    Args:\n        li1 (list): The first list.\n        li2 (list): The second list.\n\n    Returns:\n        list: A new list containing elements that are unique to either li1 or li2.\n    \"\"\"\n    set1 = set(li1)\n    set2 = set(li2)\n    return list(set1.symmetric_difference(set2))"}
{"benchmark": "mbpp", "task_id": "767", "prompt": "Write a python function to count the number of pairs whose sum is equal to ‘sum’. The funtion gets as input a list of numbers and the sum,", "reference_code": "def get_pairs_count(arr, sum):\n    count = 0  \n    for i in range(len(arr)):\n        for j in range(i + 1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count", "test_imports": [], "test_list": ["assert get_pairs_count([1,1,1,1],2) == 6", "assert get_pairs_count([1,5,7,-1,5],6) == 3", "assert get_pairs_count([1,-2,3],1) == 1", "assert get_pairs_count([-1,-2,3],-3) == 1"], "model_name": "google/gemini-2.5-flash", "generated_code": "def get_pairs_count(arr, target_sum):\n    \"\"\"\n    Counts the number of pairs in an array whose sum is equal to a given target_sum.\n\n    Args:\n        arr (list): A list of numbers.\n        target_sum (int): The target sum for the pairs.\n\n    Returns:\n        int: The number of pairs whose sum is equal to target_sum.\n    \"\"\"\n    count = 0\n    freq_map = {}\n\n    for num in arr:\n        complement = target_sum - num\n        if complement in freq_map:\n            count += freq_map[complement]\n        \n        if num in freq_map:\n            freq_map[num] += 1\n        else:\n            freq_map[num] = 1\n            \n    return count"}
{"benchmark": "mbpp", "task_id": "771", "prompt": "Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/", "reference_code": "from collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack", "test_imports": [], "test_list": ["assert check_expression(\"{()}[{}]\") == True", "assert check_expression(\"{()}[{]\") == False", "assert check_expression(\"{()}[{}][]({})\") == True"], "model_name": "google/gemini-2.5-flash", "generated_code": "def check_expression(expression: str) -> bool:\n    \"\"\"\n    Check if the given expression has balanced parentheses, brackets, and braces.\n\n    Args:\n        expression: The input string expression.\n\n    Returns:\n        True if the expression is balanced, False otherwise.\n    \"\"\"\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    open_brackets = set(mapping.values())\n\n    for char in expression:\n        if char in open_brackets:\n            stack.append(char)\n        elif char in mapping:\n            if not stack or stack.pop() != mapping[char]:\n                return False\n    \n    return not stack"}
{"benchmark": "mbpp", "task_id": "772", "prompt": "Write a function to remove all the words with k length in the given string.", "reference_code": "def remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res) ", "test_imports": [], "test_list": ["assert remove_length('The person is most value tet', 3) == 'person is most value'", "assert remove_length('If you told me about this ok', 4) == 'If you me about ok'", "assert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'"], "model_name": "google/gemini-2.5-flash", "generated_code": "def remove_length(text: str, k: int) -> str:\n    \"\"\"\n    Removes all words of a specific length k from the given string.\n\n    Args:\n        text: The input string.\n        k: The length of words to remove.\n\n    Returns:\n        The string with words of length k removed, preserving original spacing\n        between remaining words.\n    \"\"\"\n    words = text.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)"}
{"benchmark": "mbpp", "task_id": "773", "prompt": "Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.", "reference_code": "import re\ndef occurance_substring(text,pattern):\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)", "test_imports": [], "test_list": ["assert occurance_substring('python programming, python language','python')==('python', 0, 6)", "assert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)", "assert occurance_substring('python programming,programming language','language')==('language', 31, 39)", "assert occurance_substring('c++ programming, c++ language','python')==None"], "model_name": "google/gemini-2.5-flash", "generated_code": "def occurance_substring(full_string: str, substring: str) -> list[tuple[int, str]] | None:\n    \"\"\"\n    Finds all occurrences and their positions of a substring within a full string.\n\n    Args:\n        full_string: The string to search within.\n        substring: The substring to search for.\n\n    Returns:\n        A list of tuples, where each tuple contains the starting index of an\n        occurrence and the substring itself. Returns None if no occurrences are found.\n    \"\"\"\n    if not full_string or not substring:\n        return None\n\n    occurrences = []\n    start_index = 0\n\n    while True:\n        index = full_string.find(substring, start_index)\n        if index == -1:\n            break\n        occurrences.append((index, substring))\n        start_index = index + 1  # Move to the next character after the current match\n\n    return occurrences if occurrences else None"}
{"benchmark": "mbpp", "task_id": "759", "prompt": "Write a function to check whether a given string is a decimal number with a precision of 2.", "reference_code": "def is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)", "test_imports": [], "test_list": ["assert is_decimal('123.11')==True", "assert is_decimal('e666.86')==False", "assert is_decimal('3.124587')==False", "assert is_decimal('1.11')==True", "assert is_decimal('1.1.11')==False"], "model_name": "google/gemini-2.5-flash", "generated_code": "import re\n\ndef is_decimal(s: str) -> bool:\n    \"\"\"\n    Checks whether a given string is a decimal number with a precision of 2.\n\n    A decimal number with a precision of 2 means:\n    - It can be an integer (e.g., \"123\", \"-45\").\n    - It can have a decimal point followed by exactly one or two digits (e.g., \"123.4\", \"-45.67\", \"0.0\").\n    - It cannot have more than two digits after the decimal point (e.g., \"123.456\" is invalid).\n    - It cannot have a decimal point with no digits after it (e.g., \"123.\" is invalid).\n    - It cannot have a decimal point followed by more than two digits (e.g., \"123.456\" is invalid).\n    - It cannot have a decimal point followed by zero digits (e.g., \"123.\" is invalid).\n    - It can start with an optional sign (+ or -).\n    - It cannot be just a sign (e.g., \"+\", \"-\").\n    - It cannot be empty.\n    - It cannot contain non-numeric characters other than a single decimal point and an optional leading sign.\n\n    Args:\n        s: The string to check.\n\n    Returns:\n        True if the string is a decimal number with a precision of 2, False otherwise.\n    \"\"\"\n    if not isinstance(s, str) or not s:\n        return False\n\n    # Regex explanation:\n    # ^: Start of the string\n    # [+-]?: Optional sign (+ or -)\n    # (?:\n    #   \\d+ : One or more digits (for integers or before a decimal point)\n    #   (?:\n    #     \\.\\d{1,2} : A decimal point followed by 1 or 2 digits\n    #   )? : The decimal part is optional\n    # | : OR\n    #   \\.\\d{1,2} : A decimal point followed by 1 or 2 digits (for numbers like \".5\" or \".55\")\n    # )\n    # $: End of the string\n\n    # This regex covers:\n    # - Integers: \"123\", \"-45\"\n    # - Decimals with 1 or 2 places: \"123.4\", \"-45.67\", \"0.0\", \"0.12\"\n    # - Numbers starting with a decimal point: \".5\", \"-.78\" (though less common, they are valid numeric representations)\n    # It explicitly disallows:\n    # - \"123.456\" (more than 2 decimal places)\n    # - \"123.\" (decimal point with no digits after)\n    # - \"abc\" (non-numeric)\n    # - \"\" (empty string)\n    # - \"+\" or \"-\" (just a sign)\n    # - \". \" (decimal point followed by space)\n\n    # The pattern `r\"^[+-]?(\\d+(\\.\\d{1,2})?|\\.\\d{1,2})$\"` is a robust way to handle this.\n    # Let's break it down:\n    # ^[+-]?: Optional sign at the beginning.\n    # (\n    #   \\d+          : One or more digits (e.g., \"123\")\n    #   (\\.\\d{1,2})? : Optionally followed by a decimal point and 1 or 2 digits (e.g., \".4\", \".67\")\n    # |            : OR\n    #   \\.\\d{1,2}    : A decimal point followed by 1 or 2 digits (e.g., \".5\", \".78\" - handles cases like \"0.5\" as \".5\")\n    # )\n    # $: End of the string.\n\n    pattern = r\"^[+-]?(\\d+(\\.\\d{1,2})?|\\.\\d{1,2})$\"\n    return re.fullmatch(pattern, s) is not None"}
{"benchmark": "mbpp", "task_id": "777", "prompt": "Write a python function to find the sum of non-repeated elements in a given list.", "reference_code": "def find_sum(arr): \n    arr.sort() \n    sum = arr[0] \n    for i in range(len(arr)-1): \n        if (arr[i] != arr[i+1]): \n            sum = sum + arr[i+1]   \n    return sum", "test_imports": [], "test_list": ["assert find_sum([1,2,3,1,1,4,5,6]) == 21", "assert find_sum([1,10,9,4,2,10,10,45,4]) == 71", "assert find_sum([12,10,9,45,2,10,10,45,10]) == 78"], "model_name": "google/gemini-2.5-flash", "generated_code": "def find_sum(numbers: list) -> int:\n    \"\"\"\n    Finds the sum of non-repeated elements in a given list.\n\n    Args:\n        numbers: A list of integers.\n\n    Returns:\n        The sum of elements that appear exactly once in the list.\n    \"\"\"\n    if not numbers:\n        return 0\n\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n\n    total_sum = 0\n    for num, count in counts.items():\n        if count == 1:\n            total_sum += num\n\n    return total_sum"}
{"benchmark": "mbpp", "task_id": "776", "prompt": "Write a function to count those characters which have vowels as their neighbors in the given string.", "reference_code": "def count_vowels(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res) ", "test_imports": [], "test_list": ["assert count_vowels('bestinstareels') == 7", "assert count_vowels('partofthejourneyistheend') == 12", "assert count_vowels('amazonprime') == 5"], "model_name": "google/gemini-2.5-flash", "generated_code": "def count_vowels(s: str) -> int:\n    \"\"\"\n    Counts the number of characters in a string that have vowels as their neighbors.\n\n    Args:\n        s: The input string.\n\n    Returns:\n        The count of characters with vowel neighbors.\n    \"\"\"\n    if not s or len(s) < 2:\n        return 0\n\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    n = len(s)\n\n    for i in range(n):\n        is_left_vowel = False\n        is_right_vowel = False\n\n        if i > 0 and s[i - 1] in vowels:\n            is_left_vowel = True\n        if i < n - 1 and s[i + 1] in vowels:\n            is_right_vowel = True\n\n        if is_left_vowel or is_right_vowel:\n            count += 1\n    return count"}
{"benchmark": "mbpp", "task_id": "779", "prompt": "Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.", "reference_code": "def unique_sublists(list1):\n    result ={}\n    for l in list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result", "test_imports": [], "test_list": ["assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}", "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}", "assert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}"], "model_name": "google/gemini-2.5-flash", "generated_code": "def unique_sublists(input_list: list) -> dict:\n    \"\"\"\n    Counts the number of occurrences of each unique sublist within a list.\n\n    Args:\n        input_list: A list that may contain other lists (sublists).\n\n    Returns:\n        A dictionary where keys are tuples (representing the unique sublists)\n        and values are their respective counts.\n    \"\"\"\n    counts = {}\n    for item in input_list:\n        if isinstance(item, list):\n            # Convert the list to a tuple to make it hashable for dictionary keys\n            sublist_tuple = tuple(item)\n            counts[sublist_tuple] = counts.get(sublist_tuple, 0) + 1\n    return counts"}
{"benchmark": "mbpp", "task_id": "775", "prompt": "Write a python function to check whether every odd index contains odd numbers of a given list.", "reference_code": "def odd_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))", "test_imports": [], "test_list": ["assert odd_position([2,1,4,3,6,7,6,3]) == True", "assert odd_position([4,1,2]) == True", "assert odd_position([1,2,3]) == False"], "model_name": "google/gemini-2.5-flash", "generated_code": "def odd_position(nums: list) -> bool:\n    \"\"\"\n    Checks whether every odd index contains odd numbers in a given list.\n\n    Args:\n        nums: A list of integers.\n\n    Returns:\n        True if every odd index contains an odd number, False otherwise.\n    \"\"\"\n    for i in range(len(nums)):\n        # Check if the index is odd (1, 3, 5, ...)\n        if (i + 1) % 2 != 0:  # i+1 because indices are 0-based, positions are 1-based\n            # If the index is odd, check if the number at that index is odd\n            if nums[i] % 2 == 0:\n                return False\n    return True"}
{"benchmark": "mbpp", "task_id": "778", "prompt": "Write a function to pack consecutive duplicates of a given list elements into sublists.", "reference_code": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]", "test_imports": [], "test_list": ["assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]", "assert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]", "assert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]"], "model_name": "google/gemini-2.5-flash", "generated_code": "def pack_consecutive_duplicates(l: list) -> list:\n    \"\"\"\n    Packs consecutive duplicates of a given list elements into sublists.\n\n    For example:\n    pack_consecutive_duplicates([1, 1, 2, 3, 3, 3, 4, 4, 5]) == [[1, 1], [2], [3, 3, 3], [4, 4], [5]]\n    pack_consecutive_duplicates([]) == []\n    pack_consecutive_duplicates([1, 2, 3]) == [[1], [2], [3]]\n    \"\"\"\n    if not l:\n        return []\n\n    packed_list = []\n    if not l:\n        return packed_list\n\n    current_sublist = [l[0]]\n    for i in range(1, len(l)):\n        if l[i] == l[i - 1]:\n            current_sublist.append(l[i])\n        else:\n            packed_list.append(current_sublist)\n            current_sublist = [l[i]]\n    packed_list.append(current_sublist)  # Append the last sublist\n\n    return packed_list"}
{"benchmark": "mbpp", "task_id": "781", "prompt": "Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php", "reference_code": "import math \ndef count_divisors(n) : \n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \n        if (n % i == 0) : \n            if( n // i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count % 2 == 0", "test_imports": [], "test_list": ["assert count_divisors(10)", "assert not count_divisors(100)", "assert count_divisors(125)"], "model_name": "google/gemini-2.5-flash", "generated_code": "def count_divisors(n):\n    \"\"\"\n    Checks whether the count of divisors of a given integer n is even.\n\n    Args:\n        n: An integer.\n\n    Returns:\n        True if the count of divisors of n is even, False otherwise.\n    \"\"\"\n    if n <= 0:\n        return False  # Or handle as an error, depending on requirements.\n                      # For positive integers, 1 has 1 divisor (odd).\n\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i * i == n:\n                count += 1\n            else:\n                count += 2\n    return count % 2 == 0"}
{"benchmark": "mbpp", "task_id": "780", "prompt": "Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/", "reference_code": "from itertools import combinations \ndef find_combinations(test_list):\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return (res) ", "test_imports": [], "test_list": ["assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]", "assert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]", "assert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]"], "model_name": "google/gemini-2.5-flash", "generated_code": "def find_combinations(test_list, K):\n    \"\"\"\n    Finds combinations of tuples from test_list such that the sum of the first elements\n    of the chosen tuples equals K.\n\n    Args:\n        test_list: A list of tuples, where each tuple contains at least two elements.\n                   The first element is an integer used for summing.\n        K: The target sum.\n\n    Returns:\n        A list of lists, where each inner list represents a combination of tuples\n        whose first elements sum up to K.\n    \"\"\"\n    n = len(test_list)\n    result = []\n\n    # Iterate through all possible combinations using bit manipulation\n    for i in range(1, 1 << n):  # From 1 to 2^n - 1 to exclude empty set\n        current_sum = 0\n        current_combination = []\n        for j in range(n):\n            if (i >> j) & 1:  # Check if j-th element is in the current combination\n                current_sum += test_list[j][0]\n                current_combination.append(test_list[j])\n\n        if current_sum == K:\n            result.append(current_combination)\n\n    return result"}
{"benchmark": "mbpp", "task_id": "784", "prompt": "Write a function to find the product of first even and odd number of a given list.", "reference_code": "def mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)", "test_imports": [], "test_list": ["assert mul_even_odd([1,3,5,7,4,1,6,8])==4", "assert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2", "assert mul_even_odd([1,5,7,9,10])==10"], "model_name": "google/gemini-2.5-flash", "generated_code": "def mul_even_odd(numbers: list[int]) -> int:\n    \"\"\"\n    Finds the product of the first even and first odd number in a list.\n\n    Args:\n        numbers: A list of integers.\n\n    Returns:\n        The product of the first even and first odd number found.\n        If no even number is found, returns 1.\n        If no odd number is found, returns 1.\n        If neither is found, returns 1.\n    \"\"\"\n    first_even = None\n    first_odd = None\n\n    for num in numbers:\n        if num % 2 == 0:\n            if first_even is None:\n                first_even = num\n        else:\n            if first_odd is None:\n                first_odd = num\n\n        if first_even is not None and first_odd is not None:\n            break\n\n    product = 1\n    if first_even is not None:\n        product *= first_even\n    if first_odd is not None:\n        product *= first_odd\n\n    return product"}
{"benchmark": "mbpp", "task_id": "785", "prompt": "Write a function to convert tuple string to integer tuple.", "reference_code": "def tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) ", "test_imports": [], "test_list": ["assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)", "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)", "assert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)", "assert tuple_str_int(\"(7, 81, 19)\") == (7, 81, 19)"], "model_name": "google/gemini-2.5-flash", "generated_code": "def tuple_str_int(tuple_str):\n    \"\"\"\n    Convert a tuple string to an integer tuple.\n\n    Args:\n        tuple_str (str): A string representation of a tuple, e.g., \"(1, 2, 3)\".\n\n    Returns:\n        tuple: An integer tuple.\n    \"\"\"\n    if not tuple_str:\n        return ()\n\n    # Remove parentheses and split by comma\n    elements_str = tuple_str.strip('()').split(',')\n\n    # Convert each element to an integer, handling empty strings if any\n    int_elements = []\n    for s in elements_str:\n        s_stripped = s.strip()\n        if s_stripped:  # Only convert if the string is not empty\n            int_elements.append(int(s_stripped))\n\n    return tuple(int_elements)"}
{"benchmark": "mbpp", "task_id": "787", "prompt": "Write a function that matches a string that has an a followed by three 'b'.", "reference_code": "import re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)", "test_imports": [], "test_list": ["assert not text_match_three(\"ac\")", "assert not text_match_three(\"dc\")", "assert text_match_three(\"abbbba\")", "assert text_match_three(\"caacabbbba\")"], "model_name": "google/gemini-2.5-flash", "generated_code": "import re\n\ndef text_match_three(text):\n  \"\"\"\n  Matches a string that has an 'a' followed by three 'b's.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    A match object if a match is found, None otherwise.\n  \"\"\"\n  pattern = 'ab{3}'\n  return re.search(pattern, text)"}
{"benchmark": "mbpp", "task_id": "786", "prompt": "Write a function to locate the right insertion point for a specified value in sorted order.", "reference_code": "import bisect\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)", "test_imports": [], "test_list": ["assert right_insertion([1,2,4,5],6)==4", "assert right_insertion([1,2,4,5],3)==2", "assert right_insertion([1,2,4,5],7)==4"], "model_name": "google/gemini-2.5-flash", "generated_code": "def right_insertion(arr, x):\n    \"\"\"\n    Locate the right insertion point for a specified value in sorted order.\n\n    The right insertion point is the index i such that all elements in arr[:i] are\n    less than or equal to x, and all elements in arr[i:] are greater than x.\n\n    Args:\n        arr (list): A sorted list of numbers.\n        x (int or float): The value to find the insertion point for.\n\n    Returns:\n        int: The index where x should be inserted to maintain sorted order,\n             such that all elements to its left are <= x.\n    \"\"\"\n    low = 0\n    high = len(arr)\n\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] <= x:\n            low = mid + 1\n        else:\n            high = mid\n    return low"}
{"benchmark": "mbpp", "task_id": "788", "prompt": "Write a function to create a new tuple from the given string and list.", "reference_code": "def new_tuple(test_list, test_str):\n  return tuple(test_list + [test_str])", "test_imports": [], "test_list": ["assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')", "assert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')", "assert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')"], "model_name": "google/gemini-2.5-flash", "generated_code": "def new_tuple(s: str, l: list) -> tuple:\n    \"\"\"\n    Creates a new tuple from the given string and list.\n\n    Args:\n        s: The input string.\n        l: The input list.\n\n    Returns:\n        A new tuple containing the string and the elements of the list.\n    \"\"\"\n    return (s,) + tuple(l)"}
{"benchmark": "mbpp", "task_id": "783", "prompt": "Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/", "reference_code": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v", "test_imports": [], "test_list": ["assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)", "assert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)", "assert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)"], "model_name": "google/gemini-2.5-flash", "generated_code": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert an RGB color value to HSV.\n\n    Args:\n        r (int): The red color value (0-255).\n        g (int): The green color value (0-255).\n        b (int): The blue color value (0-255).\n\n    Returns:\n        tuple: A tuple containing the H, S, and V values (0-360, 0-1, 0-1).\n    \"\"\"\n    r_prime = r / 255.0\n    g_prime = g / 255.0\n    b_prime = b / 255.0\n\n    c_max = max(r_prime, g_prime, b_prime)\n    c_min = min(r_prime, g_prime, b_prime)\n    delta = c_max - c_min\n\n    # Calculate Hue (H)\n    if delta == 0:\n        h = 0\n    elif c_max == r_prime:\n        h = 60 * (((g_prime - b_prime) / delta) % 6)\n    elif c_max == g_prime:\n        h = 60 * (((b_prime - r_prime) / delta) + 2)\n    elif c_max == b_prime:\n        h = 60 * (((r_prime - g_prime) / delta) + 4)\n    \n    # Ensure hue is non-negative\n    if h < 0:\n        h += 360\n\n    # Calculate Saturation (S)\n    if c_max == 0:\n        s = 0\n    else:\n        s = delta / c_max\n\n    # Calculate Value (V)\n    v = c_max\n\n    return h, s, v"}
{"benchmark": "mbpp", "task_id": "782", "prompt": "Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/", "reference_code": "def odd_length_sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum", "test_imports": [], "test_list": ["assert odd_length_sum([1,2,4]) == 14", "assert odd_length_sum([1,2,1,2]) == 15", "assert odd_length_sum([1,7]) == 8"], "model_name": "google/gemini-2.5-flash", "generated_code": "def odd_length_sum(arr: list[int]) -> int:\n    \"\"\"\n    Calculates the sum of all odd-length subarrays of a given array.\n\n    Args:\n        arr: A list of integers.\n\n    Returns:\n        The total sum of all odd-length subarrays.\n    \"\"\"\n    total_sum = 0\n    n = len(arr)\n\n    for i in range(n):\n        # Calculate the number of times arr[i] appears in odd-length subarrays\n        # For each element arr[i], it can be the start of (i + 1) subarrays\n        # and the end of (n - i) subarrays.\n        # The total number of subarrays containing arr[i] is (i + 1) * (n - i).\n        # Approximately half of these subarrays will have odd length and half even length.\n        # More precisely, the number of odd length subarrays containing arr[i] is:\n        # ceil(((i + 1) * (n - i)) / 2)\n        \n        # Number of choices for the left endpoint (0 to i)\n        left_count = i + 1\n        # Number of choices for the right endpoint (i to n-1)\n        right_count = n - i\n\n        # Total subarrays containing arr[i]\n        total_occurrences = left_count * right_count\n\n        # Number of odd-length subarrays containing arr[i]\n        # If total_occurrences is even, then odd_occurrences = total_occurrences / 2\n        # If total_occurrences is odd, then odd_occurrences = (total_occurrences + 1) / 2\n        # This can be simplified to (total_occurrences + 1) // 2 using integer division\n        odd_occurrences = (total_occurrences + 1) // 2\n\n        total_sum += arr[i] * odd_occurrences\n\n    return total_sum"}
{"benchmark": "mbpp", "task_id": "790", "prompt": "Write a python function to check whether every even index contains even numbers of a given list.", "reference_code": "def even_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))", "test_imports": [], "test_list": ["assert even_position([3,2,1]) == False", "assert even_position([1,2,3]) == False", "assert even_position([2,1,4]) == True"], "model_name": "google/gemini-2.5-flash", "generated_code": "def even_position(nums: list) -> bool:\n    \"\"\"\n    Checks whether every even index contains even numbers of a given list.\n\n    Args:\n        nums: A list of integers.\n\n    Returns:\n        True if every even index contains an even number, False otherwise.\n    \"\"\"\n    for i in range(0, len(nums), 2):  # Iterate through even indices\n        if nums[i] % 2 != 0:  # Check if the number at the even index is odd\n            return False\n    return True"}
{"benchmark": "mbpp", "task_id": "791", "prompt": "Write a function to remove tuples from the given tuple.", "reference_code": "def remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) ", "test_imports": [], "test_list": ["assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)", "assert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)", "assert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)", "assert remove_nested((3, 7, 9, (6, 8), (5,12), 12)) == (3, 7, 9, 12)"], "model_name": "google/gemini-2.5-flash", "generated_code": "def remove_nested(tup):\n    \"\"\"\n    Removes nested tuples from the given tuple.\n\n    Args:\n        tup: The input tuple, which may contain nested tuples.\n\n    Returns:\n        A new tuple with all nested tuples removed.\n    \"\"\"\n    result = []\n    for item in tup:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return tuple(result)"}
{"benchmark": "mbpp", "task_id": "794", "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.", "reference_code": "import re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        return re.search(patterns,  text)", "test_imports": [], "test_list": ["assert text_starta_endb(\"aabbbb\")", "assert not text_starta_endb(\"aabAbbbc\")", "assert not text_starta_endb(\"accddbbjjj\")"], "model_name": "google/gemini-2.5-flash", "generated_code": "import re\n\ndef text_starta_endb(text):\n  \"\"\"\n  Matches a string that has an 'a' followed by anything, ending in 'b'.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    A match object if a match is found, None otherwise.\n  \"\"\"\n  pattern = r'a.*b$'\n  return re.search(pattern, text)"}
{"benchmark": "mbpp", "task_id": "792", "prompt": "Write a python function to count the number of lists in a given number of lists.", "reference_code": "def count_list(input_list): \n    return len(input_list)", "test_imports": [], "test_list": ["assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4", "assert count_list([[1,2],[2,3],[4,5]]) == 3", "assert count_list([[1,0],[2,0]]) == 2"], "model_name": "google/gemini-2.5-flash", "generated_code": "def count_list(list_of_lists):\n    \"\"\"\n    Counts the number of lists within a given list of lists.\n\n    Args:\n        list_of_lists: A list where each element can be a list or any other data type.\n\n    Returns:\n        The total number of lists found within list_of_lists.\n    \"\"\"\n    count = 0\n    for item in list_of_lists:\n        if isinstance(item, list):\n            count += 1\n    return count"}
{"benchmark": "mbpp", "task_id": "793", "prompt": "Write a python function to find the last position of an element in a sorted array.", "reference_code": "def last(arr,x):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res", "test_imports": [], "test_list": ["assert last([1,2,3],1) == 0", "assert last([1,1,1,2,3,4],1) == 2", "assert last([2,3,2,3,6,8,9],3) == 3"], "model_name": "google/gemini-2.5-flash", "generated_code": "def last(arr, target):\n    \"\"\"\n    Finds the last position of an element in a sorted array.\n\n    Args:\n        arr: A sorted list of numbers.\n        target: The element to search for.\n\n    Returns:\n        The last index of the target element if found, otherwise -1.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    result = -1\n\n    while low <= high:\n        mid = low + (high - low) // 2\n        if arr[mid] == target:\n            result = mid\n            low = mid + 1  # Try to find a further occurrence in the right half\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result"}
{"benchmark": "mbpp", "task_id": "796", "prompt": "Write function to find the sum of all items in the given dictionary.", "reference_code": "def return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum", "test_imports": [], "test_list": ["assert return_sum({'a': 100, 'b':200, 'c':300}) == 600", "assert return_sum({'a': 25, 'b':18, 'c':45}) == 88", "assert return_sum({'a': 36, 'b':39, 'c':49}) == 124"], "model_name": "google/gemini-2.5-flash", "generated_code": "def return_sum(my_dict: dict) -> int:\n    \"\"\"\n    Calculates the sum of all numeric values in a dictionary.\n\n    Args:\n        my_dict: A dictionary where values can be numbers.\n\n    Returns:\n        The sum of all numeric values in the dictionary.\n    \"\"\"\n    total_sum = 0\n    for value in my_dict.values():\n        if isinstance(value, (int, float)):\n            total_sum += value\n    return total_sum"}
{"benchmark": "mbpp", "task_id": "798", "prompt": "Write a python function to find the sum of an array.", "reference_code": "def _sum(arr):  \n    sum=0\n    for i in arr: \n        sum = sum + i      \n    return(sum)  ", "test_imports": [], "test_list": ["assert _sum([1, 2, 3]) == 6", "assert _sum([15, 12, 13, 10]) == 50", "assert _sum([0, 1, 2]) == 3"], "model_name": "google/gemini-2.5-flash", "generated_code": "def _sum(arr):\n  \"\"\"\n  Calculates the sum of elements in a given array.\n\n  Args:\n    arr: A list or array of numbers.\n\n  Returns:\n    The sum of all elements in the array. Returns 0 for an empty array.\n  \"\"\"\n  total = 0\n  for item in arr:\n    total += item\n  return total"}
{"benchmark": "mbpp", "task_id": "800", "prompt": "Write a function to remove all whitespaces from a string.", "reference_code": "import re\ndef remove_all_spaces(text):\n return (re.sub(r'\\s+', '',text))", "test_imports": [], "test_list": ["assert remove_all_spaces('python  program')==('pythonprogram')", "assert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')", "assert remove_all_spaces('python                     program')==('pythonprogram')", "assert remove_all_spaces('   python                     program')=='pythonprogram'"], "model_name": "google/gemini-2.5-flash", "generated_code": "def remove_all_spaces(text: str) -> str:\n    \"\"\"\n    Removes all whitespace characters from a given string.\n\n    Args:\n        text: The input string.\n\n    Returns:\n        A new string with all whitespace characters removed.\n    \"\"\"\n    return text.replace(\" \", \"\").replace(\"\\t\", \"\").replace(\"\\n\", \"\").replace(\"\\r\", \"\").replace(\"\\f\", \"\").replace(\"\\v\", \"\")"}
{"benchmark": "mbpp", "task_id": "799", "prompt": "Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.", "reference_code": "def left_rotate(n,d):   \n    INT_BITS = 32\n    return (n << d)|(n >> (INT_BITS - d))  ", "test_imports": [], "test_list": ["assert left_rotate(16,2) == 64", "assert left_rotate(10,2) == 40", "assert left_rotate(99,3) == 792", "assert left_rotate(99,3) == 792", "assert left_rotate(0b0001,3) == 0b1000", "assert left_rotate(0b0101,3) == 0b101000", "assert left_rotate(0b11101,3) == 0b11101000"], "model_name": "google/gemini-2.5-flash", "generated_code": "def left_rotate(n: int, d: int) -> int:\n    \"\"\"\n    Rotates the bits of a 32-bit integer n to the left by d positions.\n\n    Args:\n        n: The 32-bit integer to rotate.\n        d: The number of positions to rotate left.\n\n    Returns:\n        The integer after left rotation.\n    \"\"\"\n    # Ensure d is within the range [0, 31]\n    d = d % 32\n\n    # Perform the left rotation\n    # (n << d) shifts the bits to the left.\n    # (n >> (32 - d)) shifts the bits that wrapped around back to the right.\n    # The bitwise OR combines these two parts.\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF"}
{"benchmark": "mbpp", "task_id": "801", "prompt": "Write a python function to count the number of equal numbers from three given integers.", "reference_code": "def test_three_equal(x,y,z):\n  result = set([x,y,z])\n  if len(result)==3:\n    return 0\n  else:\n    return 4-len(result)", "test_imports": [], "test_list": ["assert test_three_equal(1,1,1) == 3", "assert test_three_equal(-1,-2,-3) == 0", "assert test_three_equal(1,2,2) == 2"], "model_name": "google/gemini-2.5-flash", "generated_code": "def test_three_equal(a, b, c):\n    \"\"\"\n    Counts the number of equal numbers from three given integers.\n\n    Args:\n        a: The first integer.\n        b: The second integer.\n        c: The third integer.\n\n    Returns:\n        An integer representing the count of equal numbers.\n        - 3 if all three numbers are equal.\n        - 2 if exactly two numbers are equal.\n        - 0 if no two numbers are equal.\n    \"\"\"\n    if a == b and b == c:\n        return 3\n    elif a == b or b == c or a == c:\n        return 2\n    else:\n        return 0"}
{"benchmark": "mbpp", "task_id": "797", "prompt": "Write a python function to find the sum of all odd natural numbers within the range l and r.", "reference_code": "def sum_odd(n): \n    terms = (n + 1)//2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)", "test_imports": [], "test_list": ["assert sum_in_range(2,5) == 8", "assert sum_in_range(5,7) == 12", "assert sum_in_range(7,13) == 40"], "model_name": "google/gemini-2.5-flash", "generated_code": "def sum_in_range(l: int, r: int) -> int:\n    \"\"\"\n    Calculates the sum of all odd natural numbers within the range [l, r].\n\n    Args:\n        l: The lower bound of the range (inclusive).\n        r: The Upper bound of the range (inclusive).\n\n    Returns:\n        The sum of all odd natural numbers within the range [l, r].\n    \"\"\"\n    if l > r:\n        return 0\n\n    # Ensure l is odd. If l is even, increment it to the next odd number.\n    if l % 2 == 0:\n        l += 1\n\n    # If after adjustment l becomes greater than r, there are no odd numbers in the range.\n    if l > r:\n        return 0\n\n    # Calculate the number of odd terms in the arithmetic progression.\n    # The terms are l, l+2, l+4, ..., r (or r-1 if r is even).\n    # The formula for the nth term is a_n = a_1 + (n-1)d\n    # Here, a_1 = l, d = 2, a_n = r (or r-1)\n    # So, r = l + (n-1)2\n    # (r - l) / 2 = n - 1\n    # n = (r - l) / 2 + 1\n\n    # If r is even, the last odd number is r-1.\n    last_odd = r if r % 2 != 0 else r - 1\n\n    # If last_odd is less than l, it means there are no odd numbers in the range.\n    if last_odd < l:\n        return 0\n\n    n = (last_odd - l) // 2 + 1\n\n    # Sum of an arithmetic progression: S_n = n/2 * (a_1 + a_n)\n    total_sum = n * (l + last_odd) // 2\n\n    return total_sum"}
{"benchmark": "mbpp", "task_id": "802", "prompt": "Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/", "reference_code": "def count_rotation(arr):   \n    for i in range (1,len(arr)): \n        if (arr[i] < arr[i - 1]): \n            return i  \n    return 0", "test_imports": [], "test_list": ["assert count_rotation([3,2,1]) == 1", "assert count_rotation([4,5,1,2,3]) == 2", "assert count_rotation([7,8,9,1,2,3]) == 3", "assert count_rotation([1,2,3]) == 0", "assert count_rotation([1,3,2]) == 2"], "model_name": "google/gemini-2.5-flash", "generated_code": "def count_rotation(arr):\n    \"\"\"\n    Counts the number of rotations required to generate a sorted array.\n\n    Args:\n        arr: A list of integers representing the rotated sorted array.\n\n    Returns:\n        An integer representing the number of rotations. Returns 0 if the array\n        is already sorted or empty.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Find the index of the minimum element.\n    # In a rotated sorted array, the minimum element is the only one\n    # that is smaller than its previous element (if not the first element).\n    min_element_index = 0\n    for i in range(1, n):\n        if arr[i] < arr[min_element_index]:\n            min_element_index = i\n            break\n    \n    # The number of rotations is equal to the index of the minimum element.\n    return min_element_index"}
{"benchmark": "mbpp", "task_id": "803", "prompt": "Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/", "reference_code": "def is_perfect_square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False", "test_imports": [], "test_list": ["assert not is_perfect_square(10)", "assert is_perfect_square(36)", "assert not is_perfect_square(14)", "assert is_perfect_square(14*14)", "assert not is_perfect_square(125)", "assert is_perfect_square(125*125)"], "model_name": "google/gemini-2.5-flash", "generated_code": "def is_perfect_square(num: int) -> bool:\n    \"\"\"\n    Checks if a given number is a perfect square.\n\n    A perfect square is an integer that can be expressed as the product of two\n    equal integers. For example, 9 is a perfect square because 3 * 3 = 9.\n\n    Args:\n        num: The integer to check.\n\n    Returns:\n        True if the number is a perfect square, False otherwise.\n    \"\"\"\n    if num < 0:\n        return False\n    if num == 0:\n        return True\n\n    # Using binary search to find the square root\n    left, right = 1, num\n    while left <= right:\n        mid = (left + right) // 2\n        square = mid * mid\n        if square == num:\n            return True\n        elif square < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False"}
{"benchmark": "mbpp", "task_id": "807", "prompt": "Write a python function to find the first odd number in a given list of numbers.", "reference_code": "def first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd", "test_imports": [], "test_list": ["assert first_odd([1,3,5]) == 1", "assert first_odd([2,4,1,3]) == 1", "assert first_odd ([8,9,1]) == 9"], "model_name": "google/gemini-2.5-flash", "generated_code": "def first_odd(numbers: list) -> int or None:\n    \"\"\"\n    Finds the first odd number in a given list of numbers.\n\n    Args:\n        numbers: A list of integers.\n\n    Returns:\n        The first odd number found in the list, or None if no odd numbers are present.\n    \"\"\"\n    for number in numbers:\n        if number % 2 != 0:\n            return number\n    return None"}
{"benchmark": "mbpp", "task_id": "806", "prompt": "Write a function to find maximum run of uppercase characters in the given string.", "reference_code": "def max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)", "test_imports": [], "test_list": ["assert max_run_uppercase('GeMKSForGERksISBESt') == 5", "assert max_run_uppercase('PrECIOusMOVemENTSYT') == 6", "assert max_run_uppercase('GooGLEFluTTER') == 4"], "model_name": "google/gemini-2.5-flash", "generated_code": "def max_run_uppercase(s: str) -> int:\n    \"\"\"\n    Finds the maximum run of uppercase characters in the given string.\n\n    Args:\n        s: The input string.\n\n    Returns:\n        The length of the longest consecutive run of uppercase characters.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if 'A' <= char <= 'Z':  # Check if the character is an uppercase letter\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    max_run = max(max_run, current_run)  # Check after the loop for a run at the end of the string\n    return max_run"}
{"benchmark": "mbpp", "task_id": "805", "prompt": "Write a function that returns the list in a list of lists whose sum of elements is the highest.", "reference_code": "def max_sum_list(lists):\n return max(lists, key=sum)", "test_imports": [], "test_list": ["assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]", "assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10]", "assert max_sum_list([[2,3,1]])==[2,3,1]"], "model_name": "google/gemini-2.5-flash", "generated_code": "def max_sum_list(list_of_lists):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n\n    Args:\n        list_of_lists: A list of lists, where each inner list contains numeric elements.\n\n    Returns:\n        The inner list with the highest sum of elements. If the input list_of_lists\n        is empty, an empty list is returned. If multiple lists have the same highest sum,\n        the first one encountered is returned.\n    \"\"\"\n    if not list_of_lists:\n        return []\n\n    max_sum = float('-inf')\n    result_list = []\n\n    for sublist in list_of_lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result_list = sublist\n    return result_list"}
{"benchmark": "mbpp", "task_id": "808", "prompt": "Write a function to check if the given tuples contain the k or not.", "reference_code": "def check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return res ", "test_imports": [], "test_list": ["assert check_K((10, 4, 5, 6, 8), 6) == True", "assert check_K((1, 2, 3, 4, 5, 6), 7) == False", "assert check_K((7, 8, 9, 44, 11, 12), 11) == True"], "model_name": "google/gemini-2.5-flash", "generated_code": "def check_K(list_of_tuples, K):\n    \"\"\"\n    Checks if the given tuples contain the element K.\n\n    Args:\n        list_of_tuples: A list of tuples.\n        K: The element to search for.\n\n    Returns:\n        True if K is found in any of the tuples, False otherwise.\n    \"\"\"\n    for tpl in list_of_tuples:\n        if K in tpl:\n            return True\n    return False"}
{"benchmark": "mbpp", "task_id": "804", "prompt": "Write a function to check whether the product of numbers in a list is even or not.", "reference_code": "def is_product_even(arr): \n    for i in range(len(arr)): \n        if (arr[i] & 1) == 0: \n            return True\n    return False", "test_imports": [], "test_list": ["assert is_product_even([1,2,3])", "assert is_product_even([1,2,1,4])", "assert not is_product_even([1,1])"], "model_name": "google/gemini-2.5-flash", "generated_code": "def is_product_even(numbers: list[int]) -> bool:\n    \"\"\"\n    Checks whether the product of numbers in a list is even or not.\n\n    Args:\n        numbers: A list of integers.\n\n    Returns:\n        True if the product of the numbers is even, False otherwise.\n        Returns True if the list is empty (product is 1, which is odd, but\n        the problem statement implies checking for an even factor).\n        A more robust interpretation for an empty list might be to return False\n        or raise an error, but for typical \"is product even\" questions,\n        the presence of any even number makes the product even.\n        If the list is empty, the product is conventionally 1, which is odd.\n        However, if the intent is \"does it contain an even factor?\", then an empty list\n        would not. Given the common interpretation of such problems,\n        if there's at least one even number, the product is even.\n        If the list is empty, there are no even numbers, so the product (1) is odd.\n        Let's stick to the mathematical definition: product of an empty set is 1.\n        1 is not even. So, for an empty list, it should return False.\n    \"\"\"\n    if not numbers:\n        return False  # Product of an empty list is 1, which is odd.\n\n    for num in numbers:\n        if num == 0:\n            return True  # If any number is 0, the product is 0, which is even.\n        if num % 2 == 0:\n            return True  # If any number is even, the product will be even.\n\n    return False  # If no even numbers and no zeros were found, the product is odd."}
{"benchmark": "mbpp", "task_id": "809", "prompt": "Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.", "reference_code": "def check_smaller(test_tup1, test_tup2):\n  return all(x > y for x, y in zip(test_tup1, test_tup2))", "test_imports": [], "test_list": ["assert check_smaller((1, 2, 3), (2, 3, 4)) == False", "assert check_smaller((4, 5, 6), (3, 4, 5)) == True", "assert check_smaller((11, 12, 13), (10, 11, 12)) == True"], "model_name": "google/gemini-2.5-flash", "generated_code": "def check_smaller(tuple1: tuple, tuple2: tuple) -> bool:\n    \"\"\"\n    Checks if each element of the second tuple is smaller than its corresponding element in the first tuple.\n\n    Args:\n        tuple1: The first tuple of numbers.\n        tuple2: The second tuple of numbers.\n\n    Returns:\n        True if each element of tuple2 is smaller than its corresponding element in tuple1,\n        False otherwise. Returns False if the tuples have different lengths.\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        return False\n\n    for i in range(len(tuple1)):\n        if not (tuple2[i] < tuple1[i]):\n            return False\n    return True"}
