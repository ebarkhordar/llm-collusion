{"benchmark": "mbpp", "task_id": "629", "prompt": "Write a python function to find even numbers from a list of numbers.", "reference_code": "def Split(list): \n    return [num for num in list if num % 2 == 0]", "test_imports": [], "test_list": ["assert Split([1,2,3,4,5]) == [2,4]", "assert Split([4,5,6,7,8,0,1]) == [4,6,8,0]", "assert Split ([8,12,15,19]) == [8,12]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def Split(numbers):\n    \"\"\"\n    Find even numbers from a list of numbers.\n    \n    Args:\n        numbers: A list of numbers\n        \n    Returns:\n        A list of even numbers from the input list\n    \"\"\"\n    return [num for num in numbers if num % 2 == 0]"}
{"benchmark": "mbpp", "task_id": "612", "prompt": "Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.", "reference_code": "def merge(lst):  \n    return [list(ele) for ele in list(zip(*lst))] ", "test_imports": [], "test_list": ["assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]", "assert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]", "assert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def merge(list_of_lists):\n    if not list_of_lists:\n        return [[], []]\n    \n    first_elements = [sublist[0] for sublist in list_of_lists]\n    second_elements = [sublist[1] for sublist in list_of_lists]\n    \n    return [first_elements, second_elements]"}
{"benchmark": "mbpp", "task_id": "623", "prompt": "Write a function to compute the n-th power of each number in a list.", "reference_code": "def nth_nums(nums,n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums", "test_imports": [], "test_list": ["assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]", "assert nth_nums([10,20,30],3)==([1000, 8000, 27000])", "assert nth_nums([12,15],5)==([248832, 759375])"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n    \n    Args:\n        nums: A list of numbers\n        n: The power to raise each number to\n    \n    Returns:\n        A list containing each number from nums raised to the power n\n    \"\"\"\n    return [num ** n for num in nums]"}
{"benchmark": "mbpp", "task_id": "628", "prompt": "Write a function to replace all spaces in the given string with '%20'.", "reference_code": "def replace_spaces(string):\n  return string.replace(\" \", \"%20\")", "test_imports": [], "test_list": ["assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'", "assert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'", "assert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def replace_spaces(s: str) -> str:\n    return s.replace(' ', '%20')"}
{"benchmark": "mbpp", "task_id": "624", "prompt": "Write a python function to convert a given string to uppercase.", "reference_code": "def is_upper(string):\n  return (string.upper())", "test_imports": [], "test_list": ["assert is_upper(\"person\") ==\"PERSON\"", "assert is_upper(\"final\") == \"FINAL\"", "assert is_upper(\"Valid\") == \"VALID\""], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def is_upper(s):\n    \"\"\"Convert a given string to uppercase.\"\"\"\n    return s.upper()"}
{"benchmark": "mbpp", "task_id": "619", "prompt": "Write a function to move all the numbers to the end of the given string.", "reference_code": "def move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) ", "test_imports": [], "test_list": ["assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'", "assert move_num('Avengers124Assemble') == 'AvengersAssemble124'", "assert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def move_num(s):\n    \"\"\"\n    Move all numbers to the end of the given string.\n    \n    Args:\n        s: A string containing letters and numbers\n        \n    Returns:\n        A string with all non-numeric characters first, followed by all numeric characters\n    \"\"\"\n    non_digits = \"\"\n    digits = \"\"\n    \n    for char in s:\n        if char.isdigit():\n            digits += char\n        else:\n            non_digits += char\n    \n    return non_digits + digits"}
{"benchmark": "mbpp", "task_id": "607", "prompt": "Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.", "reference_code": "import re\n\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)", "test_imports": [], "test_list": ["assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)", "assert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)", "assert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "import re\n\ndef find_literals(pattern, string):\n    \"\"\"\n    Search a string for a regex pattern and return the matching substring,\n    start index, and end index.\n    \n    Args:\n        pattern: A regex pattern string\n        string: The string to search in\n        \n    Returns:\n        A tuple of (matching_substring, start_index, end_index) if found,\n        or None if no match is found\n    \"\"\"\n    match = re.search(pattern, string)\n    if match:\n        return (match.group(), match.start(), match.end())\n    return None"}
{"benchmark": "mbpp", "task_id": "611", "prompt": "Write a function which given a matrix represented as a list of lists returns the max of the n'th column.", "reference_code": "def max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) ", "test_imports": [], "test_list": ["assert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19", "assert max_of_nth([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) == 10", "assert max_of_nth([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1) == 11"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def max_of_nth(matrix, n):\n    \"\"\"\n    Given a matrix represented as a list of lists, returns the max of the n'th column.\n    \n    Args:\n        matrix: A list of lists representing a matrix\n        n: The column index (0-based)\n    \n    Returns:\n        The maximum value in the n'th column\n    \"\"\"\n    if not matrix or n < 0:\n        return None\n    \n    column_values = [row[n] for row in matrix if n < len(row)]\n    \n    if not column_values:\n        return None\n    \n    return max(column_values)"}
{"benchmark": "mbpp", "task_id": "618", "prompt": "Write a function to divide two lists element wise.", "reference_code": "def div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)", "test_imports": [], "test_list": ["assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]", "assert div_list([3,2],[1,4])==[3.0, 0.5]", "assert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def div_list(list1, list2):\n    \"\"\"\n    Divide two lists element-wise.\n    \n    Args:\n        list1: First list (numerator)\n        list2: Second list (denominator)\n    \n    Returns:\n        A list containing element-wise division results\n    \n    Raises:\n        ZeroDivisionError: If any element in list2 is zero\n        ValueError: If lists have different lengths\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must have the same length\")\n    \n    return [a / b for a, b in zip(list1, list2)]"}
{"benchmark": "mbpp", "task_id": "626", "prompt": "Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.", "reference_code": "def triangle_area(r) :  \n    if r < 0 : \n        return None\n    return r * r ", "test_imports": [], "test_list": ["assert triangle_area(-1) == None", "assert triangle_area(0) == 0", "assert triangle_area(2) == 4"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def triangle_area(radius):\n    \"\"\"\n    Find the area of the largest triangle that can be inscribed in a semicircle.\n    \n    The largest triangle inscribed in a semicircle has its base as the diameter\n    and its third vertex on the semicircle. The height is equal to the radius.\n    \n    Area = (1/2) * base * height = (1/2) * (2 * radius) * radius = radius^2\n    \n    Args:\n        radius: The radius of the semicircle\n        \n    Returns:\n        The area of the largest inscribed triangle\n    \"\"\"\n    return radius * radius"}
{"benchmark": "mbpp", "task_id": "615", "prompt": "Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.", "reference_code": "def average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result", "test_imports": [], "test_list": ["assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]", "assert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]", "assert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def average_tuple(tuples):\n    \"\"\"\n    Takes a tuple of tuples and returns the average value for each tuple as a list.\n    \n    Args:\n        tuples: A tuple of tuples containing numeric values\n        \n    Returns:\n        A list of average values, one for each inner tuple\n    \"\"\"\n    return [sum(t) / len(t) for t in tuples]"}
{"benchmark": "mbpp", "task_id": "610", "prompt": "Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.", "reference_code": "def remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]", "test_imports": [], "test_list": ["assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]", "assert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]", "assert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def remove_kth_element(lst, k):\n    \"\"\"\n    Returns a list with the same elements as lst, but with the k'th element removed.\n    \n    Args:\n        lst: A list\n        k: The index of the element to remove (0-based)\n    \n    Returns:\n        A new list with the k'th element removed\n    \"\"\"\n    return lst[:k] + lst[k+1:]"}
{"benchmark": "mbpp", "task_id": "606", "prompt": "Write a function to convert degrees to radians.", "reference_code": "import math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian", "test_imports": [], "test_list": ["assert radian_degree(90)==1.5707963267948966", "assert radian_degree(60)==1.0471975511965976", "assert radian_degree(120)==2.0943951023931953"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "import math\n\ndef radian_degree(degrees):\n    \"\"\"\n    Convert degrees to radians.\n    \n    Args:\n        degrees: A number representing degrees\n        \n    Returns:\n        The equivalent value in radians\n    \"\"\"\n    return degrees * math.pi / 180"}
{"benchmark": "mbpp", "task_id": "627", "prompt": "Write a python function to find the smallest missing number from a sorted list of natural numbers.", "reference_code": "def find_First_Missing(array,start=0,end=None):\n    if end is None:\n      end = len(array) - 1   \n    if (start > end): \n        return end + 1\n    if (start != array[start]): \n        return start; \n    mid = int((start + end) / 2) \n    if (array[mid] == mid): \n        return find_First_Missing(array,mid+1,end) \n    return find_First_Missing(array,start,mid) ", "test_imports": [], "test_list": ["assert find_First_Missing([0,1,2,3]) == 4", "assert find_First_Missing([0,1,2,6,9]) == 3", "assert find_First_Missing([2,3,5,8,9]) == 0"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def find_First_Missing(arr):\n    \"\"\"\n    Find the smallest missing number from a sorted list of natural numbers.\n    \n    Args:\n        arr: A sorted list of natural numbers\n        \n    Returns:\n        The smallest missing natural number\n    \"\"\"\n    if not arr:\n        return 1\n    \n    # Check if 1 is missing\n    if arr[0] != 1:\n        return 1\n    \n    # Check for gaps in the sequence\n    for i in range(len(arr) - 1):\n        if arr[i + 1] - arr[i] > 1:\n            return arr[i] + 1\n    \n    # If no gap found, the missing number is the next one after the last element\n    return arr[-1] + 1"}
{"benchmark": "mbpp", "task_id": "625", "prompt": "Write a python function to interchange the first and last element in a given list.", "reference_code": "def swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp   \n    return newList ", "test_imports": [], "test_list": ["assert swap_List([1,2,3]) == [3,2,1]", "assert swap_List([1,2,3,4,4]) == [4,2,3,4,1]", "assert swap_List([4,5,6]) == [6,5,4]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def swap_List(lst):\n    \"\"\"\n    Interchange the first and last element in a given list.\n    \n    Args:\n        lst: A list with at least one element\n        \n    Returns:\n        The list with first and last elements swapped\n    \"\"\"\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"benchmark": "mbpp", "task_id": "604", "prompt": "Write a function to reverse words seperated by spaces in a given string.", "reference_code": "def reverse_words(s):\n        return ' '.join(reversed(s.split()))", "test_imports": [], "test_list": ["assert reverse_words(\"python program\")==(\"program python\")", "assert reverse_words(\"java language\")==(\"language java\")", "assert reverse_words(\"indian man\")==(\"man indian\")"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def reverse_words(s: str) -> str:\n    \"\"\"\n    Reverse the order of words separated by spaces in a given string.\n    \n    Args:\n        s: A string with words separated by spaces\n        \n    Returns:\n        A string with words in reversed order\n    \"\"\"\n    words = s.split(' ')\n    return ' '.join(reversed(words))"}
{"benchmark": "mbpp", "task_id": "605", "prompt": "Write a function to check if the given integer is a prime number.", "reference_code": "def prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False", "test_imports": [], "test_list": ["assert prime_num(13)==True", "assert prime_num(7)==True", "assert prime_num(-1010)==False"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def prime_num(n):\n    \"\"\"\n    Check if the given integer is a prime number.\n    \n    Args:\n        n: An integer to check for primality\n        \n    Returns:\n        True if n is a prime number, False otherwise\n    \"\"\"\n    if n < 2:\n        return False\n    \n    if n == 2:\n        return True\n    \n    if n % 2 == 0:\n        return False\n    \n    # Check odd divisors up to sqrt(n)\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    \n    return True"}
{"benchmark": "mbpp", "task_id": "616", "prompt": "Write a function which takes two tuples of the same length and performs the element wise modulo.", "reference_code": "def tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) ", "test_imports": [], "test_list": ["assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)", "assert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)", "assert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def tuple_modulo(tuple1, tuple2):\n    \"\"\"\n    Performs element-wise modulo operation on two tuples of the same length.\n    \n    Args:\n        tuple1: First tuple of numbers\n        tuple2: Second tuple of numbers (divisors)\n    \n    Returns:\n        A tuple containing the element-wise modulo results\n    \"\"\"\n    return tuple(a % b for a, b in zip(tuple1, tuple2))"}
{"benchmark": "mbpp", "task_id": "602", "prompt": "Write a python function to find the first repeated character in a given string.", "reference_code": "def first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c", "test_imports": [], "test_list": ["assert first_repeated_char(\"abcabc\") == \"a\"", "assert first_repeated_char(\"abc\") == None", "assert first_repeated_char(\"123123\") == \"1\""], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def first_repeated_char(s):\n    \"\"\"\n    Find the first repeated character in a given string.\n    \n    Args:\n        s: A string to search for the first repeated character\n        \n    Returns:\n        The first character that appears more than once in the string,\n        or None if no character is repeated\n    \"\"\"\n    seen = set()\n    \n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    \n    return None"}
{"benchmark": "mbpp", "task_id": "622", "prompt": "Write a function to find the median of two sorted lists of same size.", "reference_code": "def get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2", "test_imports": [], "test_list": ["assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0", "assert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5", "assert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def get_median(list1, list2):\n    \"\"\"\n    Find the median of two sorted lists of the same size.\n    \n    Args:\n        list1: First sorted list\n        list2: Second sorted list\n    \n    Returns:\n        The median of the combined sorted elements\n    \"\"\"\n    merged = []\n    i, j = 0, 0\n    \n    # Merge two sorted lists\n    while i < len(list1) and j < len(list2):\n        if list1[i] <= list2[j]:\n            merged.append(list1[i])\n            i += 1\n        else:\n            merged.append(list2[j])\n            j += 1\n    \n    # Add remaining elements\n    merged.extend(list1[i:])\n    merged.extend(list2[j:])\n    \n    # Calculate median\n    n = len(merged)\n    if n % 2 == 1:\n        return merged[n // 2]\n    else:\n        return (merged[n // 2 - 1] + merged[n // 2]) / 2"}
{"benchmark": "mbpp", "task_id": "633", "prompt": "Write a python function to find the sum of xor of all pairs of numbers in the given list.", "reference_code": "def pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans ", "test_imports": [], "test_list": ["assert pair_xor_Sum([5,9,7,6],4) == 47", "assert pair_xor_Sum([7,3,5],3) == 12", "assert pair_xor_Sum([7,3],2) == 4"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def pair_xor_Sum(numbers):\n    \"\"\"\n    Find the sum of XOR of all pairs of numbers in the given list.\n    \n    Args:\n        numbers: A list of integers\n        \n    Returns:\n        The sum of XOR of all pairs (i, j) where i < j\n    \"\"\"\n    total = 0\n    n = len(numbers)\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            total += numbers[i] ^ numbers[j]\n    \n    return total"}
{"benchmark": "mbpp", "task_id": "608", "prompt": "Write a python function to find nth bell number.", "reference_code": "def bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] ", "test_imports": [], "test_list": ["assert bell_Number(2) == 2", "assert bell_Number(3) == 5", "assert bell_Number(4) == 15"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def bell_Number(n):\n    \"\"\"\n    Find the nth Bell number.\n    \n    Bell numbers count the number of ways to partition a set.\n    B(0) = 1, B(1) = 1, B(2) = 2, B(3) = 5, B(4) = 15, etc.\n    \n    Uses the Bell triangle (similar to Pascal's triangle) approach:\n    - Start with B(0) = 1\n    - Each row starts with the last element of the previous row\n    - Each subsequent element is the sum of the element to its left\n      and the element above-left in the previous row\n    - The first element of each row is the next Bell number\n    \"\"\"\n    if n == 0:\n        return 1\n    \n    # Create a 2D array to store Bell triangle\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    \n    # First Bell number is 1\n    bell[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n + 1):\n        # First element of each row is the last element of previous row\n        bell[i][0] = bell[i - 1][i - 1]\n        \n        # Fill remaining elements in the row\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    \n    # The nth Bell number is the first element of the nth row\n    return bell[n][0]"}
{"benchmark": "mbpp", "task_id": "632", "prompt": "Write a python function to move all zeroes to the end of the given list.", "reference_code": "def move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a", "test_imports": [], "test_list": ["assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]", "assert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]", "assert move_zero([0,1,0,1,1]) == [1,1,1,0,0]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def move_zero(lst):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n    \n    Args:\n        lst: A list that may contain zeros\n        \n    Returns:\n        The list with all zeros moved to the end\n    \"\"\"\n    # Count the number of zeros\n    zero_count = lst.count(0)\n    \n    # Remove all zeros from the list\n    non_zero_elements = [x for x in lst if x != 0]\n    \n    # Add zeros at the end\n    non_zero_elements.extend([0] * zero_count)\n    \n    return non_zero_elements"}
{"benchmark": "mbpp", "task_id": "603", "prompt": "Write a function to get all lucid numbers smaller than or equal to a given integer.", "reference_code": "def get_ludic(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics", "test_imports": [], "test_list": ["assert get_ludic(10) == [1, 2, 3, 5, 7]", "assert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]", "assert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def get_ludic(n):\n    \"\"\"\n    Get all ludic numbers smaller than or equal to a given integer.\n    \n    Ludic numbers are generated by a sieve similar to the Sieve of Eratosthenes.\n    Start with natural numbers 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15...\n    Remove every second number: 1, 3, 5, 7, 9, 11, 13, 15...\n    The first remaining number after 1 is 3, so remove every third number: 1, 3, 7, 9, 13, 15...\n    The next remaining number is 7, so remove every seventh number, and so on.\n    \"\"\"\n    if n < 1:\n        return []\n    \n    # Start with numbers from 1 to n\n    numbers = list(range(1, n + 1))\n    ludic = []\n    \n    while numbers:\n        # The first number in the list is a ludic number\n        ludic_num = numbers[0]\n        ludic.append(ludic_num)\n        \n        # Remove every ludic_num-th element from the list\n        numbers = [numbers[i] for i in range(len(numbers)) if (i + 1) % ludic_num != 0]\n    \n    return ludic"}
{"benchmark": "mbpp", "task_id": "620", "prompt": "Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.", "reference_code": "def largest_subset(a):\n\tn = len(a)\n\tdp = [0 for i in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0;\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)", "test_imports": [], "test_list": ["assert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4", "assert largest_subset([10, 5, 3, 15, 20]) == 3", "assert largest_subset([18, 1, 3, 6, 13, 17]) == 4"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def largest_subset(numbers):\n    \"\"\"\n    Find the size of the largest subset where every pair of numbers is divisible.\n    A pair (a, b) is divisible if a % b == 0 or b % a == 0.\n    \"\"\"\n    if not numbers:\n        return 0\n    \n    n = len(numbers)\n    \n    # Remove duplicates and sort\n    unique_nums = sorted(set(numbers))\n    m = len(unique_nums)\n    \n    if m == 1:\n        return len(numbers)\n    \n    # dp[i] = size of largest subset ending at unique_nums[i]\n    dp = [1] * m\n    \n    for i in range(m):\n        for j in range(i):\n            # Check if unique_nums[j] and unique_nums[i] are divisible\n            if unique_nums[i] % unique_nums[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)"}
{"benchmark": "mbpp", "task_id": "639", "prompt": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.", "reference_code": "def sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))", "test_imports": [], "test_list": ["assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16", "assert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10", "assert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def sample_nam(names):\n    \"\"\"\n    Sum the length of names after removing names that start with a lowercase letter.\n    \n    Args:\n        names: A list of names (strings)\n    \n    Returns:\n        The sum of lengths of names that start with an uppercase letter\n    \"\"\"\n    total_length = 0\n    for name in names:\n        if name and name[0].isupper():\n            total_length += len(name)\n    return total_length"}
{"benchmark": "mbpp", "task_id": "631", "prompt": "Write a function to replace whitespaces with an underscore and vice versa in a given string.", "reference_code": "def replace_spaces(text):\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)", "test_imports": [], "test_list": ["assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'", "assert replace_spaces('The_Avengers') == 'The Avengers'", "assert replace_spaces('Fast and Furious') == 'Fast_and_Furious'"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def replace_spaces(s):\n    \"\"\"\n    Replace whitespaces with underscores and underscores with whitespaces.\n    \n    Args:\n        s: A string to process\n        \n    Returns:\n        A string with whitespaces and underscores swapped\n    \"\"\"\n    result = []\n    for char in s:\n        if char == ' ':\n            result.append('_')\n        elif char == '_':\n            result.append(' ')\n        else:\n            result.append(char)\n    return ''.join(result)"}
{"benchmark": "mbpp", "task_id": "637", "prompt": "Write a function to check whether the given amount has no profit and no loss", "reference_code": "def noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False", "test_imports": [], "test_list": ["assert noprofit_noloss(1500,1200)==False", "assert noprofit_noloss(100,100)==True", "assert noprofit_noloss(2000,5000)==False"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def noprofit_noloss(cost_price, selling_price):\n    \"\"\"\n    Check whether the given amount has no profit and no loss.\n    \n    Args:\n        cost_price: The cost price of an item\n        selling_price: The selling price of an item\n    \n    Returns:\n        True if cost_price equals selling_price (no profit, no loss), False otherwise\n    \"\"\"\n    return cost_price == selling_price"}
{"benchmark": "mbpp", "task_id": "617", "prompt": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.", "reference_code": "def min_Jumps(steps, d): \n    (a, b) = steps\n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2", "test_imports": [], "test_list": ["assert min_Jumps((3,4),11)==3.5", "assert min_Jumps((3,4),0)==0", "assert min_Jumps((11,14),11)==1"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def min_Jumps(d, length):\n    \"\"\"\n    Calculate the minimum number of jumps of given length to reach point (d, 0) from origin (0, 0).\n    \n    Args:\n        d: The x-coordinate of the target point (d, 0)\n        length: The length of each jump\n    \n    Returns:\n        The minimum number of jumps required to reach (d, 0)\n    \"\"\"\n    if d == 0:\n        return 0\n    \n    if length == 0:\n        return float('inf') if d != 0 else 0\n    \n    # The minimum number of jumps needed is the ceiling of d/length\n    # We can reach (d, 0) by jumping directly along the x-axis\n    # or by making jumps that form a path\n    \n    # Direct approach: we need at least ceil(d/length) jumps\n    # to cover distance d with jumps of length 'length'\n    \n    import math\n    \n    d = abs(d)  # Work with absolute distance\n    \n    # Minimum jumps needed to cover distance d\n    min_jumps_needed = math.ceil(d / length)\n    \n    return min_jumps_needed"}
{"benchmark": "mbpp", "task_id": "630", "prompt": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.", "reference_code": "def adjac(ele, sub = []): \n  if not ele: \n     yield sub \n  else: \n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \n                for idx in adjac(ele[1:], sub + [j])] \ndef get_coordinates(test_tup):\n  return list(adjac(test_tup))", "test_imports": [], "test_list": ["assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]", "assert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]", "assert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def get_coordinates(coord):\n    \"\"\"\n    Extract all adjacent coordinates of the given coordinate tuple.\n    \n    Adjacent means sharing an edge (4-directional: up, down, left, right).\n    \n    Args:\n        coord: A tuple of (x, y) representing a coordinate\n        \n    Returns:\n        A list of tuples representing all adjacent coordinates\n    \"\"\"\n    x, y = coord\n    \n    # Define the four adjacent directions: up, down, left, right\n    adjacent = [\n        (x, y + 1),      # up\n        (x, y - 1),      # down\n        (x + 1, y),      # right\n        (x - 1, y)       # left\n    ]\n    \n    return adjacent"}
{"benchmark": "mbpp", "task_id": "640", "prompt": "Write a function to remove the parenthesis and what is inbetween them from a string.", "reference_code": "import re\ndef remove_parenthesis(items):\n for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))", "test_imports": [], "test_list": ["assert remove_parenthesis([\"python (chrome)\"])==(\"python\")", "assert remove_parenthesis([\"string(.abc)\"])==(\"string\")", "assert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def remove_parenthesis(s):\n    \"\"\"\n    Remove parentheses and everything between them from a string.\n    \n    Args:\n        s: A string that may contain parentheses\n        \n    Returns:\n        A string with all parentheses and their contents removed\n    \"\"\"\n    result = []\n    depth = 0\n    \n    for char in s:\n        if char == '(':\n            depth += 1\n        elif char == ')':\n            depth -= 1\n        elif depth == 0:\n            result.append(char)\n    \n    return ''.join(result)"}
{"benchmark": "mbpp", "task_id": "638", "prompt": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.", "reference_code": "import math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))", "test_imports": [], "test_list": ["assert wind_chill(120,35)==40", "assert wind_chill(40,20)==19", "assert wind_chill(10,8)==6"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "import math\n\ndef wind_chill(velocity_kmh, temperature_celsius):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer.\n    \n    Args:\n        velocity_kmh: Wind velocity in km/h\n        temperature_celsius: Temperature in Celsius\n    \n    Returns:\n        Wind chill index rounded up to the next integer\n    \"\"\"\n    # Wind chill formula: WC = 13.12 + 0.6215*T - 11.37*V^0.16 + 0.3965*T*V^0.16\n    # where T is temperature in Celsius and V is wind speed in km/h\n    \n    T = temperature_celsius\n    V = velocity_kmh\n    \n    wind_chill_value = 13.12 + 0.6215 * T - 11.37 * (V ** 0.16) + 0.3965 * T * (V ** 0.16)\n    \n    # Round to the next integer (ceiling)\n    return math.ceil(wind_chill_value)"}
{"benchmark": "mbpp", "task_id": "635", "prompt": "Write a function to sort the given list.", "reference_code": "import heapq as hq\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]", "test_imports": [], "test_list": ["assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]", "assert heap_sort( [7, 1, 9, 5])==[1,5,7,9]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def heap_sort(arr):\n    \"\"\"\n    Sort a list using the heap sort algorithm.\n    \n    Args:\n        arr: List of comparable elements to sort\n        \n    Returns:\n        The sorted list (sorts in-place and returns the list)\n    \"\"\"\n    def heapify(arr, n, i):\n        \"\"\"Convert subtree rooted at index i to a max heap.\"\"\"\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        \n        # Check if left child exists and is greater than root\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        \n        # Check if right child exists and is greater than largest so far\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        \n        # If largest is not root, swap and recursively heapify\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n    \n    n = len(arr)\n    \n    # Build max heap\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    \n    # Extract elements from heap one by one\n    for i in range(n - 1, 0, -1):\n        # Move current root (maximum) to end\n        arr[0], arr[i] = arr[i], arr[0]\n        # Heapify reduced heap\n        heapify(arr, i, 0)\n    \n    return arr"}
{"benchmark": "mbpp", "task_id": "644", "prompt": "Write a python function to reverse an array upto a given position.", "reference_code": "def reverse_Array_Upto_K(input, k): \n  return (input[k-1::-1] + input[k:]) ", "test_imports": [], "test_list": ["assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]", "assert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]", "assert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def reverse_Array_Upto_K(arr, k):\n    \"\"\"\n    Reverse an array up to a given position k.\n    \n    Args:\n        arr: List to be reversed\n        k: Position up to which the array should be reversed (0-indexed)\n    \n    Returns:\n        List with elements reversed up to position k\n    \"\"\"\n    if k < 0 or k >= len(arr):\n        return arr\n    \n    # Reverse the portion from index 0 to k (inclusive)\n    arr[:k+1] = arr[:k+1][::-1]\n    return arr"}
{"benchmark": "mbpp", "task_id": "641", "prompt": "Write a function to find the nth nonagonal number.", "reference_code": "def is_nonagonal(n): \n\treturn int(n * (7 * n - 5) / 2) ", "test_imports": [], "test_list": ["assert is_nonagonal(10) == 325", "assert is_nonagonal(15) == 750", "assert is_nonagonal(18) == 1089"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def is_nonagonal(n: int) -> int:\n    \"\"\"\n    Find the nth nonagonal number.\n    \n    A nonagonal number is a figurate number that represents a nonagon (9-sided polygon).\n    The formula for the nth nonagonal number is: n(7n - 5) / 2\n    \n    Args:\n        n: The position in the sequence (1-indexed)\n    \n    Returns:\n        The nth nonagonal number\n    \"\"\"\n    return n * (7 * n - 5) // 2"}
{"benchmark": "mbpp", "task_id": "614", "prompt": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.", "reference_code": "def cummulative_sum(test_list):\n  res = sum(map(sum, test_list))\n  return (res)", "test_imports": [], "test_list": ["assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30", "assert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37", "assert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def cummulative_sum(tuple_list):\n    \"\"\"\n    Find the cumulative sum of all values in a tuple list.\n    \n    Args:\n        tuple_list: A list of tuples containing numeric values\n        \n    Returns:\n        A list of cumulative sums\n    \"\"\"\n    if not tuple_list:\n        return []\n    \n    # Flatten all values from all tuples\n    all_values = []\n    for tup in tuple_list:\n        for value in tup:\n            all_values.append(value)\n    \n    # Calculate cumulative sum\n    cumulative = []\n    total = 0\n    for value in all_values:\n        total += value\n        cumulative.append(total)\n    \n    return cumulative"}
{"benchmark": "mbpp", "task_id": "720", "prompt": "Write a function to add a dictionary to the tuple. The output should be a tuple.", "reference_code": "def add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup) ", "test_imports": [], "test_list": ["assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})", "assert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})", "assert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def add_dict_to_tuple(tup, d):\n    \"\"\"\n    Add a dictionary to a tuple.\n    \n    Args:\n        tup: A tuple\n        d: A dictionary to add to the tuple\n    \n    Returns:\n        A new tuple with the dictionary added as an element\n    \"\"\"\n    return tup + (d,)"}
{"benchmark": "mbpp", "task_id": "722", "prompt": "The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.", "reference_code": "def filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    ", "test_imports": [], "test_list": ["assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}", "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}", "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def filter_data(students, min_height, min_weight):\n    \"\"\"\n    Filter students based on minimum height and weight requirements.\n    \n    Args:\n        students: Dictionary with student name as key and (height, weight) tuple as value\n        min_height: Minimum required height\n        min_weight: Minimum required weight\n    \n    Returns:\n        Dictionary containing only students meeting both height and weight requirements\n    \"\"\"\n    return {\n        name: (height, weight)\n        for name, (height, weight) in students.items()\n        if height >= min_height and weight >= min_weight\n    }"}
{"benchmark": "mbpp", "task_id": "723", "prompt": "The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.", "reference_code": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result", "test_imports": [], "test_list": ["assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4", "assert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11", "assert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1", "assert count_same_pair([0, 1, 1, 2],[0, 1, 2, 2])==3"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def count_same_pair(list1, list2):\n    \"\"\"\n    Count the number of indices where two lists have the same values.\n    \n    Args:\n        list1: First list\n        list2: Second list of the same length\n    \n    Returns:\n        Integer count of indices where values match\n    \"\"\"\n    return sum(1 for i in range(len(list1)) if list1[i] == list2[i])"}
{"benchmark": "mbpp", "task_id": "726", "prompt": "Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.", "reference_code": "def multiply_elements(test_tup):\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ", "test_imports": [], "test_list": ["assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)", "assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)", "assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)", "assert multiply_elements((12,)) == ()"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def multiply_elements(t):\n    return tuple(t[i] * t[i + 1] for i in range(len(t) - 1))"}
{"benchmark": "mbpp", "task_id": "725", "prompt": "Write a function to extract values between quotation marks \" \" of the given string.", "reference_code": "import re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))", "test_imports": [], "test_list": ["assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']", "assert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']", "assert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']", "assert extract_quotation(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") == []"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def extract_quotation(text):\n    \"\"\"\n    Extract values between quotation marks from the given string.\n    \n    Args:\n        text: A string that may contain quoted values\n        \n    Returns:\n        A list of strings that were enclosed in quotation marks\n    \"\"\"\n    result = []\n    in_quotes = False\n    current_value = []\n    \n    for char in text:\n        if char == '\"':\n            if in_quotes:\n                # End of quoted section\n                result.append(''.join(current_value))\n                current_value = []\n                in_quotes = False\n            else:\n                # Start of quoted section\n                in_quotes = True\n        elif in_quotes:\n            # Accumulate characters inside quotes\n            current_value.append(char)\n    \n    return result"}
{"benchmark": "mbpp", "task_id": "724", "prompt": "Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.", "reference_code": "def power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])", "test_imports": [], "test_list": ["assert power_base_sum(2,100)==115", "assert power_base_sum(8,10)==37", "assert power_base_sum(8,15)==62", "assert power_base_sum(3,3)==9"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def power_base_sum(base, power):\n    \"\"\"\n    Calculate the sum of all digits of base raised to the specified power.\n    \n    Args:\n        base: The base number\n        power: The exponent\n        \n    Returns:\n        The sum of all digits in base^power\n    \"\"\"\n    result = base ** power\n    digit_sum = sum(int(digit) for digit in str(result))\n    return digit_sum"}
{"benchmark": "mbpp", "task_id": "728", "prompt": "Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].", "reference_code": "def sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list", "test_imports": [], "test_list": ["assert sum_list([10,20,30],[15,25,35])==[25,45,65]", "assert sum_list([1,2,3],[5,6,7])==[6,8,10]", "assert sum_list([15,20,30],[15,45,75])==[30,65,105]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]"}
{"benchmark": "mbpp", "task_id": "721", "prompt": "Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.", "reference_code": "def maxAverageOfPath(cost):\n  N = len(cost)\n  dp = [[0 for i in range(N + 1)] for j in range(N + 1)]\n  dp[0][0] = cost[0][0]\n  for i in range(1, N):\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  for j in range(1, N):\n    dp[0][j] = dp[0][j - 1] + cost[0][j]\n  for i in range(1, N):\n    for j in range(1, N):\n      dp[i][j] = max(dp[i - 1][j],\n                     dp[i][j - 1]) + cost[i][j]\n  return dp[N - 1][N - 1] / (2 * N - 1)", "test_imports": [], "test_list": ["assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2", "assert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2", "assert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2", "assert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def maxAverageOfPath(matrix):\n    \"\"\"\n    Find the path from top-left to bottom-right with maximum average cost.\n    Path can only move right or down.\n    Average = total cost / number of cells visited\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return 0\n    \n    n = len(matrix)\n    m = len(matrix[0])\n    \n    # dp[i][j] will store a list of (total_cost, num_cells) tuples\n    # representing different paths to cell (i, j)\n    dp = [[[] for _ in range(m)] for _ in range(n)]\n    \n    # Initialize starting cell\n    dp[0][0] = [(matrix[0][0], 1)]\n    \n    # Fill the DP table\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                continue\n            \n            candidates = []\n            \n            # From top cell\n            if i > 0:\n                for total, cells in dp[i-1][j]:\n                    candidates.append((total + matrix[i][j], cells + 1))\n            \n            # From left cell\n            if j > 0:\n                for total, cells in dp[i][j-1]:\n                    candidates.append((total + matrix[i][j], cells + 1))\n            \n            # Keep only the best candidates to avoid exponential growth\n            # We need to keep candidates that could potentially lead to max average\n            if candidates:\n                # Sort by average (descending) and keep diverse options\n                candidates.sort(key=lambda x: x[0] / x[1], reverse=True)\n                \n                # Keep candidates that are on the Pareto frontier\n                # (not dominated by another candidate)\n                pareto = []\n                for total, cells in candidates:\n                    avg = total / cells\n                    # Check if this candidate is dominated\n                    dominated = False\n                    for p_total, p_cells in pareto:\n                        p_avg = p_total / p_cells\n                        # If existing candidate has better average with fewer cells,\n                        # or same average with fewer cells, current is dominated\n                        if p_avg >= avg and p_cells <= cells:\n                            dominated = True\n                            break\n                    \n                    if not dominated:\n                        # Remove candidates dominated by this one\n                        pareto = [(pt, pc) for pt, pc in pareto \n                                 if not (avg >= pt / pc and cells <= pc)]\n                        pareto.append((total, cells))\n                \n                dp[i][j] = pareto\n    \n    # Find maximum average at bottom-right cell\n    max_avg = 0\n    for total, cells in dp[n-1][m-1]:\n        avg = total / cells\n        max_avg = max(max_avg, avg)\n    \n    return max_avg"}
{"benchmark": "mbpp", "task_id": "730", "prompt": "Write a function to remove consecutive duplicates of a given list.", "reference_code": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)] ", "test_imports": [], "test_list": ["assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]", "assert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]", "assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']", "assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd', 'a', 'a'])==['a', 'b', 'c', 'd', 'a']"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def consecutive_duplicates(lst):\n    \"\"\"\n    Remove consecutive duplicates from a list.\n    \n    Args:\n        lst: A list that may contain consecutive duplicate elements\n        \n    Returns:\n        A new list with consecutive duplicates removed\n    \"\"\"\n    if not lst:\n        return []\n    \n    result = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i - 1]:\n            result.append(lst[i])\n    \n    return result"}
{"benchmark": "mbpp", "task_id": "731", "prompt": "Write a function to find the lateral surface area of a cone given radius r and the height h.", "reference_code": "import math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA", "test_imports": [], "test_list": ["assert lateralsurface_cone(5,12)==204.20352248333654", "assert lateralsurface_cone(10,15)==566.3586699569488", "assert lateralsurface_cone(19,17)==1521.8090132193388"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n    \n    The lateral surface area of a cone is given by: π * r * l\n    where l is the slant height, calculated as: l = sqrt(r^2 + h^2)\n    \n    Args:\n        r: radius of the cone's base\n        h: height of the cone\n    \n    Returns:\n        The lateral surface area of the cone\n    \"\"\"\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area"}
{"benchmark": "mbpp", "task_id": "732", "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.", "reference_code": "import re\ndef replace_specialchar(text):\n return (re.sub(\"[ ,.]\", \":\", text))\n", "test_imports": [], "test_list": ["assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')", "assert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')", "assert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def replace_specialchar(text):\n    \"\"\"Replace all occurrences of spaces, commas, or dots with a colon.\"\"\"\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')"}
{"benchmark": "mbpp", "task_id": "733", "prompt": "Write a function to find the index of the first occurrence of a given number in a sorted array.", "reference_code": "def find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result", "test_imports": [], "test_list": ["assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1", "assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2", "assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def find_first_occurrence(arr, target):\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n    \n    Args:\n        arr: A sorted list of numbers\n        target: The number to find\n    \n    Returns:\n        The index of the first occurrence of target, or -1 if not found\n    \"\"\"\n    if not arr:\n        return -1\n    \n    left, right = 0, len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result"}
{"benchmark": "mbpp", "task_id": "643", "prompt": "Write a function that checks if a strings contains 'z', except at the start and end of the word.", "reference_code": "import re\ndef text_match_wordz_middle(text):\n        return bool(re.search(r'\\Bz\\B',  text))", "test_imports": [], "test_list": ["assert text_match_wordz_middle(\"pythonzabc.\")==True", "assert text_match_wordz_middle(\"zxyabc.\")==False", "assert text_match_wordz_middle(\"  lang  .\")==False"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def text_match_wordz_middle(text):\n    \"\"\"\n    Check if a string contains 'z' except at the start and end of the word.\n    Returns True if there is at least one 'z' in the middle of any word.\n    \"\"\"\n    import re\n    # Pattern explanation:\n    # \\b - word boundary\n    # . - any character (start of word)\n    # + - one or more characters\n    # z - the letter z\n    # + - one or more characters\n    # . - any character (end of word)\n    # \\b - word boundary\n    # This matches words that have 'z' somewhere in the middle (not at start or end)\n    pattern = r'\\bz+\\w*z\\b|\\b\\w+z\\w+\\b'\n    return bool(re.search(pattern, text))"}
{"benchmark": "mbpp", "task_id": "734", "prompt": "Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/", "reference_code": "def sum_Of_Subarray_Prod(arr):\n    ans = 0\n    res = 0\n    i = len(arr) - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)", "test_imports": [], "test_list": ["assert sum_Of_Subarray_Prod([1,2,3]) == 20", "assert sum_Of_Subarray_Prod([1,2]) == 5", "assert sum_Of_Subarray_Prod([1,2,3,4]) == 84"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Find sum of products of all possible sublists of a given list.\n    \n    For example, if arr = [1, 2, 3]:\n    Sublists: [1], [2], [3], [1,2], [2,3], [1,2,3]\n    Products: 1, 2, 3, 2, 6, 6\n    Sum: 1 + 2 + 3 + 2 + 6 + 6 = 20\n    \"\"\"\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    total_sum = 0\n    \n    # Generate all possible sublists\n    for i in range(n):\n        for j in range(i, n):\n            # Calculate product of sublist from index i to j (inclusive)\n            product = 1\n            for k in range(i, j + 1):\n                product *= arr[k]\n            total_sum += product\n    \n    return total_sum"}
{"benchmark": "mbpp", "task_id": "736", "prompt": "Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php", "reference_code": "import bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i", "test_imports": [], "test_list": ["assert left_insertion([1,2,4,5],6)==4", "assert left_insertion([1,2,4,5],3)==2", "assert left_insertion([1,2,4,5],7)==4"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def left_insertion(a, x):\n    \"\"\"\n    Locate the left insertion point for x in a sorted list a.\n    \n    Returns the leftmost index where x should be inserted to keep the list sorted.\n    If x is already in the list, returns the index of the first occurrence.\n    \n    Args:\n        a: A sorted list\n        x: The value to find the insertion point for\n    \n    Returns:\n        The leftmost insertion point index\n    \"\"\"\n    left, right = 0, len(a)\n    \n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    \n    return left"}
{"benchmark": "mbpp", "task_id": "737", "prompt": "Write a function to check whether the given string is starting with a vowel or not using regex.", "reference_code": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n\treturn re.search(regex, string)", "test_imports": [], "test_list": ["assert check_str(\"annie\")", "assert not check_str(\"dawood\")", "assert check_str(\"Else\")"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "import re\n\ndef check_str(s):\n    \"\"\"\n    Check whether the given string is starting with a vowel or not using regex.\n    \n    Args:\n        s: A string to check\n        \n    Returns:\n        True if the string starts with a vowel (case-insensitive), False otherwise\n    \"\"\"\n    if not s:\n        return False\n    return bool(re.match(r'^[aeiouAEIOU]', s))"}
{"benchmark": "mbpp", "task_id": "735", "prompt": "Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/", "reference_code": "def set_middle_bits(n):  \n    n |= n >> 1; \n    n |= n >> 2; \n    n |= n >> 4; \n    n |= n >> 8; \n    n |= n >> 16;  \n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n): \n    if (n == 1): \n        return 1\n    return n ^ set_middle_bits(n) ", "test_imports": [], "test_list": ["assert toggle_middle_bits(9) == 15", "assert toggle_middle_bits(10) == 12", "assert toggle_middle_bits(11) == 13", "assert toggle_middle_bits(0b1000001) == 0b1111111", "assert toggle_middle_bits(0b1001101) == 0b1110011"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def toggle_middle_bits(n):\n    \"\"\"\n    Toggle all bits of a number except the first and last bit.\n    \n    Args:\n        n: A positive integer\n        \n    Returns:\n        The number with middle bits toggled\n    \"\"\"\n    if n <= 2:\n        return n\n    \n    # Find the position of the most significant bit\n    # This helps us identify which bits are \"middle\" bits\n    msb_pos = n.bit_length() - 1\n    \n    # If the number has only 1 or 2 bits, no middle bits to toggle\n    if msb_pos <= 1:\n        return n\n    \n    # Create a mask with all 1s except the first (MSB) and last (LSB) bit\n    # For example, if n has 5 bits: 10101\n    # We want to toggle bits at positions 1, 2, 3 (0-indexed from right)\n    # Mask should be: 01110\n    \n    # Create mask: all 1s from position 1 to position (msb_pos - 1)\n    mask = 0\n    for i in range(1, msb_pos):\n        mask |= (1 << i)\n    \n    # XOR with mask to toggle the middle bits\n    result = n ^ mask\n    \n    return result"}
{"benchmark": "mbpp", "task_id": "738", "prompt": "Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php", "reference_code": "def geometric_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)", "test_imports": [], "test_list": ["assert geometric_sum(7) == 1.9921875", "assert geometric_sum(4) == 1.9375", "assert geometric_sum(8) == 1.99609375"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def geometric_sum(n):\n    \"\"\"\n    Calculate the geometric sum of n-1.\n    \n    The geometric sum is: 1/2^0 + 1/2^1 + 1/2^2 + ... + 1/2^(n-1)\n    \n    Args:\n        n: The number of terms in the geometric series\n        \n    Returns:\n        The sum of the geometric series\n    \"\"\"\n    if n == 0:\n        return 0\n    return 1 / (2 ** (n - 1)) + geometric_sum(n - 1)"}
{"benchmark": "mbpp", "task_id": "740", "prompt": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/", "reference_code": "def tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) ", "test_imports": [], "test_list": ["assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}", "assert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}", "assert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def tuple_to_dict(t):\n    \"\"\"\n    Convert a tuple to a key-value dictionary using adjacent elements.\n    \n    Args:\n        t: A tuple with even number of elements\n        \n    Returns:\n        A dictionary where consecutive pairs from the tuple become key-value pairs\n    \"\"\"\n    return dict(zip(t[::2], t[1::2]))"}
{"benchmark": "mbpp", "task_id": "741", "prompt": "Write a python function to check whether all the characters are same or not.", "reference_code": "def all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True", "test_imports": [], "test_list": ["assert all_Characters_Same(\"python\") == False", "assert all_Characters_Same(\"aaa\") == True", "assert all_Characters_Same(\"data\") == False"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def all_Characters_Same(s):\n    \"\"\"\n    Check whether all the characters in a string are the same or not.\n    \n    Args:\n        s: A string to check\n        \n    Returns:\n        True if all characters are the same, False otherwise\n    \"\"\"\n    if len(s) == 0:\n        return True\n    \n    return all(char == s[0] for char in s)"}
{"benchmark": "mbpp", "task_id": "739", "prompt": "Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/", "reference_code": "import math \ndef find_Index(n): \n    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)", "test_imports": [], "test_list": ["assert find_Index(2) == 4", "assert find_Index(3) == 14", "assert find_Index(4) == 45"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def find_Index(n):\n    \"\"\"\n    Find the index of the smallest triangular number with n digits.\n    \n    A triangular number T(k) = k * (k + 1) / 2\n    We need to find the smallest k such that T(k) has exactly n digits.\n    \n    A number has n digits if: 10^(n-1) <= number < 10^n\n    \n    So we need: 10^(n-1) <= k * (k + 1) / 2 < 10^n\n    \n    From the left inequality:\n    2 * 10^(n-1) <= k * (k + 1)\n    k^2 + k - 2 * 10^(n-1) >= 0\n    \n    Using quadratic formula: k >= (-1 + sqrt(1 + 8 * 10^(n-1))) / 2\n    \"\"\"\n    import math\n    \n    # Lower bound: smallest number with n digits\n    lower_bound = 10 ** (n - 1)\n    \n    # We need k * (k + 1) / 2 >= lower_bound\n    # k^2 + k - 2 * lower_bound >= 0\n    # k >= (-1 + sqrt(1 + 8 * lower_bound)) / 2\n    \n    discriminant = 1 + 8 * lower_bound\n    k = (-1 + math.sqrt(discriminant)) / 2\n    \n    # Start from the ceiling of k\n    k = math.ceil(k)\n    \n    # Verify and adjust if needed\n    while True:\n        triangular = k * (k + 1) // 2\n        num_digits = len(str(triangular))\n        \n        if num_digits == n:\n            return k\n        elif num_digits < n:\n            k += 1\n        else:\n            # This shouldn't happen if our calculation is correct\n            k += 1"}
{"benchmark": "mbpp", "task_id": "743", "prompt": "Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/", "reference_code": "def rotate_right(list, m):\n  result =  list[-m:] + list[:-m]\n  return result", "test_imports": [], "test_list": ["assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]", "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]", "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a list to the right by n positions.\n    \n    Args:\n        lst: The list to rotate\n        n: Number of positions to rotate right\n        \n    Returns:\n        A new list rotated right by n positions\n    \"\"\"\n    if not lst:\n        return lst\n    \n    # Normalize n to handle cases where n > len(lst)\n    n = n % len(lst)\n    \n    # Rotate right by n is equivalent to taking last n elements and putting them at the start\n    return lst[-n:] + lst[:-n] if n != 0 else lst"}
{"benchmark": "mbpp", "task_id": "744", "prompt": "Write a function to check if the given tuple has any none value or not.", "reference_code": "def check_none(test_tup):\n  res = any(map(lambda ele: ele is None, test_tup))\n  return res ", "test_imports": [], "test_list": ["assert check_none((10, 4, 5, 6, None)) == True", "assert check_none((7, 8, 9, 11, 14)) == False", "assert check_none((1, 2, 3, 4, None)) == True"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def check_none(t):\n    \"\"\"\n    Check if the given tuple has any None value.\n    \n    Args:\n        t: A tuple to check\n        \n    Returns:\n        True if the tuple contains at least one None value, False otherwise\n    \"\"\"\n    return None in t"}
{"benchmark": "mbpp", "task_id": "742", "prompt": "Write a function to caluclate the area of a tetrahedron.", "reference_code": "import math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area", "test_imports": [], "test_list": ["assert area_tetrahedron(3)==15.588457268119894", "assert area_tetrahedron(20)==692.8203230275509", "assert area_tetrahedron(10)==173.20508075688772"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def area_tetrahedron(a, b, c, d, e, f):\n    \"\"\"\n    Calculate the surface area of a tetrahedron given its 6 edge lengths.\n    \n    A tetrahedron has 4 vertices and 6 edges. The edges are labeled as:\n    - a, b, c: edges from vertex 0\n    - d: edge between vertices 1 and 2\n    - e: edge between vertices 2 and 3\n    - f: edge between vertices 1 and 3\n    \n    Args:\n        a, b, c, d, e, f: The 6 edge lengths of the tetrahedron\n    \n    Returns:\n        The total surface area of the tetrahedron\n    \"\"\"\n    import math\n    \n    def triangle_area(side1, side2, side3):\n        \"\"\"Calculate triangle area using Heron's formula.\"\"\"\n        s = (side1 + side2 + side3) / 2\n        area_squared = s * (s - side1) * (s - side2) * (s - side3)\n        if area_squared < 0:\n            return 0\n        return math.sqrt(area_squared)\n    \n    # A tetrahedron has 4 triangular faces\n    # Face 1: edges a, b, d\n    face1 = triangle_area(a, b, d)\n    \n    # Face 2: edges a, c, e\n    face2 = triangle_area(a, c, e)\n    \n    # Face 3: edges b, c, f\n    face3 = triangle_area(b, c, f)\n    \n    # Face 4: edges d, e, f\n    face4 = triangle_area(d, e, f)\n    \n    total_area = face1 + face2 + face3 + face4\n    return total_area"}
{"benchmark": "mbpp", "task_id": "745", "prompt": "Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php", "reference_code": "def divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]", "test_imports": [], "test_list": ["assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(20,25)==[22, 24]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Find numbers within a given range where every number is divisible by every digit it contains.\n    \n    Args:\n        startnum: The start of the range (inclusive)\n        endnum: The end of the range (inclusive)\n    \n    Returns:\n        A list of numbers where each number is divisible by all of its digits\n    \"\"\"\n    result = []\n    \n    for num in range(startnum, endnum + 1):\n        # Convert number to string to get individual digits\n        digits = str(num)\n        \n        # Check if the number is divisible by all its digits\n        is_valid = True\n        for digit_char in digits:\n            digit = int(digit_char)\n            \n            # Skip if digit is 0 (can't divide by 0)\n            if digit == 0:\n                is_valid = False\n                break\n            \n            # Check if number is divisible by this digit\n            if num % digit != 0:\n                is_valid = False\n                break\n        \n        if is_valid:\n            result.append(num)\n    \n    return result"}
{"benchmark": "mbpp", "task_id": "746", "prompt": "Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.", "reference_code": "import math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    return (math.pi*r**2) * (a/360)", "test_imports": [], "test_list": ["assert sector_area(4,45)==6.283185307179586", "assert sector_area(9,45)==31.808625617596654", "assert sector_area(9,361)==None"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def sector_area(radius, angle):\n    \"\"\"\n    Calculate the area of a sector given radius and angle.\n    \n    Args:\n        radius: The radius of the sector\n        angle: The angle of the sector in degrees\n    \n    Returns:\n        The area of the sector, or None if angle > 360 degrees\n    \"\"\"\n    if angle > 360:\n        return None\n    \n    # Area of sector = (angle / 360) * π * r²\n    import math\n    area = (angle / 360) * math.pi * (radius ** 2)\n    return area"}
{"benchmark": "mbpp", "task_id": "749", "prompt": "Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/", "reference_code": "def sort_numeric_strings(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result", "test_imports": [], "test_list": ["assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]", "assert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]", "assert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def sort_numeric_strings(strings):\n    \"\"\"\n    Sort a list of numeric strings numerically.\n    \n    Args:\n        strings: A list of strings representing numbers\n        \n    Returns:\n        A new list sorted numerically\n    \"\"\"\n    return sorted(strings, key=lambda x: float(x))"}
{"benchmark": "mbpp", "task_id": "748", "prompt": "Write a function to put spaces between words starting with capital letters in a given string.", "reference_code": "import re\ndef capital_words_spaces(str1):\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)", "test_imports": [], "test_list": ["assert capital_words_spaces(\"Python\") == 'Python'", "assert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'", "assert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def capital_words_spaces(s):\n    \"\"\"\n    Put spaces between words starting with capital letters in a given string.\n    \n    Args:\n        s: A string that may contain words starting with capital letters\n        \n    Returns:\n        A string with spaces inserted before capital letters (except the first character)\n    \"\"\"\n    if not s:\n        return s\n    \n    result = [s[0]]\n    \n    for i in range(1, len(s)):\n        if s[i].isupper():\n            result.append(' ')\n        result.append(s[i])\n    \n    return ''.join(result)"}
{"benchmark": "mbpp", "task_id": "750", "prompt": "Write a function to add the given tuple to the given list.", "reference_code": "def add_tuple(test_list, test_tup):\n  test_list += test_tup\n  return test_list", "test_imports": [], "test_list": ["assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]", "assert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]", "assert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def add_tuple(lst, tpl):\n    \"\"\"\n    Add the given tuple to the given list.\n    \n    Args:\n        lst: A list to which the tuple will be added\n        tpl: A tuple to be added to the list\n    \n    Returns:\n        The list with the tuple added to it\n    \"\"\"\n    lst.append(tpl)\n    return lst"}
{"benchmark": "mbpp", "task_id": "747", "prompt": "Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/", "reference_code": "def lcs_of_three(X, Y, Z): \n  m = len(X)\n  n = len(Y)\n  o = len(Z)\n  L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n  for i in range(m+1): \n\t  for j in range(n+1): \n\t\t  for k in range(o+1): \n\t\t\t  if (i == 0 or j == 0 or k == 0): \n\t\t\t\t  L[i][j][k] = 0\n\t\t\t  elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n\t\t\t\t  L[i][j][k] = L[i-1][j-1][k-1] + 1\n\t\t\t  else: \n\t\t\t\t  L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n  return L[m][n][o]", "test_imports": [], "test_list": ["assert lcs_of_three('AGGT12', '12TXAYB', '12XBA') == 2", "assert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels') == 5", "assert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea') == 3"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def lcs_of_three(s1: str, s2: str, s3: str) -> str:\n    \"\"\"\n    Find the longest common subsequence of three strings.\n    \n    Args:\n        s1, s2, s3: Input strings\n        \n    Returns:\n        The longest common subsequence as a string\n    \"\"\"\n    m, n, p = len(s1), len(s2), len(s3)\n    \n    # Create a 3D DP table\n    dp = [[[0 for _ in range(p + 1)] for _ in range(n + 1)] for _ in range(m + 1)]\n    \n    # Fill the DP table\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, p + 1):\n                if s1[i - 1] == s2[j - 1] == s3[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n    \n    # Backtrack to find the actual LCS\n    lcs = []\n    i, j, k = m, n, p\n    \n    while i > 0 and j > 0 and k > 0:\n        if s1[i - 1] == s2[j - 1] == s3[k - 1]:\n            lcs.append(s1[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        else:\n            # Move in the direction of the maximum value\n            max_val = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n            \n            if dp[i - 1][j][k] == max_val:\n                i -= 1\n            elif dp[i][j - 1][k] == max_val:\n                j -= 1\n            else:\n                k -= 1\n    \n    # Reverse to get the correct order\n    return ''.join(reversed(lcs))"}
{"benchmark": "mbpp", "task_id": "751", "prompt": "Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/", "reference_code": "def check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)", "test_imports": [], "test_list": ["assert check_min_heap([1, 2, 3, 4, 5, 6]) == True", "assert check_min_heap([2, 3, 4, 5, 10, 15]) == True", "assert check_min_heap([2, 10, 4, 5, 3, 15]) == False"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def check_min_heap(arr):\n    \"\"\"\n    Check if the given array represents a min heap.\n    \n    In a min heap:\n    - For every node at index i, the value at i should be less than or equal to\n      the values at indices 2*i+1 (left child) and 2*i+2 (right child)\n    \n    Args:\n        arr: List of integers representing the heap\n        \n    Returns:\n        True if the array represents a valid min heap, False otherwise\n    \"\"\"\n    if not arr:\n        return True\n    \n    n = len(arr)\n    \n    # Check each non-leaf node\n    # Last non-leaf node is at index (n-2)//2\n    for i in range((n - 2) // 2 + 1):\n        left_child_index = 2 * i + 1\n        right_child_index = 2 * i + 2\n        \n        # Check left child\n        if left_child_index < n and arr[i] > arr[left_child_index]:\n            return False\n        \n        # Check right child\n        if right_child_index < n and arr[i] > arr[right_child_index]:\n            return False\n    \n    return True"}
{"benchmark": "mbpp", "task_id": "754", "prompt": "We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.", "reference_code": "def extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result", "test_imports": [], "test_list": ["assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]", "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]", "assert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]", "assert extract_index_list([1, 2, 3, 4, 6, 6, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    Find common elements from three lists that appear at the same index.\n    \n    Args:\n        l1: First list\n        l2: Second list\n        l3: Third list\n    \n    Returns:\n        A list of elements that appear in all three lists at the same index\n    \"\"\"\n    result = []\n    \n    # Determine the minimum length to avoid index out of bounds\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    # Check each index up to the minimum length\n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    \n    return result"}
{"benchmark": "mbpp", "task_id": "752", "prompt": "Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...", "reference_code": "def jacobsthal_num(n): \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]", "test_imports": [], "test_list": ["assert jacobsthal_num(5) == 11", "assert jacobsthal_num(2) == 1", "assert jacobsthal_num(4) == 5", "assert jacobsthal_num(13) == 2731"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def jacobsthal_num(n):\n    \"\"\"\n    Find the nth Jacobsthal number.\n    \n    The Jacobsthal sequence is defined as:\n    J(0) = 0\n    J(1) = 1\n    J(n) = J(n-1) + 2*J(n-2) for n >= 2\n    \n    Args:\n        n: The index of the Jacobsthal number to find (0-indexed)\n    \n    Returns:\n        The nth Jacobsthal number\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    # Use iterative approach for efficiency\n    prev2 = 0  # J(0)\n    prev1 = 1  # J(1)\n    \n    for i in range(2, n + 1):\n        current = prev1 + 2 * prev2\n        prev2 = prev1\n        prev1 = current\n    \n    return prev1"}
{"benchmark": "mbpp", "task_id": "755", "prompt": "Write a function to find the second smallest number in a list.", "reference_code": "def second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]", "test_imports": [], "test_list": ["assert second_smallest([1, 2, -8, -2, 0, -2])==-2", "assert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5", "assert second_smallest([2,2])==None", "assert second_smallest([2,2,2])==None"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def second_smallest(numbers):\n    \"\"\"\n    Find the second smallest number in a list.\n    \n    Args:\n        numbers: A list of numbers\n        \n    Returns:\n        The second smallest number in the list\n        \n    Raises:\n        ValueError: If the list has fewer than 2 unique numbers\n    \"\"\"\n    if not numbers or len(numbers) < 2:\n        raise ValueError(\"List must contain at least 2 numbers\")\n    \n    unique_numbers = list(set(numbers))\n    \n    if len(unique_numbers) < 2:\n        raise ValueError(\"List must contain at least 2 unique numbers\")\n    \n    unique_numbers.sort()\n    return unique_numbers[1]"}
{"benchmark": "mbpp", "task_id": "753", "prompt": "Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases", "reference_code": "def min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) ", "test_imports": [], "test_list": ["assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]", "assert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]", "assert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def min_k(test_list, k):\n    \"\"\"\n    Find minimum k records from tuple list.\n    \n    Args:\n        test_list: List of tuples where each tuple contains comparable elements\n        k: Number of minimum records to find\n    \n    Returns:\n        List of k tuples with minimum values (sorted by first element)\n    \"\"\"\n    return sorted(test_list, key=lambda x: x[1])[:k]"}
{"benchmark": "mbpp", "task_id": "756", "prompt": "Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php", "reference_code": "import re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False", "test_imports": [], "test_list": ["assert text_match_zero_one(\"ac\")==False", "assert text_match_zero_one(\"dc\")==False", "assert text_match_zero_one(\"abbbba\")==True", "assert text_match_zero_one(\"dsabbbba\")==True", "assert text_match_zero_one(\"asbbbba\")==False", "assert text_match_zero_one(\"abaaa\")==True"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "import re\n\ndef text_match_zero_one(text):\n    \"\"\"\n    Matches a string that has an 'a' followed by one or more 'b's.\n    \n    Args:\n        text: The string to match against\n        \n    Returns:\n        A match object if the pattern matches, None otherwise\n    \"\"\"\n    pattern = r'ab+$'\n    return re.search(pattern, text)"}
{"benchmark": "mbpp", "task_id": "757", "prompt": "Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/", "reference_code": "def count_reverse_pairs(test_list):\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \n  return res", "test_imports": [], "test_list": ["assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2", "assert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == 1", "assert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == 2"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def count_reverse_pairs(strings):\n    \"\"\"\n    Count the pairs of reverse strings in the given string list.\n    \n    A pair of reverse strings means two strings where one is the reverse of the other.\n    For example, \"abc\" and \"cba\" form a reverse pair.\n    \n    Args:\n        strings: A list of strings\n        \n    Returns:\n        The count of reverse string pairs\n    \"\"\"\n    if not strings:\n        return 0\n    \n    count = 0\n    seen = set()\n    \n    for string in strings:\n        reversed_string = string[::-1]\n        \n        # If the reverse of current string is already seen, we found a pair\n        if reversed_string in seen:\n            count += 1\n        \n        # Add current string to seen set\n        seen.add(string)\n    \n    return count"}
{"benchmark": "mbpp", "task_id": "758", "prompt": "Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.", "reference_code": "def unique_sublists(list1):\n    result ={}\n    for l in  list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result", "test_imports": [], "test_list": ["assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}", "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}", "assert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}", "assert unique_sublists([['john']])=={('john',): 1}"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def unique_sublists(lst):\n    \"\"\"\n    Count lists within a list and return a dictionary with tuple keys and occurrence counts.\n    \n    Args:\n        lst: A list that may contain sublists\n        \n    Returns:\n        A dictionary where keys are tuples (converted from lists) and values are occurrence counts\n    \"\"\"\n    result = {}\n    \n    for item in lst:\n        if isinstance(item, list):\n            # Convert list to tuple to make it hashable\n            tuple_key = tuple(item)\n            result[tuple_key] = result.get(tuple_key, 0) + 1\n    \n    return result"}
{"benchmark": "mbpp", "task_id": "760", "prompt": "Write a python function to check whether a list of numbers contains only one distinct element or not.", "reference_code": "def unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1", "test_imports": [], "test_list": ["assert unique_Element([1,1,1]) == True", "assert unique_Element([1,2,1,2]) == False", "assert unique_Element([1,2,3,4,5]) == False"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def unique_Element(numbers):\n    \"\"\"\n    Check whether a list of numbers contains only one distinct element or not.\n    \n    Args:\n        numbers: A list of numbers\n        \n    Returns:\n        True if the list contains only one distinct element, False otherwise\n    \"\"\"\n    if not numbers:\n        return True\n    \n    return len(set(numbers)) == 1"}
{"benchmark": "mbpp", "task_id": "763", "prompt": "Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/", "reference_code": "def find_min_diff(arr,n): \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff ", "test_imports": [], "test_list": ["assert find_min_diff((1,5,3,19,18,25),6) == 1", "assert find_min_diff((4,3,2,6),4) == 1", "assert find_min_diff((30,5,20,9),4) == 4"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def find_min_diff(arr):\n    \"\"\"\n    Find the minimum difference between any two elements in a given array.\n    \n    Args:\n        arr: A list of integers\n        \n    Returns:\n        The minimum difference between any two elements in the array.\n        Returns 0 if array has less than 2 elements.\n    \"\"\"\n    if len(arr) < 2:\n        return 0\n    \n    # Sort the array\n    sorted_arr = sorted(arr)\n    \n    # Find minimum difference between consecutive elements\n    min_diff = float('inf')\n    for i in range(len(sorted_arr) - 1):\n        diff = sorted_arr[i + 1] - sorted_arr[i]\n        min_diff = min(min_diff, diff)\n    \n    return min_diff"}
{"benchmark": "mbpp", "task_id": "762", "prompt": "Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.", "reference_code": "def check_monthnumber_number(monthnum3):\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11", "test_imports": [], "test_list": ["assert check_monthnumber_number(6)==True", "assert check_monthnumber_number(2)==False", "assert check_monthnumber_number(12)==False"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def check_monthnumber_number(month):\n    \"\"\"\n    Check whether the given month number contains 30 days or not.\n    \n    Args:\n        month: An integer from 1 to 12 representing the month\n        \n    Returns:\n        True if the month has 30 days, False otherwise\n    \"\"\"\n    months_with_30_days = {4, 6, 9, 11}  # April, June, September, November\n    return month in months_with_30_days"}
{"benchmark": "mbpp", "task_id": "764", "prompt": "Write a python function to count number of digits in a given string.", "reference_code": "def number_ctr(str):\n      number_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \n      return  number_ctr", "test_imports": [], "test_list": ["assert number_ctr('program2bedone') == 1", "assert number_ctr('3wonders') == 1", "assert number_ctr('123') == 3", "assert number_ctr('3wond-1ers2') == 3"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def number_ctr(s):\n    \"\"\"\n    Count the number of digits in a given string.\n    \n    Args:\n        s: A string to count digits in\n        \n    Returns:\n        The count of digit characters in the string\n    \"\"\"\n    return sum(1 for char in s if char.isdigit())"}
{"benchmark": "mbpp", "task_id": "767", "prompt": "Write a python function to count the number of pairs whose sum is equal to ‘sum’. The funtion gets as input a list of numbers and the sum,", "reference_code": "def get_pairs_count(arr, sum):\n    count = 0  \n    for i in range(len(arr)):\n        for j in range(i + 1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count", "test_imports": [], "test_list": ["assert get_pairs_count([1,1,1,1],2) == 6", "assert get_pairs_count([1,5,7,-1,5],6) == 3", "assert get_pairs_count([1,-2,3],1) == 1", "assert get_pairs_count([-1,-2,3],-3) == 1"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def get_pairs_count(numbers, target_sum):\n    \"\"\"\n    Count the number of pairs whose sum is equal to target_sum.\n    \n    Args:\n        numbers: A list of numbers\n        target_sum: The target sum to find pairs for\n    \n    Returns:\n        The count of pairs whose sum equals target_sum\n    \"\"\"\n    count = 0\n    seen = set()\n    \n    for num in numbers:\n        complement = target_sum - num\n        if complement in seen:\n            count += 1\n        seen.add(num)\n    \n    return count"}
{"benchmark": "mbpp", "task_id": "759", "prompt": "Write a function to check whether a given string is a decimal number with a precision of 2.", "reference_code": "def is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)", "test_imports": [], "test_list": ["assert is_decimal('123.11')==True", "assert is_decimal('e666.86')==False", "assert is_decimal('3.124587')==False", "assert is_decimal('1.11')==True", "assert is_decimal('1.1.11')==False"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def is_decimal(s):\n    \"\"\"\n    Check whether a given string is a decimal number with a precision of 2.\n    \n    A decimal number with precision of 2 means:\n    - It can have an optional sign (+ or -)\n    - It has digits before the decimal point (or just 0)\n    - It has exactly 2 digits after the decimal point\n    - The decimal point is required\n    \n    Args:\n        s: A string to check\n        \n    Returns:\n        True if the string is a decimal number with precision of 2, False otherwise\n    \"\"\"\n    if not isinstance(s, str) or not s:\n        return False\n    \n    # Remove leading + or - sign if present\n    if s[0] in ('+', '-'):\n        s = s[1:]\n    \n    # Check if string is empty after removing sign\n    if not s:\n        return False\n    \n    # Split by decimal point\n    parts = s.split('.')\n    \n    # Must have exactly 2 parts (before and after decimal point)\n    if len(parts) != 2:\n        return False\n    \n    before_decimal, after_decimal = parts\n    \n    # Before decimal must not be empty and must contain only digits\n    if not before_decimal or not before_decimal.isdigit():\n        return False\n    \n    # After decimal must have exactly 2 digits\n    if len(after_decimal) != 2 or not after_decimal.isdigit():\n        return False\n    \n    return True"}
{"benchmark": "mbpp", "task_id": "766", "prompt": "Write a function to return a list of all pairs of consecutive items in a given list.", "reference_code": "def pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp", "test_imports": [], "test_list": ["assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]", "assert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]", "assert pair_wise([5,1,9,7,10])==[(5, 1), (1, 9), (9, 7), (7, 10)]", "assert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def pair_wise(lst):\n    \"\"\"Return a list of all pairs of consecutive items in a given list.\"\"\"\n    if len(lst) < 2:\n        return []\n    \n    return [[lst[i], lst[i + 1]] for i in range(len(lst) - 1)]"}
{"benchmark": "mbpp", "task_id": "769", "prompt": "Write a python function to get the difference between two lists.", "reference_code": "def Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n ", "test_imports": [], "test_list": ["assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]", "assert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]", "assert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def Diff(list1, list2):\n    \"\"\"\n    Get the difference between two lists.\n    Returns elements that are in list1 but not in list2.\n    \"\"\"\n    return [item for item in list1 if item not in list2]"}
{"benchmark": "mbpp", "task_id": "765", "prompt": "Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/", "reference_code": "import math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) ", "test_imports": [], "test_list": ["assert is_polite(7) == 11", "assert is_polite(4) == 7", "assert is_polite(9) == 13"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def is_polite(n):\n    \"\"\"\n    Find the nth polite number.\n    \n    A polite number is a positive integer that can be expressed as a sum of \n    consecutive positive integers in at least one way (other than the trivial \n    case of the number itself).\n    \n    Equivalently, a number is polite if it has at least one odd divisor greater than 1.\n    \n    The sequence of polite numbers: 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, ...\n    \"\"\"\n    count = 0\n    num = 2\n    \n    while count < n:\n        num += 1\n        # A number is polite if it has an odd divisor greater than 1\n        # This is equivalent to: num is not a power of 2\n        if is_polite_number(num):\n            count += 1\n    \n    return num\n\n\ndef is_polite_number(num):\n    \"\"\"\n    Check if a number is polite.\n    A number is polite if it's not a power of 2.\n    \"\"\"\n    # A number is polite if it has an odd divisor > 1\n    # This means it's NOT a power of 2\n    # Check if num is a power of 2\n    return (num & (num - 1)) != 0"}
{"benchmark": "mbpp", "task_id": "770", "prompt": "Write a python function to find the sum of fourth power of first n odd natural numbers.", "reference_code": "def odd_num_sum(n) : \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm ", "test_imports": [], "test_list": ["assert odd_num_sum(2) == 82", "assert odd_num_sum(3) == 707", "assert odd_num_sum(4) == 3108"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def odd_num_sum(n):\n    \"\"\"\n    Find the sum of fourth power of first n odd natural numbers.\n    \n    The first n odd natural numbers are: 1, 3, 5, 7, ..., (2n-1)\n    We need to calculate: 1^4 + 3^4 + 5^4 + ... + (2n-1)^4\n    \n    Args:\n        n: Number of odd natural numbers to consider\n        \n    Returns:\n        Sum of fourth powers of first n odd natural numbers\n    \"\"\"\n    total = 0\n    for i in range(1, n + 1):\n        odd_num = 2 * i - 1\n        total += odd_num ** 4\n    return total"}
{"benchmark": "mbpp", "task_id": "771", "prompt": "Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/", "reference_code": "from collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack", "test_imports": [], "test_list": ["assert check_expression(\"{()}[{}]\") == True", "assert check_expression(\"{()}[{]\") == False", "assert check_expression(\"{()}[{}][]({})\") == True"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def check_expression(expression):\n    \"\"\"\n    Check if the given expression has balanced parentheses, brackets, and braces.\n    \n    Args:\n        expression: A string containing the expression to check\n        \n    Returns:\n        True if the expression is balanced, False otherwise\n    \"\"\"\n    stack = []\n    matching_pairs = {')': '(', ']': '[', '}': '{'}\n    opening = set('([{')\n    closing = set(')]}')\n    \n    for char in expression:\n        if char in opening:\n            stack.append(char)\n        elif char in closing:\n            if not stack or stack[-1] != matching_pairs[char]:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0"}
{"benchmark": "mbpp", "task_id": "775", "prompt": "Write a python function to check whether every odd index contains odd numbers of a given list.", "reference_code": "def odd_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))", "test_imports": [], "test_list": ["assert odd_position([2,1,4,3,6,7,6,3]) == True", "assert odd_position([4,1,2]) == True", "assert odd_position([1,2,3]) == False"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def odd_position(lst):\n    \"\"\"\n    Check whether every odd index contains odd numbers in a given list.\n    \n    Args:\n        lst: A list of numbers\n        \n    Returns:\n        True if every element at an odd index is an odd number, False otherwise\n    \"\"\"\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"benchmark": "mbpp", "task_id": "773", "prompt": "Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.", "reference_code": "import re\ndef occurance_substring(text,pattern):\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)", "test_imports": [], "test_list": ["assert occurance_substring('python programming, python language','python')==('python', 0, 6)", "assert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)", "assert occurance_substring('python programming,programming language','language')==('language', 31, 39)", "assert occurance_substring('c++ programming, c++ language','python')==None"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def occurance_substring(string, substring):\n    \"\"\"\n    Find the occurrence and position of substrings within a string.\n    \n    Args:\n        string: The main string to search in\n        substring: The substring to search for\n    \n    Returns:\n        A dictionary with 'count' (number of occurrences) and 'positions' (list of starting indices)\n        Returns None if there is no match\n    \"\"\"\n    if not substring or substring not in string:\n        return None\n    \n    count = 0\n    positions = []\n    start = 0\n    \n    while True:\n        pos = string.find(substring, start)\n        if pos == -1:\n            break\n        count += 1\n        positions.append(pos)\n        start = pos + 1\n    \n    if count == 0:\n        return None\n    \n    return {\n        'count': count,\n        'positions': positions\n    }"}
{"benchmark": "mbpp", "task_id": "776", "prompt": "Write a function to count those characters which have vowels as their neighbors in the given string.", "reference_code": "def count_vowels(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res) ", "test_imports": [], "test_list": ["assert count_vowels('bestinstareels') == 7", "assert count_vowels('partofthejourneyistheend') == 12", "assert count_vowels('amazonprime') == 5"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def count_vowels(s):\n    \"\"\"\n    Count characters that have vowels as their neighbors.\n    \n    A character has a vowel neighbor if either the character before it\n    or the character after it (or both) is a vowel.\n    \n    Args:\n        s: Input string\n        \n    Returns:\n        Count of characters that have at least one vowel neighbor\n    \"\"\"\n    if not s:\n        return 0\n    \n    vowels = set('aeiouAEIOU')\n    count = 0\n    \n    for i in range(len(s)):\n        has_vowel_neighbor = False\n        \n        # Check left neighbor\n        if i > 0 and s[i - 1] in vowels:\n            has_vowel_neighbor = True\n        \n        # Check right neighbor\n        if i < len(s) - 1 and s[i + 1] in vowels:\n            has_vowel_neighbor = True\n        \n        if has_vowel_neighbor:\n            count += 1\n    \n    return count"}
{"benchmark": "mbpp", "task_id": "778", "prompt": "Write a function to pack consecutive duplicates of a given list elements into sublists.", "reference_code": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]", "test_imports": [], "test_list": ["assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]", "assert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]", "assert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def pack_consecutive_duplicates(lst):\n    \"\"\"\n    Pack consecutive duplicates of a given list elements into sublists.\n    \n    Args:\n        lst: A list of elements\n        \n    Returns:\n        A list of sublists where consecutive duplicate elements are grouped together\n    \"\"\"\n    if not lst:\n        return []\n    \n    result = []\n    current_group = [lst[0]]\n    \n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            current_group.append(lst[i])\n        else:\n            result.append(current_group)\n            current_group = [lst[i]]\n    \n    result.append(current_group)\n    return result"}
{"benchmark": "mbpp", "task_id": "777", "prompt": "Write a python function to find the sum of non-repeated elements in a given list.", "reference_code": "def find_sum(arr): \n    arr.sort() \n    sum = arr[0] \n    for i in range(len(arr)-1): \n        if (arr[i] != arr[i+1]): \n            sum = sum + arr[i+1]   \n    return sum", "test_imports": [], "test_list": ["assert find_sum([1,2,3,1,1,4,5,6]) == 21", "assert find_sum([1,10,9,4,2,10,10,45,4]) == 71", "assert find_sum([12,10,9,45,2,10,10,45,10]) == 78"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def find_sum(lst):\n    \"\"\"\n    Find the sum of non-repeated elements in a given list.\n    \n    Args:\n        lst: A list of elements\n        \n    Returns:\n        The sum of elements that appear exactly once in the list\n    \"\"\"\n    element_count = {}\n    \n    # Count occurrences of each element\n    for element in lst:\n        element_count[element] = element_count.get(element, 0) + 1\n    \n    # Sum elements that appear exactly once\n    total = sum(element for element, count in element_count.items() if count == 1)\n    \n    return total"}
{"benchmark": "mbpp", "task_id": "772", "prompt": "Write a function to remove all the words with k length in the given string.", "reference_code": "def remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res) ", "test_imports": [], "test_list": ["assert remove_length('The person is most value tet', 3) == 'person is most value'", "assert remove_length('If you told me about this ok', 4) == 'If you me about ok'", "assert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def remove_length(string, k):\n    \"\"\"\n    Remove all words with length k from the given string.\n    \n    Args:\n        string: The input string containing words separated by spaces\n        k: The length of words to remove\n    \n    Returns:\n        A string with words of length k removed, maintaining original spacing structure\n    \"\"\"\n    words = string.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)"}
{"benchmark": "mbpp", "task_id": "779", "prompt": "Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.", "reference_code": "def unique_sublists(list1):\n    result ={}\n    for l in list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result", "test_imports": [], "test_list": ["assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}", "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}", "assert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def unique_sublists(lst):\n    \"\"\"\n    Count the number of lists within a list.\n    Returns a dictionary where each unique sublist (as a tuple) maps to its count.\n    \"\"\"\n    count_dict = {}\n    \n    for item in lst:\n        if isinstance(item, list):\n            # Convert list to tuple to make it hashable\n            tuple_item = tuple(item)\n            # Increment count for this tuple\n            count_dict[tuple_item] = count_dict.get(tuple_item, 0) + 1\n    \n    return count_dict"}
{"benchmark": "mbpp", "task_id": "782", "prompt": "Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/", "reference_code": "def odd_length_sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum", "test_imports": [], "test_list": ["assert odd_length_sum([1,2,4]) == 14", "assert odd_length_sum([1,2,1,2]) == 15", "assert odd_length_sum([1,7]) == 8"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def odd_length_sum(arr):\n    \"\"\"\n    Find the sum of all odd length subarrays.\n    \n    Args:\n        arr: List of integers\n        \n    Returns:\n        Sum of all odd length subarrays\n    \"\"\"\n    n = len(arr)\n    total_sum = 0\n    \n    # Iterate through all possible odd lengths\n    for length in range(1, n + 1, 2):  # 1, 3, 5, 7, ...\n        # Iterate through all subarrays of this length\n        for start in range(n - length + 1):\n            # Add the sum of this subarray\n            for i in range(start, start + length):\n                total_sum += arr[i]\n    \n    return total_sum"}
{"benchmark": "mbpp", "task_id": "780", "prompt": "Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/", "reference_code": "from itertools import combinations \ndef find_combinations(test_list):\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return (res) ", "test_imports": [], "test_list": ["assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]", "assert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]", "assert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "from itertools import combinations\n\ndef find_combinations(tuple_list, target_sum):\n    \"\"\"\n    Find all combinations of tuples from the given list that sum to the target.\n    \n    Args:\n        tuple_list: A list of tuples containing numbers\n        target_sum: The target sum to find combinations for\n    \n    Returns:\n        A list of combinations (each as a tuple of tuples) that sum to target_sum\n    \"\"\"\n    result = []\n    \n    # Try all possible combination lengths\n    for r in range(1, len(tuple_list) + 1):\n        # Get all combinations of length r\n        for combo in combinations(tuple_list, r):\n            # Calculate the sum of all elements in all tuples in this combination\n            total = sum(sum(t) for t in combo)\n            \n            # If sum matches target, add to result\n            if total == target_sum:\n                result.append(combo)\n    \n    return result"}
{"benchmark": "mbpp", "task_id": "781", "prompt": "Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php", "reference_code": "import math \ndef count_divisors(n) : \n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \n        if (n % i == 0) : \n            if( n // i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count % 2 == 0", "test_imports": [], "test_list": ["assert count_divisors(10)", "assert not count_divisors(100)", "assert count_divisors(125)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def count_divisors(n):\n    \"\"\"\n    Check whether the count of divisors of n is even.\n    \n    Args:\n        n: A positive integer\n        \n    Returns:\n        True if the count of divisors is even, False otherwise\n    \"\"\"\n    if n <= 0:\n        return False\n    \n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            if i * i == n:\n                count += 1\n            else:\n                count += 2\n        i += 1\n    \n    return count % 2 == 0"}
{"benchmark": "mbpp", "task_id": "784", "prompt": "Write a function to find the product of first even and odd number of a given list.", "reference_code": "def mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)", "test_imports": [], "test_list": ["assert mul_even_odd([1,3,5,7,4,1,6,8])==4", "assert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2", "assert mul_even_odd([1,5,7,9,10])==10"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def mul_even_odd(numbers):\n    \"\"\"\n    Find the product of the first even and first odd number in a list.\n    \n    Args:\n        numbers: A list of integers\n        \n    Returns:\n        The product of the first even and first odd number,\n        or None if either is not found\n    \"\"\"\n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        # Early exit if both found\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Return product if both found, otherwise None\n    if first_even is not None and first_odd is not None:\n        return first_even * first_odd\n    \n    return None"}
{"benchmark": "mbpp", "task_id": "786", "prompt": "Write a function to locate the right insertion point for a specified value in sorted order.", "reference_code": "import bisect\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)", "test_imports": [], "test_list": ["assert right_insertion([1,2,4,5],6)==4", "assert right_insertion([1,2,4,5],3)==2", "assert right_insertion([1,2,4,5],7)==4"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def right_insertion(a, x):\n    \"\"\"\n    Locate the right insertion point for x in sorted list a to maintain sorted order.\n    \n    This function finds the insertion point where x should be inserted such that\n    all elements to the left are <= x and all elements to the right are > x.\n    \n    Args:\n        a: A sorted list\n        x: The value to find the insertion point for\n    \n    Returns:\n        The index where x should be inserted (rightmost position if x already exists)\n    \"\"\"\n    left, right = 0, len(a)\n    \n    while left < right:\n        mid = (left + right) // 2\n        if x < a[mid]:\n            right = mid\n        else:\n            left = mid + 1\n    \n    return left"}
{"benchmark": "mbpp", "task_id": "785", "prompt": "Write a function to convert tuple string to integer tuple.", "reference_code": "def tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) ", "test_imports": [], "test_list": ["assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)", "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)", "assert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)", "assert tuple_str_int(\"(7, 81, 19)\") == (7, 81, 19)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def tuple_str_int(tuple_str):\n    \"\"\"\n    Convert a tuple string representation to an integer tuple.\n    \n    Args:\n        tuple_str: A string representation of a tuple containing integers\n        \n    Returns:\n        A tuple of integers\n    \"\"\"\n    # Remove whitespace and convert the string representation to an actual tuple\n    tuple_str = tuple_str.strip()\n    \n    # Use eval to safely convert the string to a tuple (since we know it's a tuple of ints)\n    # Alternatively, we can parse it manually\n    result = eval(tuple_str)\n    \n    # Ensure all elements are integers\n    if isinstance(result, tuple):\n        return tuple(int(x) for x in result)\n    \n    return result"}
{"benchmark": "mbpp", "task_id": "788", "prompt": "Write a function to create a new tuple from the given string and list.", "reference_code": "def new_tuple(test_list, test_str):\n  return tuple(test_list + [test_str])", "test_imports": [], "test_list": ["assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')", "assert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')", "assert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def new_tuple(string, lst):\n    \"\"\"\n    Create a new tuple from the given string and list.\n    \n    Args:\n        string: A string value\n        lst: A list value\n    \n    Returns:\n        A tuple containing the string and list as elements\n    \"\"\"\n    return (string, lst)"}
{"benchmark": "mbpp", "task_id": "783", "prompt": "Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/", "reference_code": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v", "test_imports": [], "test_list": ["assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)", "assert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)", "assert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n    \n    Args:\n        r: Red component (0-255)\n        g: Green component (0-255)\n        b: Blue component (0-255)\n    \n    Returns:\n        Tuple of (h, s, v) where:\n        h: Hue (0-360)\n        s: Saturation (0-100)\n        v: Value (0-100)\n    \"\"\"\n    # Normalize RGB values to 0-1 range\n    r_norm = r / 255.0\n    g_norm = g / 255.0\n    b_norm = b / 255.0\n    \n    # Find max and min values\n    max_val = max(r_norm, g_norm, b_norm)\n    min_val = min(r_norm, g_norm, b_norm)\n    delta = max_val - min_val\n    \n    # Calculate Hue\n    if delta == 0:\n        h = 0\n    elif max_val == r_norm:\n        h = 60 * (((g_norm - b_norm) / delta) % 6)\n    elif max_val == g_norm:\n        h = 60 * (((b_norm - r_norm) / delta) + 2)\n    else:  # max_val == b_norm\n        h = 60 * (((r_norm - g_norm) / delta) + 4)\n    \n    # Calculate Saturation\n    if max_val == 0:\n        s = 0\n    else:\n        s = (delta / max_val) * 100\n    \n    # Calculate Value\n    v = max_val * 100\n    \n    # Ensure hue is in range [0, 360)\n    h = h % 360\n    \n    return (h, s, v)"}
{"benchmark": "mbpp", "task_id": "787", "prompt": "Write a function that matches a string that has an a followed by three 'b'.", "reference_code": "import re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)", "test_imports": [], "test_list": ["assert not text_match_three(\"ac\")", "assert not text_match_three(\"dc\")", "assert text_match_three(\"abbbba\")", "assert text_match_three(\"caacabbbba\")"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "import re\n\ndef text_match_three(text):\n    \"\"\"\n    Matches a string that has an 'a' followed by three 'b's.\n    \n    Args:\n        text: The string to check\n        \n    Returns:\n        A match object if the pattern is found, None otherwise\n    \"\"\"\n    pattern = r'ab{3}'\n    return re.search(pattern, text)"}
{"benchmark": "mbpp", "task_id": "790", "prompt": "Write a python function to check whether every even index contains even numbers of a given list.", "reference_code": "def even_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))", "test_imports": [], "test_list": ["assert even_position([3,2,1]) == False", "assert even_position([1,2,3]) == False", "assert even_position([2,1,4]) == True"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def even_position(lst):\n    \"\"\"\n    Check whether every even index contains even numbers of a given list.\n    \n    Args:\n        lst: A list of numbers\n        \n    Returns:\n        True if every element at an even index is an even number, False otherwise\n    \"\"\"\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True"}
{"benchmark": "mbpp", "task_id": "791", "prompt": "Write a function to remove tuples from the given tuple.", "reference_code": "def remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) ", "test_imports": [], "test_list": ["assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)", "assert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)", "assert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)", "assert remove_nested((3, 7, 9, (6, 8), (5,12), 12)) == (3, 7, 9, 12)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def remove_nested(tup):\n    \"\"\"\n    Remove tuples from the given tuple, keeping only non-tuple elements.\n    \n    Args:\n        tup: A tuple that may contain nested tuples and other elements\n        \n    Returns:\n        A new tuple containing only the non-tuple elements from the input\n    \"\"\"\n    return tuple(item for item in tup if not isinstance(item, tuple))"}
{"benchmark": "mbpp", "task_id": "793", "prompt": "Write a python function to find the last position of an element in a sorted array.", "reference_code": "def last(arr,x):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res", "test_imports": [], "test_list": ["assert last([1,2,3],1) == 0", "assert last([1,1,1,2,3,4],1) == 2", "assert last([2,3,2,3,6,8,9],3) == 3"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def last(arr, x):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n    \n    Args:\n        arr: A sorted list of elements\n        x: The element to find\n    \n    Returns:\n        The index of the last occurrence of x in arr, or -1 if not found\n    \"\"\"\n    if not arr:\n        return -1\n    \n    left, right = 0, len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            result = mid\n            # Continue searching in the right half for a later occurrence\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result"}
{"benchmark": "mbpp", "task_id": "792", "prompt": "Write a python function to count the number of lists in a given number of lists.", "reference_code": "def count_list(input_list): \n    return len(input_list)", "test_imports": [], "test_list": ["assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4", "assert count_list([[1,2],[2,3],[4,5]]) == 3", "assert count_list([[1,0],[2,0]]) == 2"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def count_list(lists):\n    \"\"\"\n    Count the number of lists in a given collection of lists.\n    \n    Args:\n        lists: A collection (list, tuple, etc.) that may contain lists\n        \n    Returns:\n        The count of list objects in the collection\n    \"\"\"\n    count = 0\n    for item in lists:\n        if isinstance(item, list):\n            count += 1\n    return count"}
{"benchmark": "mbpp", "task_id": "794", "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.", "reference_code": "import re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        return re.search(patterns,  text)", "test_imports": [], "test_list": ["assert text_starta_endb(\"aabbbb\")", "assert not text_starta_endb(\"aabAbbbc\")", "assert not text_starta_endb(\"accddbbjjj\")"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "import re\n\ndef text_starta_endb(text):\n    \"\"\"\n    Matches a string that has an 'a' followed by anything, ending in 'b'.\n    \n    Args:\n        text: The string to match\n        \n    Returns:\n        A match object if the pattern matches, None otherwise\n    \"\"\"\n    pattern = r'a.*b'\n    return re.search(pattern, text)"}
{"benchmark": "mbpp", "task_id": "796", "prompt": "Write function to find the sum of all items in the given dictionary.", "reference_code": "def return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum", "test_imports": [], "test_list": ["assert return_sum({'a': 100, 'b':200, 'c':300}) == 600", "assert return_sum({'a': 25, 'b':18, 'c':45}) == 88", "assert return_sum({'a': 36, 'b':39, 'c':49}) == 124"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def return_sum(d):\n    \"\"\"\n    Find the sum of all items in the given dictionary.\n    \n    Args:\n        d: A dictionary with numeric values\n        \n    Returns:\n        The sum of all values in the dictionary\n    \"\"\"\n    return sum(d.values())"}
{"benchmark": "mbpp", "task_id": "798", "prompt": "Write a python function to find the sum of an array.", "reference_code": "def _sum(arr):  \n    sum=0\n    for i in arr: \n        sum = sum + i      \n    return(sum)  ", "test_imports": [], "test_list": ["assert _sum([1, 2, 3]) == 6", "assert _sum([15, 12, 13, 10]) == 50", "assert _sum([0, 1, 2]) == 3"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def _sum(arr):\n    \"\"\"\n    Find the sum of an array.\n    \n    Args:\n        arr: A list of numbers\n        \n    Returns:\n        The sum of all elements in the array\n    \"\"\"\n    return sum(arr)"}
{"benchmark": "mbpp", "task_id": "797", "prompt": "Write a python function to find the sum of all odd natural numbers within the range l and r.", "reference_code": "def sum_odd(n): \n    terms = (n + 1)//2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)", "test_imports": [], "test_list": ["assert sum_in_range(2,5) == 8", "assert sum_in_range(5,7) == 12", "assert sum_in_range(7,13) == 40"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def sum_in_range(l, r):\n    \"\"\"\n    Find the sum of all odd natural numbers within the range [l, r].\n    \n    Args:\n        l: Left boundary (inclusive)\n        r: Right boundary (inclusive)\n    \n    Returns:\n        Sum of all odd natural numbers in the range\n    \"\"\"\n    total = 0\n    for num in range(l, r + 1):\n        if num % 2 == 1:\n            total += num\n    return total"}
{"benchmark": "mbpp", "task_id": "800", "prompt": "Write a function to remove all whitespaces from a string.", "reference_code": "import re\ndef remove_all_spaces(text):\n return (re.sub(r'\\s+', '',text))", "test_imports": [], "test_list": ["assert remove_all_spaces('python  program')==('pythonprogram')", "assert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')", "assert remove_all_spaces('python                     program')==('pythonprogram')", "assert remove_all_spaces('   python                     program')=='pythonprogram'"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def remove_all_spaces(s):\n    \"\"\"Remove all whitespaces from a string.\"\"\"\n    return ''.join(s.split())"}
{"benchmark": "mbpp", "task_id": "799", "prompt": "Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.", "reference_code": "def left_rotate(n,d):   \n    INT_BITS = 32\n    return (n << d)|(n >> (INT_BITS - d))  ", "test_imports": [], "test_list": ["assert left_rotate(16,2) == 64", "assert left_rotate(10,2) == 40", "assert left_rotate(99,3) == 792", "assert left_rotate(99,3) == 792", "assert left_rotate(0b0001,3) == 0b1000", "assert left_rotate(0b0101,3) == 0b101000", "assert left_rotate(0b11101,3) == 0b11101000"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def left_rotate(num, d):\n    \"\"\"\n    Rotate left bits by d bits for a 32-bit number.\n    \n    Args:\n        num: The number to rotate (treated as 32-bit unsigned integer)\n        d: Number of positions to rotate left\n    \n    Returns:\n        The rotated number\n    \"\"\"\n    # Normalize d to be within 0-31 range\n    d = d % 32\n    \n    # Mask to keep only 32 bits\n    mask = 0xFFFFFFFF\n    \n    # Convert to 32-bit unsigned integer\n    num = num & mask\n    \n    # Left rotate: shift left by d, OR with the bits that overflow\n    # The overflow bits are the top d bits, which we get by shifting right by (32-d)\n    rotated = ((num << d) | (num >> (32 - d))) & mask\n    \n    return rotated"}
{"benchmark": "mbpp", "task_id": "801", "prompt": "Write a python function to count the number of equal numbers from three given integers.", "reference_code": "def test_three_equal(x,y,z):\n  result = set([x,y,z])\n  if len(result)==3:\n    return 0\n  else:\n    return 4-len(result)", "test_imports": [], "test_list": ["assert test_three_equal(1,1,1) == 3", "assert test_three_equal(-1,-2,-3) == 0", "assert test_three_equal(1,2,2) == 2"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def test_three_equal(a, b, c):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n    \n    Returns:\n    - 3 if all three numbers are equal\n    - 2 if exactly two numbers are equal\n    - 0 if no two numbers are equal\n    \"\"\"\n    if a == b == c:\n        return 3\n    elif a == b or b == c or a == c:\n        return 2\n    else:\n        return 0"}
{"benchmark": "mbpp", "task_id": "803", "prompt": "Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/", "reference_code": "def is_perfect_square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False", "test_imports": [], "test_list": ["assert not is_perfect_square(10)", "assert is_perfect_square(36)", "assert not is_perfect_square(14)", "assert is_perfect_square(14*14)", "assert not is_perfect_square(125)", "assert is_perfect_square(125*125)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def is_perfect_square(n):\n    \"\"\"\n    Check whether the given number is a perfect square or not.\n    \n    Args:\n        n: An integer to check\n        \n    Returns:\n        True if n is a perfect square, False otherwise\n    \"\"\"\n    if n < 0:\n        return False\n    \n    if n == 0:\n        return True\n    \n    # Binary search approach for efficiency\n    left, right = 1, n\n    \n    while left <= right:\n        mid = (left + right) // 2\n        square = mid * mid\n        \n        if square == n:\n            return True\n        elif square < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return False"}
{"benchmark": "mbpp", "task_id": "802", "prompt": "Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/", "reference_code": "def count_rotation(arr):   \n    for i in range (1,len(arr)): \n        if (arr[i] < arr[i - 1]): \n            return i  \n    return 0", "test_imports": [], "test_list": ["assert count_rotation([3,2,1]) == 1", "assert count_rotation([4,5,1,2,3]) == 2", "assert count_rotation([7,8,9,1,2,3]) == 3", "assert count_rotation([1,2,3]) == 0", "assert count_rotation([1,3,2]) == 2"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def count_rotation(arr):\n    \"\"\"\n    Count the number of rotations required to generate a sorted array.\n    \n    A rotation means moving the last element to the front.\n    We need to find how many such rotations would be needed to sort the array.\n    \n    This is equivalent to finding the number of elements that are greater than\n    the next element (the break point where sorted order is violated).\n    \n    Args:\n        arr: List of integers\n        \n    Returns:\n        Number of rotations needed to sort the array\n    \"\"\"\n    if not arr or len(arr) <= 1:\n        return 0\n    \n    n = len(arr)\n    count = 0\n    \n    # Count the number of positions where arr[i] > arr[i+1]\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n    \n    # For a rotated sorted array, there should be exactly one break point\n    # The number of rotations is n - (position of break point)\n    # Which equals the number of elements after the break point\n    \n    if count == 0:\n        return 0\n    elif count == 1:\n        # Find the position where the break occurs\n        for i in range(n):\n            if arr[i] > arr[(i + 1) % n]:\n                # The number of rotations is the number of elements after this position\n                return i + 1\n    else:\n        # Array is not a rotated sorted array\n        return -1"}
{"benchmark": "mbpp", "task_id": "804", "prompt": "Write a function to check whether the product of numbers in a list is even or not.", "reference_code": "def is_product_even(arr): \n    for i in range(len(arr)): \n        if (arr[i] & 1) == 0: \n            return True\n    return False", "test_imports": [], "test_list": ["assert is_product_even([1,2,3])", "assert is_product_even([1,2,1,4])", "assert not is_product_even([1,1])"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def is_product_even(numbers):\n    \"\"\"\n    Check whether the product of numbers in a list is even or not.\n    \n    Args:\n        numbers: A list of numbers\n        \n    Returns:\n        True if the product is even, False if the product is odd\n    \"\"\"\n    if not numbers:\n        return False\n    \n    # A product is even if at least one number in the list is even\n    # A product is odd only if all numbers are odd\n    for num in numbers:\n        if num % 2 == 0:\n            return True\n    \n    return False"}
{"benchmark": "mbpp", "task_id": "805", "prompt": "Write a function that returns the list in a list of lists whose sum of elements is the highest.", "reference_code": "def max_sum_list(lists):\n return max(lists, key=sum)", "test_imports": [], "test_list": ["assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]", "assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10]", "assert max_sum_list([[2,3,1]])==[2,3,1]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def max_sum_list(lists):\n    \"\"\"\n    Returns the list from a list of lists that has the highest sum of elements.\n    \n    Args:\n        lists: A list of lists containing numeric elements\n        \n    Returns:\n        The list with the maximum sum of its elements\n    \"\"\"\n    if not lists:\n        return None\n    \n    return max(lists, key=sum)"}
{"benchmark": "mbpp", "task_id": "807", "prompt": "Write a python function to find the first odd number in a given list of numbers.", "reference_code": "def first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd", "test_imports": [], "test_list": ["assert first_odd([1,3,5]) == 1", "assert first_odd([2,4,1,3]) == 1", "assert first_odd ([8,9,1]) == 9"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def first_odd(numbers):\n    \"\"\"\n    Find the first odd number in a given list of numbers.\n    \n    Args:\n        numbers: A list of numbers\n        \n    Returns:\n        The first odd number found, or None if no odd number exists\n    \"\"\"\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None"}
{"benchmark": "mbpp", "task_id": "808", "prompt": "Write a function to check if the given tuples contain the k or not.", "reference_code": "def check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return res ", "test_imports": [], "test_list": ["assert check_K((10, 4, 5, 6, 8), 6) == True", "assert check_K((1, 2, 3, 4, 5, 6), 7) == False", "assert check_K((7, 8, 9, 44, 11, 12), 11) == True"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def check_K(tuples, k):\n    \"\"\"\n    Check if the given tuples contain the value k or not.\n    \n    Args:\n        tuples: A tuple or list of tuples to search through\n        k: The value to search for\n    \n    Returns:\n        True if k is found in any of the tuples, False otherwise\n    \"\"\"\n    # Handle case where tuples is a single tuple\n    if isinstance(tuples, tuple):\n        return k in tuples\n    \n    # Handle case where tuples is a list/iterable of tuples\n    for t in tuples:\n        if isinstance(t, tuple):\n            if k in t:\n                return True\n        elif k == t:\n            return True\n    \n    return False"}
{"benchmark": "mbpp", "task_id": "809", "prompt": "Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.", "reference_code": "def check_smaller(test_tup1, test_tup2):\n  return all(x > y for x, y in zip(test_tup1, test_tup2))", "test_imports": [], "test_list": ["assert check_smaller((1, 2, 3), (2, 3, 4)) == False", "assert check_smaller((4, 5, 6), (3, 4, 5)) == True", "assert check_smaller((11, 12, 13), (10, 11, 12)) == True"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def check_smaller(first_tuple, second_tuple):\n    \"\"\"\n    Check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \n    Args:\n        first_tuple: A tuple of comparable elements\n        second_tuple: A tuple of comparable elements\n    \n    Returns:\n        True if all elements in second_tuple are smaller than corresponding elements in first_tuple,\n        False otherwise\n    \"\"\"\n    if len(first_tuple) != len(second_tuple):\n        return False\n    \n    return all(second < first for first, second in zip(first_tuple, second_tuple))"}
{"benchmark": "mbpp", "task_id": "806", "prompt": "Write a function to find maximum run of uppercase characters in the given string.", "reference_code": "def max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)", "test_imports": [], "test_list": ["assert max_run_uppercase('GeMKSForGERksISBESt') == 5", "assert max_run_uppercase('PrECIOusMOVemENTSYT') == 6", "assert max_run_uppercase('GooGLEFluTTER') == 4"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def max_run_uppercase(s: str) -> int:\n    \"\"\"\n    Find the maximum run of consecutive uppercase characters in the given string.\n    \n    Args:\n        s: Input string\n        \n    Returns:\n        The length of the longest consecutive sequence of uppercase characters\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    \n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    \n    return max_run"}
