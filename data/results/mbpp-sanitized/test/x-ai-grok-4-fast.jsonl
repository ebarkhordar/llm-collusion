{"benchmark": "mbpp", "task_id": "17", "prompt": "Write a function that returns the perimeter of a square given its side length as input.", "reference_code": "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter", "test_imports": [], "test_list": ["assert square_perimeter(10)==40", "assert square_perimeter(5)==20", "assert square_perimeter(4)==16"], "model_name": "x-ai/grok-4-fast", "generated_code": "def square_perimeter(side):\n    return 4 * side"}
{"benchmark": "mbpp", "task_id": "19", "prompt": "Write a function to find whether a given array of integers contains any duplicate element.", "reference_code": "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     ", "test_imports": [], "test_list": ["assert test_duplicate(([1,2,3,4,5]))==False", "assert test_duplicate(([1,2,3,4, 4]))==True", "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"], "model_name": "x-ai/grok-4-fast", "generated_code": "def test_duplicate(nums):\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"benchmark": "mbpp", "task_id": "64", "prompt": "Write a function to sort a list of tuples using the second value of each tuple.", "reference_code": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks", "test_imports": [], "test_list": ["assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]", "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])", "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"], "model_name": "x-ai/grok-4-fast", "generated_code": "def subject_marks(marks):\n    return sorted(marks, key=lambda x: x[1])"}
{"benchmark": "mbpp", "task_id": "14", "prompt": "Write a python function to find the volume of a triangular prism.", "reference_code": "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) ", "test_imports": [], "test_list": ["assert find_Volume(10,8,6) == 240", "assert find_Volume(3,2,2) == 6", "assert find_Volume(1,2,1) == 1"], "model_name": "x-ai/grok-4-fast", "generated_code": "def find_Volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n    \n    Args:\n    base (float): Base of the triangular face.\n    height (float): Height of the triangular face.\n    length (float): Length (height) of the prism.\n    \n    Returns:\n    float: Volume of the triangular prism.\n    \"\"\"\n    return 0.5 * base * height * length"}
{"benchmark": "mbpp", "task_id": "12", "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "reference_code": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result", "test_imports": [], "test_list": ["assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"], "model_name": "x-ai/grok-4-fast", "generated_code": "def sort_matrix(matrix):\n    return sorted(matrix, key=sum)"}
{"benchmark": "mbpp", "task_id": "18", "prompt": "Write a function to remove characters from the first string which are present in the second string.", "reference_code": "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) ", "test_imports": [], "test_list": ["assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'", "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'", "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'"], "model_name": "x-ai/grok-4-fast", "generated_code": "def remove_dirty_chars(s1, s2):\n    dirty = set(s2)\n    return ''.join(c for c in s1 if c not in dirty)"}
{"benchmark": "mbpp", "task_id": "62", "prompt": "Write a python function to find smallest number in a list.", "reference_code": "def smallest_num(xs):\n  return min(xs)\n", "test_imports": [], "test_list": ["assert smallest_num([10, 20, 1, 45, 99]) == 1", "assert smallest_num([1, 2, 3]) == 1", "assert smallest_num([45, 46, 50, 60]) == 45"], "model_name": "x-ai/grok-4-fast", "generated_code": "def smallest_num(numbers):\n    \"\"\"\n    Find the smallest number in the given list.\n    \n    Args:\n    numbers (list): A list of numbers.\n    \n    Returns:\n    float or int: The smallest number in the list.\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"List is empty\")\n    return min(numbers)"}
{"benchmark": "mbpp", "task_id": "65", "prompt": "Write a function to flatten a list and sum all of its elements.", "reference_code": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total", "test_imports": [], "test_list": ["assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21", "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106", "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"], "model_name": "x-ai/grok-4-fast", "generated_code": "def recursive_list_sum(nested_list):\n    total = 0\n    for item in nested_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total"}
{"benchmark": "mbpp", "task_id": "63", "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.", "reference_code": "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) ", "test_imports": [], "test_list": ["assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7", "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15", "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"], "model_name": "x-ai/grok-4-fast", "generated_code": "def max_difference(pairs):\n    if not pairs:\n        return 0\n    return max(abs(a - b) for a, b in pairs)"}
{"benchmark": "mbpp", "task_id": "11", "prompt": "Write a python function to remove first and last occurrence of a given character from the string.", "reference_code": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ", "test_imports": [], "test_list": ["assert remove_Occ(\"hello\",\"l\") == \"heo\"", "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"", "assert remove_Occ(\"PHP\",\"P\") == \"H\""], "model_name": "x-ai/grok-4-fast", "generated_code": "def remove_Occ(s: str, char: str) -> str:\n    if not s or len(char) != 1:\n        return s\n    \n    first_idx = s.find(char)\n    if first_idx == -1:\n        return s\n    \n    last_idx = s.rfind(char)\n    \n    # If first and last are the same, remove once\n    if first_idx == last_idx:\n        return s[:first_idx] + s[first_idx + 1:]\n    \n    # Remove first and last\n    result = s[:first_idx] + s[first_idx + 1:last_idx] + s[last_idx + 1:]\n    return result"}
{"benchmark": "mbpp", "task_id": "56", "prompt": "Write a python function to check if a given number is one less than twice its reverse.", "reference_code": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ", "test_imports": [], "test_list": ["assert check(70) == False", "assert check(23) == False", "assert check(73) == True"], "model_name": "x-ai/grok-4-fast", "generated_code": "def check(n):\n    if not isinstance(n, int) or n < 0:\n        return False\n    rev_str = str(n)[::-1]\n    rev = int(rev_str)\n    return n == 2 * rev - 1"}
{"benchmark": "mbpp", "task_id": "57", "prompt": "Write a python function to find the largest number that can be formed with the given list of digits.", "reference_code": "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ", "test_imports": [], "test_list": ["assert find_Max_Num([1,2,3]) == 321", "assert find_Max_Num([4,5,6,1]) == 6541", "assert find_Max_Num([1,2,3,9]) == 9321"], "model_name": "x-ai/grok-4-fast", "generated_code": "def find_Max_Num(digits):\n    if not digits:\n        return 0\n    sorted_digits = sorted(digits, reverse=True)\n    num_str = ''.join(map(str, sorted_digits))\n    return int(num_str)"}
{"benchmark": "mbpp", "task_id": "70", "prompt": "Write a function to find whether all the given tuples have equal length or not.", "reference_code": "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1", "test_imports": [], "test_list": ["assert get_equal([(11, 22, 33), (44, 55, 66)]) == True", "assert get_equal([(1, 2, 3), (4, 5, 6, 7)]) == False", "assert get_equal([(1, 2), (3, 4)]) == True"], "model_name": "x-ai/grok-4-fast", "generated_code": "def get_equal(tuples_list):\n    if not tuples_list:\n        return True\n    first_length = len(tuples_list[0])\n    return all(len(tup) == first_length for tup in tuples_list)"}
{"benchmark": "mbpp", "task_id": "66", "prompt": "Write a python function to count the number of positive numbers in a list.", "reference_code": "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count ", "test_imports": [], "test_list": ["assert pos_count([1,-2,3,-4]) == 2", "assert pos_count([3,4,5,-1]) == 3", "assert pos_count([1,2,3,4]) == 4"], "model_name": "x-ai/grok-4-fast", "generated_code": "def pos_count(numbers):\n    return sum(1 for num in numbers if num > 0)"}
{"benchmark": "mbpp", "task_id": "79", "prompt": "Write a python function to check whether the length of the word is odd or not.", "reference_code": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False", "test_imports": [], "test_list": ["assert word_len(\"Hadoop\") == False", "assert word_len(\"great\") == True", "assert word_len(\"structure\") == True"], "model_name": "x-ai/grok-4-fast", "generated_code": "def word_len(word):\n    \"\"\"\n    Check if the length of the word is odd.\n    \n    Args:\n    word (str): The input word.\n    \n    Returns:\n    bool: True if length is odd, False otherwise.\n    \"\"\"\n    return len(word) % 2 == 1"}
{"benchmark": "mbpp", "task_id": "69", "prompt": "Write a function to check whether a list contains the given sublist or not.", "reference_code": "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set", "test_imports": [], "test_list": ["assert is_sublist([2,4,3,5,7],[3,7])==False", "assert is_sublist([2,4,3,5,7],[4,3])==True", "assert is_sublist([2,4,3,5,7],[1,6])==False"], "model_name": "x-ai/grok-4-fast", "generated_code": "def is_sublist(main_list, sub_list):\n    return sub_list in main_list"}
{"benchmark": "mbpp", "task_id": "58", "prompt": "Write a python function to check whether the given two integers have opposite sign or not.", "reference_code": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); ", "test_imports": [], "test_list": ["assert opposite_Signs(1,-2) == True", "assert opposite_Signs(3,2) == False", "assert opposite_Signs(-10,-10) == False", "assert opposite_Signs(-2,2) == True"], "model_name": "x-ai/grok-4-fast", "generated_code": "def opposite_Signs(a, b):\n    return (a > 0 and b < 0) or (a < 0 and b > 0)"}
{"benchmark": "mbpp", "task_id": "75", "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.", "reference_code": "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res", "test_imports": [], "test_list": ["assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]", "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]", "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]"], "model_name": "x-ai/grok-4-fast", "generated_code": "def find_tuples(tuples_list, k):\n    result = []\n    for tup in tuples_list:\n        if all(x % k == 0 for x in tup):\n            result.append(tup)\n    return result"}
{"benchmark": "mbpp", "task_id": "68", "prompt": "Write a python function to check whether the given array is monotonic or not.", "reference_code": "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ", "test_imports": [], "test_list": ["assert is_Monotonic([6, 5, 4, 4]) == True", "assert is_Monotonic([1, 2, 2, 3]) == True", "assert is_Monotonic([1, 3, 2]) == False"], "model_name": "x-ai/grok-4-fast", "generated_code": "def is_Monotonic(arr):\n    if len(arr) <= 1:\n        return True\n    direction = 0  # 0: undecided, 1: increasing, -1: decreasing\n    for i in range(1, len(arr)):\n        diff = arr[i] - arr[i-1]\n        if diff > 0:\n            if direction == -1:\n                return False\n            direction = 1\n        elif diff < 0:\n            if direction == 1:\n                return False\n            direction = -1\n    return True"}
{"benchmark": "mbpp", "task_id": "67", "prompt": "Write a function to find the number of ways to partition a set of Bell numbers.", "reference_code": "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] ", "test_imports": [], "test_list": ["assert bell_number(2)==2", "assert bell_number(10)==115975", "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"], "model_name": "x-ai/grok-4-fast", "generated_code": "def binomial(n, k):\n    if k < 0 or k > n:\n        return 0\n    if k > n - k:\n        k = n - k\n    res = 1\n    for i in range(k):\n        res *= (n - i)\n        res //= (i + 1)\n    return res\n\ndef bell_number(n):\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    bell = [0] * (n + 1)\n    bell[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            bell[i] += binomial(i - 1, j) * bell[j]\n    return bell[n]"}
{"benchmark": "mbpp", "task_id": "85", "prompt": "Write a function to find the surface area of a sphere.", "reference_code": "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea", "test_imports": ["import math"], "test_list": ["assert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)", "assert math.isclose(surfacearea_sphere(15), 2827.4333882308138, rel_tol=0.001)", "assert math.isclose(surfacearea_sphere(20), 5026.548245743669, rel_tol=0.001)"], "model_name": "x-ai/grok-4-fast", "generated_code": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2"}
{"benchmark": "mbpp", "task_id": "82", "prompt": "Write a function to find the volume of a sphere.", "reference_code": "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume", "test_imports": ["import math"], "test_list": ["assert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)", "assert math.isclose(volume_sphere(25), 65449.84694978735, rel_tol=0.001)", "assert math.isclose(volume_sphere(20), 33510.32163829113, rel_tol=0.001)"], "model_name": "x-ai/grok-4-fast", "generated_code": "import math\n\ndef volume_sphere(radius):\n    return (4 / 3) * math.pi * radius ** 3"}
{"benchmark": "mbpp", "task_id": "59", "prompt": "Write a function to find the nth octagonal number.", "reference_code": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n ", "test_imports": [], "test_list": ["assert is_octagonal(5) == 65", "assert is_octagonal(10) == 280", "assert is_octagonal(15) == 645"], "model_name": "x-ai/grok-4-fast", "generated_code": "import math\n\ndef is_octagonal(n):\n    if n <= 0:\n        return False\n    disc = 1 + 8 * n\n    sqrt_disc = int(math.sqrt(disc))\n    if sqrt_disc * sqrt_disc != disc:\n        return False\n    return (1 + sqrt_disc) % 4 == 0"}
{"benchmark": "mbpp", "task_id": "80", "prompt": "Write a function to find the nth tetrahedral number.", "reference_code": "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6", "test_imports": [], "test_list": ["assert tetrahedral_number(5) == 35", "assert tetrahedral_number(6) == 56", "assert tetrahedral_number(7) == 84"], "model_name": "x-ai/grok-4-fast", "generated_code": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6"}
{"benchmark": "mbpp", "task_id": "90", "prompt": "Write a python function to find the length of the longest word.", "reference_code": "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max", "test_imports": [], "test_list": ["assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7", "assert len_log([\"a\",\"ab\",\"abc\"]) == 3", "assert len_log([\"small\",\"big\",\"tall\"]) == 5"], "model_name": "x-ai/grok-4-fast", "generated_code": "def len_log(s: str) -> int:\n    if not s:\n        return 0\n    words = s.split()\n    if not words:\n        return 0\n    return max(len(word) for word in words)"}
{"benchmark": "mbpp", "task_id": "88", "prompt": "Write a function to get the frequency of all the elements in a list, returned as a dictionary.", "reference_code": "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count", "test_imports": [], "test_list": ["assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})", "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})", "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})"], "model_name": "x-ai/grok-4-fast", "generated_code": "def freq_count(lst):\n    freq = {}\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"}
{"benchmark": "mbpp", "task_id": "87", "prompt": "Write a function to merge three dictionaries into a single dictionary.", "reference_code": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict", "test_imports": [], "test_list": ["assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}", "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}", "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"], "model_name": "x-ai/grok-4-fast", "generated_code": "def merge_dictionaries_three(dict1, dict2, dict3):\n    result = {}\n    result.update(dict1)\n    result.update(dict2)\n    result.update(dict3)\n    return result"}
{"benchmark": "mbpp", "task_id": "91", "prompt": "Write a function to check if a string is present as a substring in a given list of string values.", "reference_code": "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False", "test_imports": [], "test_list": ["assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True", "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False", "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"], "model_name": "x-ai/grok-4-fast", "generated_code": "def find_substring(substring, string_list):\n    \"\"\"\n    Check if the given substring is present in any string in the list.\n    \n    Args:\n    substring (str): The substring to search for.\n    string_list (list[str]): List of strings to search in.\n    \n    Returns:\n    bool: True if substring is found in any string, False otherwise.\n    \"\"\"\n    for s in string_list:\n        if substring in s:\n            return True\n    return False"}
{"benchmark": "mbpp", "task_id": "86", "prompt": "Write a function to find nth centered hexagonal number.", "reference_code": "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1", "test_imports": [], "test_list": ["assert centered_hexagonal_number(10) == 271", "assert centered_hexagonal_number(2) == 7", "assert centered_hexagonal_number(9) == 217"], "model_name": "x-ai/grok-4-fast", "generated_code": "def centered_hexagonal_number(n):\n    \"\"\"\n    Compute the nth centered hexagonal number using the formula 3*n*(n-1) + 1.\n    \n    Args:\n    n (int): The position in the sequence (starting from 1).\n    \n    Returns:\n    int: The nth centered hexagonal number.\n    \"\"\"\n    return 3 * n * (n - 1) + 1"}
{"benchmark": "mbpp", "task_id": "83", "prompt": "Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.", "reference_code": "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)", "test_imports": [], "test_list": ["assert get_Char(\"abc\") == \"f\"", "assert get_Char(\"gfg\") == \"t\"", "assert get_Char(\"ab\") == \"c\""], "model_name": "x-ai/grok-4-fast", "generated_code": "def get_Char(s):\n    total = sum(ord(c) for c in s)\n    mod = total % 26\n    return chr(65 + mod)"}
{"benchmark": "mbpp", "task_id": "93", "prompt": "Write a function to calculate the value of 'a' to the power 'b'.", "reference_code": "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)", "test_imports": [], "test_list": ["assert power(3,4) == 81", "assert power(2,3) == 8", "assert power(5,5) == 3125"], "model_name": "x-ai/grok-4-fast", "generated_code": "def power(a, b):\n    return a ** b"}
{"benchmark": "mbpp", "task_id": "95", "prompt": "Write a python function to find the length of the smallest list in a list of lists.", "reference_code": "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength ", "test_imports": [], "test_list": ["assert Find_Min_Length([[1],[1,2]]) == 1", "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2", "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"], "model_name": "x-ai/grok-4-fast", "generated_code": "def Find_Min_Length(nested_list):\n    if not nested_list:\n        return 0\n    return min(len(sublist) for sublist in nested_list)"}
{"benchmark": "mbpp", "task_id": "96", "prompt": "Write a python function to find the number of divisors of a given integer.", "reference_code": "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x", "test_imports": [], "test_list": ["assert divisor(15) == 4", "assert divisor(12) == 6", "assert divisor(9) == 3"], "model_name": "x-ai/grok-4-fast", "generated_code": "import math\n\ndef divisor(n):\n    if n <= 0:\n        return 0\n    count = 0\n    sqrt_n = int(math.sqrt(n))\n    for i in range(1, sqrt_n + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count"}
{"benchmark": "mbpp", "task_id": "61", "prompt": "Write a python function to count the number of substrings with the sum of digits equal to their length.", "reference_code": "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count", "test_imports": [], "test_list": ["assert count_Substrings('112112') == 6", "assert count_Substrings('111') == 6", "assert count_Substrings('1101112') == 12"], "model_name": "x-ai/grok-4-fast", "generated_code": "from collections import defaultdict\n\ndef count_Substrings(s):\n    n = len(s)\n    if n == 0:\n        return 0\n    prefix = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix[i] = prefix[i - 1] + int(s[i - 1])\n    \n    freq = defaultdict(int)\n    freq[prefix[0] - 0] += 1\n    count = 0\n    for j in range(1, n + 1):\n        target = prefix[j] - j\n        count += freq[target]\n        freq[prefix[j] - j] += 1\n    return count"}
{"benchmark": "mbpp", "task_id": "101", "prompt": "Write a function to find the kth element in the given array using 1-based indexing.", "reference_code": "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]", "test_imports": [], "test_list": ["assert kth_element([12,3,5,7,19], 2) == 3", "assert kth_element([17,24,8,23], 3) == 8", "assert kth_element([16,21,25,36,4], 4) == 36"], "model_name": "x-ai/grok-4-fast", "generated_code": "def kth_element(arr, k):\n    return arr[k - 1]"}
{"benchmark": "mbpp", "task_id": "97", "prompt": "Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.", "reference_code": "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n", "test_imports": [], "test_list": ["assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}", "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}", "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"], "model_name": "x-ai/grok-4-fast", "generated_code": "from collections import Counter\n\ndef frequency_lists(nested_list):\n    flattened = [item for sublist in nested_list for item in sublist]\n    return dict(Counter(flattened))"}
{"benchmark": "mbpp", "task_id": "94", "prompt": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.", "reference_code": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) ", "test_imports": [], "test_list": ["assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'", "assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'", "assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"], "model_name": "x-ai/grok-4-fast", "generated_code": "def index_minimum(tuples):\n    if not tuples:\n        return None\n    return min(tuples, key=lambda x: x[1])[0]"}
{"benchmark": "mbpp", "task_id": "98", "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.", "reference_code": "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) ", "test_imports": ["import math"], "test_list": ["assert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)", "assert math.isclose(multiply_num((-10,-20,-30)), -2000.0, rel_tol=0.001)", "assert math.isclose(multiply_num((19,15,18)), 1710.0, rel_tol=0.001)"], "model_name": "x-ai/grok-4-fast", "generated_code": "def multiply_num(numbers):\n    if not numbers:\n        return 0.0\n    product = 1.0\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"}
{"benchmark": "mbpp", "task_id": "84", "prompt": "Write a function to find the nth number in the newman conway sequence.", "reference_code": "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))", "test_imports": [], "test_list": ["assert sequence(10) == 6", "assert sequence(2) == 1", "assert sequence(3) == 2"], "model_name": "x-ai/grok-4-fast", "generated_code": "def sequence(n):\n    if n < 1:\n        return 0\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    if n >= 2:\n        dp[2] = 1\n    for i in range(3, n + 1):\n        dp[i] = dp[dp[i - 1]] + dp[i - dp[i - 1]]\n    return dp[n]"}
{"benchmark": "mbpp", "task_id": "77", "prompt": "Write a python function to find whether a number is divisible by 11.", "reference_code": "def is_Diff(n): \n    return (n % 11 == 0) ", "test_imports": [], "test_list": ["assert is_Diff (12345) == False", "assert is_Diff(1212112) == True", "assert is_Diff(1212) == False"], "model_name": "x-ai/grok-4-fast", "generated_code": "def is_Diff(n):\n    return n % 11 == 0"}
{"benchmark": "mbpp", "task_id": "104", "prompt": "Write a function to sort each sublist of strings in a given list of lists.", "reference_code": "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n", "test_imports": [], "test_list": ["assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]", "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]", "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"], "model_name": "x-ai/grok-4-fast", "generated_code": "def sort_sublists(nested_list):\n    \"\"\"\n    Sorts each sublist of strings in the given nested list.\n    \n    Args:\n    nested_list (list of list of str): A list containing sublists of strings.\n    \n    Returns:\n    list of list of str: A new list with each sublist sorted.\n    \"\"\"\n    return [sorted(sublist) for sublist in nested_list]"}
{"benchmark": "mbpp", "task_id": "72", "prompt": "Write a python function to check whether the given number can be represented as the difference of two squares or not.", "reference_code": "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False", "test_imports": [], "test_list": ["assert dif_Square(5) == True", "assert dif_Square(10) == False", "assert dif_Square(15) == True"], "model_name": "x-ai/grok-4-fast", "generated_code": "def dif_Square(n):\n    if n < 0:\n        return False\n    return n % 4 != 2"}
{"benchmark": "mbpp", "task_id": "71", "prompt": "Write a function to sort a list of elements.", "reference_code": "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums", "test_imports": [], "test_list": ["assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]", "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]", "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"], "model_name": "x-ai/grok-4-fast", "generated_code": "def comb_sort(arr):\n    n = len(arr)\n    if n < 2:\n        return\n    gap = n\n    swapped = True\n    shrink = 1.3\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / shrink))\n        swapped = False\n        for i in range(n - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                swapped = True"}
{"benchmark": "mbpp", "task_id": "105", "prompt": "Write a python function to count true booleans in the given list.", "reference_code": "def count(lst):   \n    return sum(lst) ", "test_imports": [], "test_list": ["assert count([True,False,True]) == 2", "assert count([False,False]) == 0", "assert count([True,True,True]) == 3"], "model_name": "x-ai/grok-4-fast", "generated_code": "def count(lst):\n    return sum(1 for x in lst if x is True)"}
{"benchmark": "mbpp", "task_id": "108", "prompt": "Write a function to merge three lists into a single sorted list.", "reference_code": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)", "test_imports": [], "test_list": ["assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]", "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]", "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"], "model_name": "x-ai/grok-4-fast", "generated_code": "import heapq\n\ndef merge_sorted_list(a, b, c):\n    return list(heapq.merge(a, b, c))"}
{"benchmark": "mbpp", "task_id": "99", "prompt": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.", "reference_code": "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") ", "test_imports": [], "test_list": ["assert decimal_to_binary(8) == '1000'", "assert decimal_to_binary(18) == '10010'", "assert decimal_to_binary(7) == '111'"], "model_name": "x-ai/grok-4-fast", "generated_code": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"}
{"benchmark": "mbpp", "task_id": "106", "prompt": "Write a function to append the given list to the given tuples.", "reference_code": "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) ", "test_imports": [], "test_list": ["assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)", "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)", "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"], "model_name": "x-ai/grok-4-fast", "generated_code": "def add_lists(tuples, lst):\n    return [t + tuple(lst) for t in tuples]"}
{"benchmark": "mbpp", "task_id": "124", "prompt": "Write a function to get the angle of a complex number.", "reference_code": "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle", "test_imports": ["import math"], "test_list": ["assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)", "assert math.isclose(angle_complex(2,1j), 0.4636476090008061, rel_tol=0.001)", "assert math.isclose(angle_complex(0,2j), 1.5707963267948966, rel_tol=0.001)"], "model_name": "x-ai/grok-4-fast", "generated_code": "import math\n\ndef angle_complex(z):\n    \"\"\"\n    Returns the angle (phase) of the complex number z in radians.\n    \"\"\"\n    return math.atan2(z.imag, z.real)"}
{"benchmark": "mbpp", "task_id": "102", "prompt": "Write a function to convert a snake case string to camel case string.", "reference_code": "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))", "test_imports": [], "test_list": ["assert snake_to_camel('python_program')=='PythonProgram'", "assert snake_to_camel('python_language')==('PythonLanguage')", "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"], "model_name": "x-ai/grok-4-fast", "generated_code": "def snake_to_camel(s):\n    if not s:\n        return \"\"\n    parts = [p for p in s.split('_') if p]\n    if not parts:\n        return \"\"\n    result = parts[0]\n    for part in parts[1:]:\n        result += part.capitalize()\n    return result"}
{"benchmark": "mbpp", "task_id": "115", "prompt": "Write a function to check whether all dictionaries in a list are empty or not.", "reference_code": "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit", "test_imports": [], "test_list": ["assert empty_dit([{},{},{}])==True", "assert empty_dit([{1,2},{},{}])==False", "assert empty_dit({})==True"], "model_name": "x-ai/grok-4-fast", "generated_code": "def empty_dit(dicts):\n    \"\"\"\n    Check if all dictionaries in the list are empty.\n    \n    Args:\n    dicts (list): A list of dictionaries.\n    \n    Returns:\n    bool: True if all dictionaries are empty, False otherwise.\n    \"\"\"\n    return all(len(d) == 0 for d in dicts)"}
{"benchmark": "mbpp", "task_id": "127", "prompt": "Write a function to multiply two integers.", "reference_code": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)", "test_imports": [], "test_list": ["assert multiply_int(10,20)==200", "assert multiply_int(5,10)==50", "assert multiply_int(4,8)==32"], "model_name": "x-ai/grok-4-fast", "generated_code": "def multiply_int(a, b):\n    return a * b"}
{"benchmark": "mbpp", "task_id": "113", "prompt": "Write a function to check if a string represents an integer or not.", "reference_code": "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False", "test_imports": [], "test_list": ["assert check_integer(\"python\")==False", "assert check_integer(\"1\")==True", "assert check_integer(\"12345\")==True"], "model_name": "x-ai/grok-4-fast", "generated_code": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"}
{"benchmark": "mbpp", "task_id": "119", "prompt": "Write a python function to find the element that appears only once in a sorted array.", "reference_code": "def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)", "test_imports": [], "test_list": ["assert search([1,1,2,2,3]) == 3", "assert search([1,1,3,3,4,4,5,5,7,7,8]) == 8", "assert search([1,2,2,3,3,4,4]) == 1"], "model_name": "x-ai/grok-4-fast", "generated_code": "def search(nums):\n    left, right = 0, len(nums) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if mid % 2 == 0:\n            if mid + 1 < len(nums) and nums[mid] == nums[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid\n        else:\n            if nums[mid] == nums[mid - 1]:\n                left = mid + 1\n            else:\n                right = mid\n    return nums[left]"}
{"benchmark": "mbpp", "task_id": "118", "prompt": "Write a function to convert a string to a list of strings split on the space character.", "reference_code": "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst", "test_imports": [], "test_list": ["assert string_to_list(\"python programming\")==['python','programming']", "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']", "assert string_to_list(\"write a program\")==['write','a','program']"], "model_name": "x-ai/grok-4-fast", "generated_code": "def string_to_list(s):\n    return s.split()"}
{"benchmark": "mbpp", "task_id": "128", "prompt": "Write a function to find words that are longer than n characters from a given list of words.", "reference_code": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t", "test_imports": [], "test_list": ["assert long_words(3,\"python is a programming language\")==['python','programming','language']", "assert long_words(2,\"writing a program\")==['writing','program']", "assert long_words(5,\"sorting list\")==['sorting']"], "model_name": "x-ai/grok-4-fast", "generated_code": "def long_words(words, n):\n    return [word for word in words if len(word) > n]"}
{"benchmark": "mbpp", "task_id": "20", "prompt": "Write a function to check if the given number is woodball or not.", "reference_code": "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False", "test_imports": [], "test_list": ["assert is_woodall(383) == True", "assert is_woodall(254) == False", "assert is_woodall(200) == False"], "model_name": "x-ai/grok-4-fast", "generated_code": "def is_woodall(num):\n    if num < 1:\n        return False\n    n = 1\n    while True:\n        wood = n * (1 << n) - 1\n        if wood == num:\n            return True\n        if wood > num:\n            return False\n        n += 1"}
{"benchmark": "mbpp", "task_id": "116", "prompt": "Write a function to convert a given tuple of positive integers into a single integer.", "reference_code": "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result", "test_imports": [], "test_list": ["assert tuple_to_int((1,2,3))==123", "assert tuple_to_int((4,5,6))==456", "assert tuple_to_int((5,6,7))==567"], "model_name": "x-ai/grok-4-fast", "generated_code": "def tuple_to_int(tup):\n    \"\"\"\n    Convert a tuple of positive integers into a single integer.\n    \n    Args:\n    tup (tuple): Tuple of positive integers.\n    \n    Returns:\n    int: The concatenated integer.\n    \"\"\"\n    return int(''.join(map(str, tup)))"}
{"benchmark": "mbpp", "task_id": "117", "prompt": "Write a function to convert all possible convertible elements in a list of lists to floats.", "reference_code": "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res", "test_imports": [], "test_list": ["assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]", "assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]", "assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]"], "model_name": "x-ai/grok-4-fast", "generated_code": "def list_to_float(nested_list):\n    result = []\n    for sublist in nested_list:\n        new_sublist = []\n        for item in sublist:\n            try:\n                new_item = float(item)\n                new_sublist.append(new_item)\n            except (ValueError, TypeError):\n                new_sublist.append(item)\n        result.append(new_sublist)\n    return result"}
{"benchmark": "mbpp", "task_id": "120", "prompt": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.", "reference_code": "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max", "test_imports": [], "test_list": ["assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36", "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200", "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484"], "model_name": "x-ai/grok-4-fast", "generated_code": "def max_product_tuple(pairs):\n    \"\"\"\n    Find the maximum absolute product of pairs in the list of tuples.\n    \n    Args:\n    pairs (list[tuple]): List of tuples, each containing two numbers.\n    \n    Returns:\n    int or float: The maximum absolute product.\n    \"\"\"\n    if not pairs:\n        return 0\n    return max(abs(a * b) for a, b in pairs)"}
{"benchmark": "mbpp", "task_id": "16", "prompt": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.", "reference_code": "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False", "test_imports": [], "test_list": ["assert text_lowercase_underscore(\"aab_cbbbc\")==(True)", "assert text_lowercase_underscore(\"aab_Abbbc\")==(False)", "assert text_lowercase_underscore(\"Aaab_abbbc\")==(False)"], "model_name": "x-ai/grok-4-fast", "generated_code": "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.match(r'^[a-z]+(_[a-z]+)+$', text))"}
{"benchmark": "mbpp", "task_id": "89", "prompt": "Write a function to find the closest smaller number than n.", "reference_code": "def closest_num(N):\n  return (N - 1)", "test_imports": [], "test_list": ["assert closest_num(11) == 10", "assert closest_num(7) == 6", "assert closest_num(12) == 11"], "model_name": "x-ai/grok-4-fast", "generated_code": "def closest_num(n):\n    return n - 1"}
{"benchmark": "mbpp", "task_id": "100", "prompt": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.", "reference_code": "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i", "test_imports": [], "test_list": ["assert next_smallest_palindrome(99)==101", "assert next_smallest_palindrome(1221)==1331", "assert next_smallest_palindrome(120)==121"], "model_name": "x-ai/grok-4-fast", "generated_code": "def next_smallest_palindrome(n):\n    candidate = n + 1\n    while str(candidate) != str(candidate)[::-1]:\n        candidate += 1\n    return candidate"}
{"benchmark": "mbpp", "task_id": "133", "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers.", "reference_code": "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)", "test_imports": [], "test_list": ["assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32", "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52", "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"], "model_name": "x-ai/grok-4-fast", "generated_code": "def sum_negativenum(numbers):\n    total = 0\n    for num in numbers:\n        if num < 0:\n            total += num\n    return total"}
{"benchmark": "mbpp", "task_id": "135", "prompt": "Write a function to find the nth hexagonal number.", "reference_code": "def hexagonal_num(n): \n\treturn n*(2*n - 1) ", "test_imports": [], "test_list": ["assert hexagonal_num(10) == 190", "assert hexagonal_num(5) == 45", "assert hexagonal_num(7) == 91"], "model_name": "x-ai/grok-4-fast", "generated_code": "def hexagonal_num(n):\n    \"\"\"\n    Compute the nth hexagonal number using the formula H_n = n * (2*n - 1).\n    \n    Args:\n    n (int): The position of the hexagonal number (n >= 1).\n    \n    Returns:\n    int: The nth hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)"}
{"benchmark": "mbpp", "task_id": "132", "prompt": "Write a function to convert a tuple to a string.", "reference_code": "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str", "test_imports": [], "test_list": ["assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")", "assert tup_string(('p','y','t','h','o','n'))==(\"python\")", "assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"], "model_name": "x-ai/grok-4-fast", "generated_code": "def tup_string(tup):\n    return ', '.join(map(str, tup))"}
{"benchmark": "mbpp", "task_id": "130", "prompt": "Write a function to find the item with maximum frequency in a given list.", "reference_code": "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]", "test_imports": [], "test_list": ["assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2", "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8", "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==20"], "model_name": "x-ai/grok-4-fast", "generated_code": "def max_occurrences(lst):\n    if not lst:\n        return None\n    counts = {}\n    for item in lst:\n        counts[item] = counts.get(item, 0) + 1\n    max_item = max(counts, key=counts.get)\n    return max_item"}
{"benchmark": "mbpp", "task_id": "139", "prompt": "Write a function to find the circumference of a circle.", "reference_code": "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter", "test_imports": ["import math"], "test_list": ["assert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)", "assert math.isclose(circle_circumference(5), 31.415000000000003, rel_tol=0.001)", "assert math.isclose(circle_circumference(4), 25.132, rel_tol=0.001)"], "model_name": "x-ai/grok-4-fast", "generated_code": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius"}
{"benchmark": "mbpp", "task_id": "131", "prompt": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).", "reference_code": "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string", "test_imports": [], "test_list": ["assert reverse_vowels(\"Python\") == \"Python\"", "assert reverse_vowels(\"USA\") == \"ASU\"", "assert reverse_vowels(\"ab\") == \"ab\""], "model_name": "x-ai/grok-4-fast", "generated_code": "def reverse_vowels(s):\n    vowels = set('aeiouAEIOU')\n    vowel_list = [c for c in s if c in vowels]\n    vowel_list.reverse()\n    result = []\n    vowel_idx = 0\n    for c in s:\n        if c in vowels:\n            result.append(vowel_list[vowel_idx])\n            vowel_idx += 1\n        else:\n            result.append(c)\n    return ''.join(result)"}
{"benchmark": "mbpp", "task_id": "140", "prompt": "Write a function to flatten the list of lists into a single set of numbers.", "reference_code": "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) ", "test_imports": [], "test_list": ["assert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])", "assert set(extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)])) == set([1, 2, 3, 4, 7, 8])", "assert set(extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)])) == set([7, 8, 9, 10, 11, 12])"], "model_name": "x-ai/grok-4-fast", "generated_code": "def extract_singly(nested_list):\n    return {item for sublist in nested_list for item in sublist}"}
{"benchmark": "mbpp", "task_id": "142", "prompt": "Write a function to count number items that are identical in the same position of three given lists.", "reference_code": "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result", "test_imports": [], "test_list": ["assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3", "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4", "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"], "model_name": "x-ai/grok-4-fast", "generated_code": "def count_samepair(list1, list2, list3):\n    if len(list1) != len(list2) or len(list1) != len(list3):\n        raise ValueError(\"All lists must have the same length\")\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"}
{"benchmark": "mbpp", "task_id": "137", "prompt": "Write a function to find the ratio of zeroes to non-zeroes in an array of integers.", "reference_code": "from array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)", "test_imports": ["import math"], "test_list": ["assert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)", "assert math.isclose(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.00, rel_tol=0.001)", "assert math.isclose(zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.00, rel_tol=0.001)"], "model_name": "x-ai/grok-4-fast", "generated_code": "def zero_count(arr):\n    zeros = sum(1 for x in arr if x == 0)\n    non_zeros = len(arr) - zeros\n    return zeros / non_zeros if non_zeros > 0 else 0.0"}
{"benchmark": "mbpp", "task_id": "145", "prompt": "Write a python function to find the maximum difference between any two elements in a given array.", "reference_code": "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) ", "test_imports": [], "test_list": ["assert max_Abs_Diff((2,1,5,3)) == 4", "assert max_Abs_Diff((9,3,2,5,1)) == 8", "assert max_Abs_Diff((3,2,1)) == 2"], "model_name": "x-ai/grok-4-fast", "generated_code": "def max_Abs_Diff(arr):\n    if len(arr) < 2:\n        return 0\n    return max(arr) - min(arr)"}
{"benchmark": "mbpp", "task_id": "126", "prompt": "Write a python function to find the sum of common divisors of two given numbers.", "reference_code": "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum", "test_imports": [], "test_list": ["assert sum(10,15) == 6", "assert sum(100,150) == 93", "assert sum(4,6) == 3"], "model_name": "x-ai/grok-4-fast", "generated_code": "import math\n\ndef sum(a, b):\n    g = math.gcd(a, b)\n    if g == 0:\n        return 0\n    total = 0\n    for i in range(1, int(g**0.5) + 1):\n        if g % i == 0:\n            total += i\n            if i != g // i:\n                total += g // i\n    return total"}
{"benchmark": "mbpp", "task_id": "111", "prompt": "Write a function to find the common elements in given nested lists.", "reference_code": "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result", "test_imports": [], "test_list": ["assert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])", "assert set(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))==set([5,23])", "assert set(common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]]))==set([4])"], "model_name": "x-ai/grok-4-fast", "generated_code": "def common_in_nested_lists(nested_lists):\n    if not nested_lists:\n        return []\n    common = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common.intersection_update(lst)\n    return sorted(common)"}
{"benchmark": "mbpp", "task_id": "163", "prompt": "Write a function to calculate the area of a regular polygon given the length and number of its sides.", "reference_code": "from math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area", "test_imports": ["import math"], "test_list": ["assert math.isclose(area_polygon(4, 20), 400., rel_tol=0.001)", "assert math.isclose(area_polygon(10, 15), 1731.197, rel_tol=0.001)", "assert math.isclose(area_polygon(9, 7), 302.909, rel_tol=0.001)"], "model_name": "x-ai/grok-4-fast", "generated_code": "import math\n\ndef area_polygon(side_length, num_sides):\n    n = num_sides\n    s = side_length\n    area = (n * s**2) / (4 * math.tan(math.pi / n))\n    return area"}
{"benchmark": "mbpp", "task_id": "129", "prompt": "Write a function to calculate whether the matrix is a magic square.", "reference_code": "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True", "test_imports": [], "test_list": ["assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True", "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True", "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"], "model_name": "x-ai/grok-4-fast", "generated_code": "def magic_square_test(matrix):\n    if not matrix or not matrix[0]:\n        return False\n    n = len(matrix)\n    if not all(len(row) == n for row in matrix):\n        return False\n    expected_sum = n * (n * n + 1) // 2\n    flatten = [num for row in matrix for num in row]\n    if sorted(flatten) != list(range(1, n * n + 1)):\n        return False\n    # Check rows\n    if not all(sum(row) == expected_sum for row in matrix):\n        return False\n    # Check columns\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != expected_sum:\n            return False\n    # Check main diagonal\n    main_diag_sum = sum(matrix[i][i] for i in range(n))\n    if main_diag_sum != expected_sum:\n        return False\n    # Check anti-diagonal\n    anti_diag_sum = sum(matrix[i][n - 1 - i] for i in range(n))\n    if anti_diag_sum != expected_sum:\n        return False\n    return True"}
{"benchmark": "mbpp", "task_id": "143", "prompt": "Write a function to find number of lists present in the given tuple.", "reference_code": "def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) ", "test_imports": [], "test_list": ["assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2", "assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3", "assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"], "model_name": "x-ai/grok-4-fast", "generated_code": "def find_lists(tup):\n    count = 0\n    for item in tup:\n        if isinstance(item, list):\n            count += 1\n    return count"}
{"benchmark": "mbpp", "task_id": "74", "prompt": "Write a function to check whether it follows the sequence given in the patterns array.", "reference_code": "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True", "test_imports": [], "test_list": ["assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True", "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False", "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False"], "model_name": "x-ai/grok-4-fast", "generated_code": "def is_samepatterns(s: str, patterns: list[str]) -> bool:\n    \"\"\"\n    Check if the string s follows the sequence given in the patterns array\n    by being exactly the concatenation of the patterns.\n    \"\"\"\n    return s == ''.join(patterns)"}
{"benchmark": "mbpp", "task_id": "103", "prompt": "Write a function to find the Eulerian number a(n, m).", "reference_code": "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))", "test_imports": [], "test_list": ["assert eulerian_num(3, 1) == 4", "assert eulerian_num(4, 1) == 11", "assert eulerian_num(5, 3) == 26"], "model_name": "x-ai/grok-4-fast", "generated_code": "def eulerian_num(n, m):\n    if n <= 0 or m < 0 or m >= n:\n        return 0\n    if n == 1:\n        return 1 if m == 0 else 0\n    dp = [[0] * n for _ in range(n + 1)]\n    dp[1][0] = 1\n    for i in range(2, n + 1):\n        for j in range(i):\n            prev = dp[i - 1][j - 1] if j > 0 else 0\n            dp[i][j] = (j + 1) * dp[i - 1][j] + (i - j) * prev\n    return dp[n][m]"}
{"benchmark": "mbpp", "task_id": "171", "prompt": "Write a function to find the perimeter of a regular pentagon from the length of its sides.", "reference_code": "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter", "test_imports": [], "test_list": ["assert perimeter_pentagon(5) == 25", "assert perimeter_pentagon(10) == 50", "assert perimeter_pentagon(15) == 75"], "model_name": "x-ai/grok-4-fast", "generated_code": "def perimeter_pentagon(side):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon given the side length.\n    \n    Args:\n    side (float): Length of one side of the pentagon.\n    \n    Returns:\n    float: Perimeter of the pentagon.\n    \"\"\"\n    return 5 * side"}
{"benchmark": "mbpp", "task_id": "168", "prompt": "Write a function to count the number of occurrences of a number in a given list.", "reference_code": "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count ", "test_imports": [], "test_list": ["assert frequency([1,2,3], 4) == 0", "assert frequency([1,2,2,3,3,3,4], 3) == 3", "assert frequency([0,1,2,3,1,2], 1) == 2"], "model_name": "x-ai/grok-4-fast", "generated_code": "def frequency(lst, num):\n    \"\"\"\n    Counts the number of occurrences of num in lst.\n    \n    Args:\n    lst (list): The input list.\n    num (int or float): The number to count.\n    \n    Returns:\n    int: The frequency of num in lst.\n    \"\"\"\n    return lst.count(num)"}
{"benchmark": "mbpp", "task_id": "160", "prompt": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.", "reference_code": "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None", "test_imports": [], "test_list": ["assert find_solution(2, 3, 7) == (2, 1)", "assert find_solution(4, 2, 7) == None", "assert find_solution(1, 13, 17) == (4, 1)"], "model_name": "x-ai/grok-4-fast", "generated_code": "def extended_gcd(a, b):\n    if a == 0:\n        return b, 0, 1\n    gcd, x1, y1 = extended_gcd(b % a, a)\n    x = y1 - (b // a) * x1\n    y = x1\n    return gcd, x, y\n\ndef find_solution(a, b, n):\n    if a == 0 and b == 0:\n        return None if n != 0 else (0, 0)\n    gcd, x, y = extended_gcd(abs(a), abs(b))\n    if n % gcd != 0:\n        return None\n    x *= n // gcd\n    y *= n // gcd\n    if a < 0:\n        x = -x\n    if b < 0:\n        y = -y\n    return (x, y)"}
{"benchmark": "mbpp", "task_id": "161", "prompt": "Write a function to remove all elements from a given list present in another list.", "reference_code": "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result", "test_imports": [], "test_list": ["assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]", "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]", "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]"], "model_name": "x-ai/grok-4-fast", "generated_code": "def remove_elements(original, to_remove):\n    to_remove_set = set(to_remove)\n    return [x for x in original if x not in to_remove_set]"}
{"benchmark": "mbpp", "task_id": "92", "prompt": "Write a function to check whether the given number is undulating or not.", "reference_code": "def is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True", "test_imports": [], "test_list": ["assert is_undulating(1212121) == True", "assert is_undulating(1991) == False", "assert is_undulating(121) == True"], "model_name": "x-ai/grok-4-fast", "generated_code": "def is_undulating(n):\n    if n < 0:\n        return False\n    s = str(n)\n    if len(s) < 3:\n        return False\n    digits = [int(d) for d in s]\n    prev_sign = 0\n    for i in range(len(digits) - 1):\n        diff = digits[i + 1] - digits[i]\n        if diff == 0:\n            return False\n        sign = 1 if diff > 0 else -1\n        if i == 0:\n            prev_sign = sign\n        else:\n            expected_sign = -prev_sign\n            if sign != expected_sign:\n                return False\n            prev_sign = sign\n    return True"}
{"benchmark": "mbpp", "task_id": "164", "prompt": "Write a function to determine if the sum of the divisors of two integers are the same.", "reference_code": "import math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); ", "test_imports": [], "test_list": ["assert are_equivalent(36, 57) == False", "assert are_equivalent(2, 4) == False", "assert are_equivalent(23, 47) == True"], "model_name": "x-ai/grok-4-fast", "generated_code": "def sum_divisors(n):\n    if n <= 0:\n        return 0\n    total = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            total += i\n            if i != n // i:\n                total += n // i\n    return total\n\ndef are_equivalent(a: int, b: int) -> bool:\n    return sum_divisors(a) == sum_divisors(b)"}
{"benchmark": "mbpp", "task_id": "170", "prompt": "Write a function to find the sum of numbers in a list within a range specified by two indices.", "reference_code": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   ", "test_imports": [], "test_list": ["assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29", "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16", "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38"], "model_name": "x-ai/grok-4-fast", "generated_code": "def sum_range_list(numbers, start, end):\n    \"\"\"\n    Returns the sum of numbers in the list from index start to end inclusive.\n    \n    Args:\n    numbers (list): List of numbers\n    start (int): Starting index\n    end (int): Ending index\n    \n    Returns:\n    int or float: Sum of the numbers in the range\n    \"\"\"\n    return sum(numbers[start:end + 1])"}
{"benchmark": "mbpp", "task_id": "172", "prompt": "Write a function to count the number of occurence of the string 'std' in a given string.", "reference_code": "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count", "test_imports": [], "test_list": ["assert count_occurance(\"letstdlenstdporstd\") == 3", "assert count_occurance(\"truststdsolensporsd\") == 1", "assert count_occurance(\"makestdsostdworthit\") == 2", "assert count_occurance(\"stds\") == 1", "assert count_occurance(\"\") == 0"], "model_name": "x-ai/grok-4-fast", "generated_code": "def count_occurance(s):\n    return s.count('std')"}
{"benchmark": "mbpp", "task_id": "222", "prompt": "Write a function to check if all the elements in tuple have same data type or not.", "reference_code": "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) ", "test_imports": [], "test_list": ["assert check_type((5, 6, 7, 3, 5, 6) ) == True", "assert check_type((1, 2, \"4\") ) == False", "assert check_type((3, 2, 1, 4, 5) ) == True"], "model_name": "x-ai/grok-4-fast", "generated_code": "def check_type(tup):\n    if not tup:\n        return True\n    first_type = type(tup[0])\n    return all(isinstance(x, first_type) for x in tup)"}
{"benchmark": "mbpp", "task_id": "166", "prompt": "Write a function that counts the number of pairs of integers in a list that xor to an even number.", "reference_code": "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count", "test_imports": [], "test_list": ["assert find_even_pair([5, 4, 7, 2, 1]) == 4", "assert find_even_pair([7, 2, 8, 1, 0, 5, 11]) == 9", "assert find_even_pair([1, 2, 3]) == 1"], "model_name": "x-ai/grok-4-fast", "generated_code": "def find_even_pair(nums):\n    even_count = 0\n    odd_count = 0\n    for num in nums:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2"}
{"benchmark": "mbpp", "task_id": "227", "prompt": "Write a function to find minimum of three numbers.", "reference_code": "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest ", "test_imports": [], "test_list": ["assert min_of_three(10,20,0)==0", "assert min_of_three(19,15,18)==15", "assert min_of_three(-10,-20,-30)==-30"], "model_name": "x-ai/grok-4-fast", "generated_code": "def min_of_three(a, b, c):\n    return min(a, b, c)"}
{"benchmark": "mbpp", "task_id": "165", "prompt": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).", "reference_code": "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars ", "test_imports": [], "test_list": ["assert count_char_position(\"xbcefg\") == 2", "assert count_char_position(\"ABcED\") == 3", "assert count_char_position(\"AbgdeF\") == 5"], "model_name": "x-ai/grok-4-fast", "generated_code": "def count_char_position(s: str) -> int:\n    count = 0\n    for i in range(len(s)):\n        char = s[i].lower()\n        pos = i + 1\n        if pos > 26:\n            continue\n        expected = chr(ord('a') + pos - 1)\n        if char == expected:\n            count += 1\n    return count"}
{"benchmark": "mbpp", "task_id": "226", "prompt": "Write a python function to remove the characters which have odd index values of a given string.", "reference_code": "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result", "test_imports": [], "test_list": ["assert odd_values_string('abcdef') == 'ace'", "assert odd_values_string('python') == 'pto'", "assert odd_values_string('data') == 'dt'", "assert odd_values_string('lambs') == 'lms'"], "model_name": "x-ai/grok-4-fast", "generated_code": "def odd_values_string(s):\n    return s[::2]"}
{"benchmark": "mbpp", "task_id": "230", "prompt": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.", "reference_code": "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2", "test_imports": [], "test_list": ["assert replace_blank(\"hello people\",'@')==(\"hello@people\")", "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")", "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"], "model_name": "x-ai/grok-4-fast", "generated_code": "def replace_blank(s: str, char: str) -> str:\n    return s.replace(' ', char)"}
{"benchmark": "mbpp", "task_id": "234", "prompt": "Write a function to find the volume of a cube given its side length.", "reference_code": "def volume_cube(l):\n  volume = l * l * l\n  return volume", "test_imports": [], "test_list": ["assert volume_cube(3)==27", "assert volume_cube(2)==8", "assert volume_cube(5)==125"], "model_name": "x-ai/grok-4-fast", "generated_code": "def volume_cube(side):\n    return side ** 3"}
{"benchmark": "mbpp", "task_id": "224", "prompt": "Write a python function to count the number of set bits (binary digits with value 1) in a given number.", "reference_code": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count ", "test_imports": [], "test_list": ["assert count_Set_Bits(2) == 1", "assert count_Set_Bits(4) == 1", "assert count_Set_Bits(6) == 2"], "model_name": "x-ai/grok-4-fast", "generated_code": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"}
{"benchmark": "mbpp", "task_id": "233", "prompt": "Write a function to find the lateral surface area of a cylinder.", "reference_code": "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface", "test_imports": ["import math"], "test_list": ["assert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)", "assert math.isclose(lateralsuface_cylinder(4,5), 125.66000000000001, rel_tol=0.001)", "assert math.isclose(lateralsuface_cylinder(4,10), 251.32000000000002, rel_tol=0.001)"], "model_name": "x-ai/grok-4-fast", "generated_code": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    return 2 * math.pi * radius * height"}
{"benchmark": "mbpp", "task_id": "141", "prompt": "Write a function to sort a list of elements.", "reference_code": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums", "test_imports": [], "test_list": ["assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]", "assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]", "assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"], "model_name": "x-ai/grok-4-fast", "generated_code": "def pancake_sort(arr):\n    n = len(arr)\n    for i in range(n - 1, 0, -1):\n        # Find index of maximum element in arr[0..i]\n        max_idx = 0\n        for j in range(i + 1):\n            if arr[j] > arr[max_idx]:\n                max_idx = j\n        # If maximum is not already at position i\n        if max_idx != i:\n            # Flip arr[0..max_idx] to bring max to front\n            arr[:max_idx + 1] = arr[:max_idx + 1][::-1]\n            # Flip arr[0..i] to bring max to position i\n            arr[:i + 1] = arr[:i + 1][::-1]\n    return arr"}
{"benchmark": "mbpp", "task_id": "242", "prompt": "Write a function to count the total number of characters in a string.", "reference_code": "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total", "test_imports": [], "test_list": ["assert count_charac(\"python programming\")==18", "assert count_charac(\"language\")==8", "assert count_charac(\"words\")==5"], "model_name": "x-ai/grok-4-fast", "generated_code": "def count_charac(s):\n    return len(s)"}
{"benchmark": "mbpp", "task_id": "238", "prompt": "Write a python function to count the number of non-empty substrings of a given string.", "reference_code": "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); ", "test_imports": [], "test_list": ["assert number_of_substrings(\"abc\") == 6", "assert number_of_substrings(\"abcd\") == 10", "assert number_of_substrings(\"abcde\") == 15"], "model_name": "x-ai/grok-4-fast", "generated_code": "def number_of_substrings(s: str) -> int:\n    n = len(s)\n    return n * (n + 1) // 2"}
{"benchmark": "mbpp", "task_id": "162", "prompt": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).", "reference_code": "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)", "test_imports": [], "test_list": ["assert sum_series(6) == 12", "assert sum_series(10) == 30", "assert sum_series(9) == 25"], "model_name": "x-ai/grok-4-fast", "generated_code": "def sum_series(n):\n    total = 0\n    for i in range((n // 2) + 1):\n        total += n - 2 * i\n    return total"}
{"benchmark": "mbpp", "task_id": "167", "prompt": "Write a python function to find the smallest power of 2 greater than or equal to n.", "reference_code": "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; ", "test_imports": [], "test_list": ["assert next_power_of_2(0) == 1", "assert next_power_of_2(5) == 8", "assert next_power_of_2(17) == 32"], "model_name": "x-ai/grok-4-fast", "generated_code": "def next_power_of_2(n):\n    if n <= 0:\n        return 1\n    bits = n.bit_length()\n    power = 1 << (bits - 1)\n    if power == n:\n        return n\n    else:\n        return 1 << bits"}
{"benchmark": "mbpp", "task_id": "237", "prompt": "Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.", "reference_code": "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) ", "test_imports": [], "test_list": ["assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}", "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}", "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"], "model_name": "x-ai/grok-4-fast", "generated_code": "def check_occurences(lst):\n    count_dict = {}\n    for tup in lst:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    return count_dict"}
{"benchmark": "mbpp", "task_id": "229", "prompt": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.", "reference_code": "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr", "test_imports": [], "test_list": ["assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]", "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]", "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"], "model_name": "x-ai/grok-4-fast", "generated_code": "def re_arrange_array(arr, n):\n    if n <= 0 or n > len(arr):\n        return arr\n    neg = []\n    pos = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    for i in range(len(neg)):\n        arr[i] = neg[i]\n    for i in range(len(pos)):\n        arr[len(neg) + i] = pos[i]\n    return arr"}
{"benchmark": "mbpp", "task_id": "228", "prompt": "Write a python function to check whether all the bits are unset in the given range or not.", "reference_code": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False", "test_imports": [], "test_list": ["assert all_Bits_Set_In_The_Given_Range(4,1,2) == True", "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True", "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False"], "model_name": "x-ai/grok-4-fast", "generated_code": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    if l > r:\n        return False\n    mask = ((1 << (r - l + 1)) - 1) << l\n    return (n & mask) == 0"}
{"benchmark": "mbpp", "task_id": "232", "prompt": "Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.", "reference_code": "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest", "test_imports": [], "test_list": ["assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])", "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5))==set([100,90,80,70,60])", "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3))==set([100,90,80])"], "model_name": "x-ai/grok-4-fast", "generated_code": "def larg_nnum(lst, n):\n    return sorted(lst, reverse=True)[:n]"}
{"benchmark": "mbpp", "task_id": "248", "prompt": "Write a function that takes in an integer n and calculates the harmonic sum of n-1.", "reference_code": "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) ", "test_imports": ["import math"], "test_list": ["assert math.isclose(harmonic_sum(7), 2.5928571428571425, rel_tol=0.001)", "assert math.isclose(harmonic_sum(4), 2.083333333333333, rel_tol=0.001)", "assert math.isclose(harmonic_sum(19), 3.547739657143682, rel_tol=0.001)"], "model_name": "x-ai/grok-4-fast", "generated_code": "def harmonic_sum(n):\n    if n <= 1:\n        return 0.0\n    total = 0.0\n    for k in range(1, n):\n        total += 1.0 / k\n    return total"}
{"benchmark": "mbpp", "task_id": "257", "prompt": "Write a function that takes in two numbers and returns a tuple with the second number and then the first number.", "reference_code": "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)", "test_imports": [], "test_list": ["assert swap_numbers(10,20)==(20,10)", "assert swap_numbers(15,17)==(17,15)", "assert swap_numbers(100,200)==(200,100)"], "model_name": "x-ai/grok-4-fast", "generated_code": "def swap_numbers(a, b):\n    return (b, a)"}
{"benchmark": "mbpp", "task_id": "252", "prompt": "Write a python function to convert complex numbers to polar coordinates.", "reference_code": "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) ", "test_imports": [], "test_list": ["assert convert(1) == (1.0, 0.0)", "assert convert(4) == (4.0,0.0)", "assert convert(5) == (5.0,0.0)"], "model_name": "x-ai/grok-4-fast", "generated_code": "import math\n\ndef convert(z):\n    a = z.real\n    b = z.imag\n    r = math.sqrt(a**2 + b**2)\n    theta = math.atan2(b, a)\n    return r, theta"}
{"benchmark": "mbpp", "task_id": "250", "prompt": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.", "reference_code": "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count ", "test_imports": [], "test_list": ["assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0", "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3", "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"], "model_name": "x-ai/grok-4-fast", "generated_code": "def count_X(tup, element):\n    return tup.count(element)"}
{"benchmark": "mbpp", "task_id": "223", "prompt": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)", "reference_code": "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1", "test_imports": [], "test_list": ["assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True", "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False", "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True", "assert is_majority([1, 1, 2, 2], 5, 1) == False"], "model_name": "x-ai/grok-4-fast", "generated_code": "def find_first(arr, n, k):\n    low = 0\n    high = n - 1\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == k:\n            result = mid\n            high = mid - 1\n        elif arr[mid] < k:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result\n\ndef find_last(arr, n, k):\n    low = 0\n    high = n - 1\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == k:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < k:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result\n\ndef is_majority(arr, n, k):\n    first = find_first(arr, n, k)\n    if first == -1:\n        return False\n    last = find_last(arr, n, k)\n    count = last - first + 1\n    return count > n // 2"}
{"benchmark": "mbpp", "task_id": "253", "prompt": "Write a python function that returns the number of integer elements in a given list.", "reference_code": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr", "test_imports": [], "test_list": ["assert count_integer([1,2,'abc',1.2]) == 2", "assert count_integer([1,2,3]) == 3", "assert count_integer([1,1.2,4,5.1]) == 2"], "model_name": "x-ai/grok-4-fast", "generated_code": "def count_integer(lst):\n    \"\"\"\n    Returns the number of integer elements in the given list.\n    \n    Args:\n    lst (list): The input list to check.\n    \n    Returns:\n    int: The count of integer elements.\n    \"\"\"\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"}
{"benchmark": "mbpp", "task_id": "123", "prompt": "Write a function to sum all amicable numbers from 1 to a specified number.", "reference_code": "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)", "test_imports": [], "test_list": ["assert amicable_numbers_sum(999)==504", "assert amicable_numbers_sum(9999)==31626", "assert amicable_numbers_sum(99)==0"], "model_name": "x-ai/grok-4-fast", "generated_code": "def sum_proper_divisors(x):\n    if x <= 1:\n        return 0\n    total = 1\n    for i in range(2, int(x**0.5) + 1):\n        if x % i == 0:\n            total += i\n            other = x // i\n            if other != i:\n                total += other\n    return total\n\ndef compute_sum_divisors(n):\n    sod = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(i, n + 1, i):\n            sod[j] += i\n    return sod\n\ndef amicable_numbers_sum(n):\n    if n < 1:\n        return 0\n    sod = compute_sum_divisors(n)\n    proper = [sod[i] - i for i in range(n + 1)]\n    total = 0\n    for i in range(1, n + 1):\n        s = proper[i]\n        if s != i:\n            if s <= n:\n                t = proper[s]\n            else:\n                t = sum_proper_divisors(s)\n            if t == i:\n                total += i\n    return total"}
{"benchmark": "mbpp", "task_id": "246", "prompt": "Write a function for computing square roots using the babylonian method.", "reference_code": "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;", "test_imports": ["import math"], "test_list": ["assert math.isclose(babylonian_squareroot(10), 3.162277660168379, rel_tol=0.001)", "assert math.isclose(babylonian_squareroot(2), 1.414213562373095, rel_tol=0.001)", "assert math.isclose(babylonian_squareroot(9), 3.0, rel_tol=0.001)"], "model_name": "x-ai/grok-4-fast", "generated_code": "def babylonian_squareroot(x):\n    if x < 0:\n        raise ValueError(\"Cannot compute square root of negative number\")\n    if x == 0:\n        return 0.0\n    y = x / 2.0\n    while True:\n        y_new = (y + x / y) / 2.0\n        if abs(y_new - y) < 1e-9:\n            return y_new\n        y = y_new"}
{"benchmark": "mbpp", "task_id": "259", "prompt": "Write a function to maximize the given two tuples.", "reference_code": "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ", "test_imports": [], "test_list": ["assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))", "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))", "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"], "model_name": "x-ai/grok-4-fast", "generated_code": "def maximize_elements(t1, t2):\n    return tuple(max(x, y) for x, y in zip(t1, t2))"}
{"benchmark": "mbpp", "task_id": "251", "prompt": "Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.", "reference_code": "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list", "test_imports": [], "test_list": ["assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']", "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']", "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad']"], "model_name": "x-ai/grok-4-fast", "generated_code": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result"}
{"benchmark": "mbpp", "task_id": "249", "prompt": "Write a function to find the intersection of two arrays.", "reference_code": "def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result", "test_imports": [], "test_list": ["assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]", "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]", "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"], "model_name": "x-ai/grok-4-fast", "generated_code": "def intersection_array(nums1, nums2):\n    return list(set(nums1) & set(nums2))"}
{"benchmark": "mbpp", "task_id": "262", "prompt": "Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.", "reference_code": "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]", "test_imports": [], "test_list": ["assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])", "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])", "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"], "model_name": "x-ai/grok-4-fast", "generated_code": "def split_two_parts(lst, L):\n    \"\"\"\n    Splits the list into two parts: first part of length L, second the remainder.\n    \n    Args:\n    lst (list): The input list.\n    L (int): The length of the first part.\n    \n    Returns:\n    tuple: (first_part, second_part)\n    \"\"\"\n    first_part = lst[:L]\n    second_part = lst[L:]\n    return (first_part, second_part)"}
{"benchmark": "mbpp", "task_id": "240", "prompt": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.", "reference_code": "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n", "test_imports": [], "test_list": ["assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]", "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]", "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"], "model_name": "x-ai/grok-4-fast", "generated_code": "def replace_list(a, b):\n    a[-1:] = b"}
{"benchmark": "mbpp", "task_id": "269", "prompt": "Write a function to find the ascii value of a character.", "reference_code": "def ascii_value(k):\n  ch=k\n  return ord(ch)", "test_imports": [], "test_list": ["assert ascii_value('A')==65", "assert ascii_value('R')==82", "assert ascii_value('S')==83"], "model_name": "x-ai/grok-4-fast", "generated_code": "def ascii_value(char):\n    \"\"\"\n    Returns the ASCII value of the given character.\n    \n    Args:\n    char (str): A single character.\n    \n    Returns:\n    int: The ASCII value of the character.\n    \"\"\"\n    if len(char) != 1:\n        raise ValueError(\"Input must be a single character\")\n    return ord(char)"}
{"benchmark": "mbpp", "task_id": "261", "prompt": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.", "reference_code": "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "test_imports": [], "test_list": ["assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)", "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)", "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"], "model_name": "x-ai/grok-4-fast", "generated_code": "def division_elements(t1, t2):\n    return tuple(x / y for x, y in zip(t1, t2))"}
{"benchmark": "mbpp", "task_id": "239", "prompt": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.", "reference_code": "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]", "test_imports": [], "test_list": ["assert get_total_number_of_sequences(10, 4) == 4", "assert get_total_number_of_sequences(5, 2) == 6", "assert get_total_number_of_sequences(16, 3) == 84"], "model_name": "x-ai/grok-4-fast", "generated_code": "def get_total_number_of_sequences(m, n):\n    if n == 0:\n        return 0\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for j in range(1, m + 1):\n        dp[1][j] = 1\n    for i in range(2, n + 1):\n        prefix = [0] * (m + 2)\n        for j in range(1, m + 1):\n            prefix[j] = prefix[j - 1] + dp[i - 1][j]\n        for j in range(1, m + 1):\n            max_k = j // 2\n            dp[i][j] = prefix[max_k]\n    total = sum(dp[n][j] for j in range(1, m + 1))\n    return total"}
{"benchmark": "mbpp", "task_id": "255", "prompt": "Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.", "reference_code": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n", "test_imports": [], "test_list": ["assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]", "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]", "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"], "model_name": "x-ai/grok-4-fast", "generated_code": "import itertools\n\ndef combinations_colors(colors, n):\n    return list(itertools.combinations_with_replacement(colors, n))"}
{"benchmark": "mbpp", "task_id": "247", "prompt": "Write a function to find the length of the longest palindromic subsequence in the given string.", "reference_code": "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]", "test_imports": [], "test_list": ["assert lps(\"TENS FOR TENS\") == 5", "assert lps(\"CARDIO FOR CARDS\") == 7", "assert lps(\"PART OF THE JOURNEY IS PART\") == 9"], "model_name": "x-ai/grok-4-fast", "generated_code": "def lps(s: str) -> int:\n    n = len(s)\n    if n == 0:\n        return 0\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]"}
{"benchmark": "mbpp", "task_id": "276", "prompt": "Write a function that takes in the radius and height of a cylinder and returns the the volume.", "reference_code": "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume", "test_imports": ["import math"], "test_list": ["assert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)", "assert math.isclose(volume_cylinder(4,5), 251.32000000000002, rel_tol=0.001)", "assert math.isclose(volume_cylinder(4,10), 502.64000000000004, rel_tol=0.001)"], "model_name": "x-ai/grok-4-fast", "generated_code": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius ** 2 * height"}
{"benchmark": "mbpp", "task_id": "272", "prompt": "Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.", "reference_code": "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) ", "test_imports": [], "test_list": ["assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]", "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]", "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"], "model_name": "x-ai/grok-4-fast", "generated_code": "def rear_extract(tuples_list):\n    return [t[-1] for t in tuples_list]"}
{"benchmark": "mbpp", "task_id": "264", "prompt": "Write a function to calculate a dog's age in dog's years.", "reference_code": "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age", "test_imports": [], "test_list": ["assert dog_age(12)==61", "assert dog_age(15)==73", "assert dog_age(24)==109"], "model_name": "x-ai/grok-4-fast", "generated_code": "def dog_age(age):\n    if age <= 0:\n        return 0\n    elif age == 1:\n        return 15\n    elif age == 2:\n        return 24\n    else:\n        return 24 + (age - 2) * 5"}
{"benchmark": "mbpp", "task_id": "245", "prompt": "Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.", "reference_code": "def max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum", "test_imports": [], "test_list": ["assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194", "assert max_sum([80, 60, 30, 40, 20, 10]) == 210", "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30]) == 138"], "model_name": "x-ai/grok-4-fast", "generated_code": "def max_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    inc = [0] * n\n    dec = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[j] < arr[i]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    max_sum_val = 0\n    for i in range(n):\n        current = inc[i] + dec[i] - arr[i]\n        max_sum_val = max(max_sum_val, current)\n    return max_sum_val"}
{"benchmark": "mbpp", "task_id": "277", "prompt": "Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.", "reference_code": "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result", "test_imports": [], "test_list": ["assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}", "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}", "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"], "model_name": "x-ai/grok-4-fast", "generated_code": "def dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n}"}
{"benchmark": "mbpp", "task_id": "265", "prompt": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.", "reference_code": "def list_split(S, step):\n    return [S[i::step] for i in range(step)]", "test_imports": [], "test_list": ["assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]", "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]", "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]"], "model_name": "x-ai/grok-4-fast", "generated_code": "def list_split(lst, n):\n    result = []\n    for i in range(0, len(lst), n):\n        result.append(lst[i:i + n])\n    return result"}
{"benchmark": "mbpp", "task_id": "256", "prompt": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.", "reference_code": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr", "test_imports": [], "test_list": ["assert count_Primes_nums(5) == 2", "assert count_Primes_nums(10) == 4", "assert count_Primes_nums(100) == 25"], "model_name": "x-ai/grok-4-fast", "generated_code": "def count_Primes_nums(n):\n    if n < 2:\n        return 0\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n    return sum(is_prime)"}
{"benchmark": "mbpp", "task_id": "266", "prompt": "Write a function to find the lateral surface area of a cube given its side length.", "reference_code": "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA", "test_imports": [], "test_list": ["assert lateralsurface_cube(5)==100", "assert lateralsurface_cube(9)==324", "assert lateralsurface_cube(10)==400"], "model_name": "x-ai/grok-4-fast", "generated_code": "def lateralsurface_cube(side):\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n    Lateral surface area for a cube is 4 * side^2.\n    \"\"\"\n    return 4 * side ** 2"}
{"benchmark": "mbpp", "task_id": "273", "prompt": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.", "reference_code": "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) ", "test_imports": [], "test_list": ["assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)", "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)", "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"], "model_name": "x-ai/grok-4-fast", "generated_code": "def substract_elements(t1, t2):\n    return tuple(a - b for a, b in zip(t1, t2))"}
{"benchmark": "mbpp", "task_id": "267", "prompt": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.", "reference_code": "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) ", "test_imports": [], "test_list": ["assert square_Sum(2) == 10", "assert square_Sum(3) == 35", "assert square_Sum(4) == 84"], "model_name": "x-ai/grok-4-fast", "generated_code": "def square_Sum(n):\n    return n * (2 * n - 1) * (2 * n + 1) // 3"}
{"benchmark": "mbpp", "task_id": "280", "prompt": "Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).", "reference_code": "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos", "test_imports": [], "test_list": ["assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)", "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)", "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"], "model_name": "x-ai/grok-4-fast", "generated_code": "def sequential_search(array, element):\n    for i, item in enumerate(array):\n        if item == element:\n            return True, i\n    return False, -1"}
{"benchmark": "mbpp", "task_id": "244", "prompt": "Write a python function to find the next perfect square greater than a given number.", "reference_code": "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN ", "test_imports": [], "test_list": ["assert next_Perfect_Square(35) == 36", "assert next_Perfect_Square(6) == 9", "assert next_Perfect_Square(9) == 16"], "model_name": "x-ai/grok-4-fast", "generated_code": "import math\n\ndef next_Perfect_Square(n):\n    root = int(math.sqrt(n)) + 1\n    return root ** 2"}
{"benchmark": "mbpp", "task_id": "281", "prompt": "Write a python function to check if the elements of a given list are unique or not.", "reference_code": "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True", "test_imports": [], "test_list": ["assert all_unique([1,2,3]) == True", "assert all_unique([1,2,1,2]) == False", "assert all_unique([1,2,3,4,5]) == True"], "model_name": "x-ai/grok-4-fast", "generated_code": "def all_unique(elements):\n    \"\"\"\n    Check if all elements in the given list are unique.\n    \n    Args:\n    elements (list): The list to check for uniqueness.\n    \n    Returns:\n    bool: True if all elements are unique, False otherwise.\n    \"\"\"\n    return len(set(elements)) == len(elements)"}
{"benchmark": "mbpp", "task_id": "268", "prompt": "Write a function to find the n'th star number.", "reference_code": "def find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) ", "test_imports": [], "test_list": ["assert find_star_num(3) == 37", "assert find_star_num(4) == 73", "assert find_star_num(5) == 121"], "model_name": "x-ai/grok-4-fast", "generated_code": "def find_star_num(n):\n    return 6 * n * n - 6 * n + 1"}
{"benchmark": "mbpp", "task_id": "271", "prompt": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.", "reference_code": "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; ", "test_imports": [], "test_list": ["assert even_Power_Sum(2) == 1056", "assert even_Power_Sum(3) == 8832", "assert even_Power_Sum(1) == 32"], "model_name": "x-ai/grok-4-fast", "generated_code": "def even_Power_Sum(n):\n    if n <= 0:\n        return 0\n    sum_k5 = n**2 * (n + 1)**2 * (2 * n**2 + 2 * n - 1) // 12\n    return 32 * sum_k5"}
{"benchmark": "mbpp", "task_id": "284", "prompt": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.", "reference_code": "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element", "test_imports": [], "test_list": ["assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False", "assert check_element([1,2,3,4],7)==False", "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"], "model_name": "x-ai/grok-4-fast", "generated_code": "def check_element(lst, element):\n    return all(x == element for x in lst)"}
{"benchmark": "mbpp", "task_id": "274", "prompt": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.", "reference_code": "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) ", "test_imports": [], "test_list": ["assert even_binomial_Coeff_Sum(4) == 8", "assert even_binomial_Coeff_Sum(6) == 32", "assert even_binomial_Coeff_Sum(2) == 2"], "model_name": "x-ai/grok-4-fast", "generated_code": "def even_binomial_Coeff_Sum(n):\n    return 2 ** (n - 1)"}
{"benchmark": "mbpp", "task_id": "282", "prompt": "Write a function to subtract two lists element-wise.", "reference_code": "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)", "test_imports": [], "test_list": ["assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]", "assert sub_list([1,2],[3,4])==[-2,-2]", "assert sub_list([90,120],[50,70])==[40,50]"], "model_name": "x-ai/grok-4-fast", "generated_code": "def sub_list(a, b):\n    return [x - y for x, y in zip(a, b)]"}
{"benchmark": "mbpp", "task_id": "270", "prompt": "Write a python function to find the sum of even numbers at even positions of a list.", "reference_code": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum", "test_imports": [], "test_list": ["assert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30", "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26", "assert sum_even_and_even_index([5, 6, 12, 1]) == 12"], "model_name": "x-ai/grok-4-fast", "generated_code": "def sum_even_and_even_index(numbers):\n    total = 0\n    for index, num in enumerate(numbers):\n        if index % 2 == 0 and num % 2 == 0:\n            total += num\n    return total"}
{"benchmark": "mbpp", "task_id": "290", "prompt": "Write a function to find the list of maximum length in a list of lists.", "reference_code": "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)", "test_imports": [], "test_list": ["assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])", "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])", "assert max_length([[5], [15,20,25]])==(3, [15,20,25])"], "model_name": "x-ai/grok-4-fast", "generated_code": "def max_length(lists):\n    if not lists:\n        return []\n    return max(lists, key=len)"}
{"benchmark": "mbpp", "task_id": "287", "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.", "reference_code": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)", "test_imports": [], "test_list": ["assert square_Sum(2) == 20", "assert square_Sum(3) == 56", "assert square_Sum(4) == 120"], "model_name": "x-ai/grok-4-fast", "generated_code": "def square_Sum(n):\n    if n <= 0:\n        return 0\n    return (2 * n * (n + 1) * (2 * n + 1)) // 3"}
{"benchmark": "mbpp", "task_id": "138", "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.", "reference_code": "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True", "test_imports": [], "test_list": ["assert is_Sum_Of_Powers_Of_Two(10) == True", "assert is_Sum_Of_Powers_Of_Two(7) == False", "assert is_Sum_Of_Powers_Of_Two(14) == True"], "model_name": "x-ai/grok-4-fast", "generated_code": "def is_Sum_Of_Powers_Of_Two(n):\n    return n > 0 and n % 2 == 0"}
{"benchmark": "mbpp", "task_id": "125", "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.", "reference_code": "def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0", "test_imports": [], "test_list": ["assert find_length(\"11000010001\") == 6", "assert find_length(\"10111\") == 1", "assert find_length(\"11011101100101\") == 2"], "model_name": "x-ai/grok-4-fast", "generated_code": "def find_length(s: str) -> int:\n    if not s:\n        return 0\n    n = len(s)\n    a = [1 if c == '0' else -1 for c in s]\n    # Maximum subarray sum\n    max_ending_here = a[0]\n    max_so_far = a[0]\n    for i in range(1, n):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    max_sum = max_so_far\n    # Minimum subarray sum\n    min_ending_here = a[0]\n    min_so_far = a[0]\n    for i in range(1, n):\n        min_ending_here = min(a[i], min_ending_here + a[i])\n        min_so_far = min(min_so_far, min_ending_here)\n    min_sum = min_so_far\n    return max(max_sum, -min_sum)"}
{"benchmark": "mbpp", "task_id": "283", "prompt": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.", "reference_code": "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True", "test_imports": [], "test_list": ["assert validate(1234) == True", "assert validate(51241) == False", "assert validate(321) == True"], "model_name": "x-ai/grok-4-fast", "generated_code": "def validate(n):\n    s = str(abs(n))\n    freq = {}\n    for c in s:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    for c, count in freq.items():\n        d = int(c)\n        if count > d:\n            return False\n    return True"}
{"benchmark": "mbpp", "task_id": "295", "prompt": "Write a function to return the sum of all divisors of a number.", "reference_code": "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)", "test_imports": [], "test_list": ["assert sum_div(8)==7", "assert sum_div(12)==16", "assert sum_div(7)==1"], "model_name": "x-ai/grok-4-fast", "generated_code": "def sum_div(n):\n    if n < 1:\n        return 0\n    total = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            total += i\n            if i != n // i:\n                total += n // i\n        i += 1\n    return total"}
{"benchmark": "mbpp", "task_id": "285", "prompt": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.", "reference_code": "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False", "test_imports": [], "test_list": ["assert text_match_two_three(\"ac\")==(False)", "assert text_match_two_three(\"dc\")==(False)", "assert text_match_two_three(\"abbbba\")==(True)"], "model_name": "x-ai/grok-4-fast", "generated_code": "import re\n\ndef text_match_two_three(text: str) -> bool:\n    \"\"\"\n    Checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    \"\"\"\n    pattern = r'a(bb|bbb)'\n    return bool(re.search(pattern, text))"}
{"benchmark": "mbpp", "task_id": "292", "prompt": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).", "reference_code": "def find(n,m):  \n    q = n//m \n    return (q)", "test_imports": [], "test_list": ["assert find(10,3) == 3", "assert find(4,2) == 2", "assert find(20,5) == 4"], "model_name": "x-ai/grok-4-fast", "generated_code": "def find(a, b):\n    return int(a // b)"}
{"benchmark": "mbpp", "task_id": "279", "prompt": "Write a function to find the nth decagonal number.", "reference_code": "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n ", "test_imports": [], "test_list": ["assert is_num_decagonal(3) == 27", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(10) == 370"], "model_name": "x-ai/grok-4-fast", "generated_code": "import math\n\ndef is_num_decagonal(num):\n    if num < 1:\n        return False\n    disc = 9 + 16 * num\n    sqrt_disc = int(math.sqrt(disc) + 0.5)  # Better rounding for large ints\n    if sqrt_disc * sqrt_disc == disc:\n        if (3 + sqrt_disc) % 8 == 0:\n            n = (3 + sqrt_disc) // 8\n            if n > 0:\n                return True\n    return False"}
{"benchmark": "mbpp", "task_id": "299", "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.", "reference_code": "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])", "test_imports": [], "test_list": ["assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)", "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)", "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"], "model_name": "x-ai/grok-4-fast", "generated_code": "def max_aggregate(tuples_list):\n    if not tuples_list:\n        return 0\n    return max(sum(tup) for tup in tuples_list)"}
{"benchmark": "mbpp", "task_id": "260", "prompt": "Write a function to find the nth newman–shanks–williams prime number.", "reference_code": "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)", "test_imports": [], "test_list": ["assert newman_prime(3) == 7", "assert newman_prime(4) == 17", "assert newman_prime(5) == 41"], "model_name": "x-ai/grok-4-fast", "generated_code": "def newman_prime(n: int) -> int:\n    def is_prime(x: int) -> bool:\n        if x <= 1:\n            return False\n        if x == 2 or x == 3:\n            return True\n        if x % 2 == 0 or x % 3 == 0:\n            return False\n        i = 5\n        while i * i <= x:\n            if x % i == 0 or x % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    count = 0\n    k = 0\n    while True:\n        p = (1 << (3 * k + 2)) + (1 << (2 * k + 1)) + 1\n        if is_prime(p):\n            count += 1\n            if count == n:\n                return p\n        k += 1"}
{"benchmark": "mbpp", "task_id": "297", "prompt": "Write a function to flatten a given nested list structure.", "reference_code": "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list ", "test_imports": [], "test_list": ["assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]", "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]", "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"], "model_name": "x-ai/grok-4-fast", "generated_code": "def flatten_list(nested_list):\n    \"\"\"\n    Flattens a nested list structure into a single-level list.\n    \n    Args:\n    nested_list (list): The nested list to flatten.\n    \n    Returns:\n    list: A flat list containing all elements from the nested structure.\n    \"\"\"\n    result = []\n    for item in nested_list:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"}
{"benchmark": "mbpp", "task_id": "293", "prompt": "Write a function to find the third side of a right angled triangle.", "reference_code": "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s", "test_imports": [], "test_list": ["assert otherside_rightangle(7,8)==10.63014581273465", "assert otherside_rightangle(3,4)==5", "assert otherside_rightangle(7,15)==16.55294535724685"], "model_name": "x-ai/grok-4-fast", "generated_code": "import math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)"}
{"benchmark": "mbpp", "task_id": "305", "prompt": "Write a function to return two words from a list of words starting with letter 'p'.", "reference_code": "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()", "test_imports": [], "test_list": ["assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')", "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')", "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"], "model_name": "x-ai/grok-4-fast", "generated_code": "def start_withp(words):\n    p_words = [word for word in words if word.startswith('p')]\n    return p_words[:2]"}
{"benchmark": "mbpp", "task_id": "294", "prompt": "Write a function to find the maximum value in a given heterogeneous list.", "reference_code": "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)", "test_imports": [], "test_list": ["assert max_val(['Python', 3, 2, 4, 5, 'version'])==5", "assert max_val(['Python', 15, 20, 25])==25", "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"], "model_name": "x-ai/grok-4-fast", "generated_code": "def max_val(lst):\n    return max(lst)"}
{"benchmark": "mbpp", "task_id": "235", "prompt": "Write a python function to set all even bits of a given number.", "reference_code": "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) ", "test_imports": [], "test_list": ["assert even_bit_set_number(10) == 10", "assert even_bit_set_number(20) == 30", "assert even_bit_set_number(30) == 30"], "model_name": "x-ai/grok-4-fast", "generated_code": "def even_bit_set_number(n):\n    mask = ((1 << 32) - 1) // 3\n    return n | mask"}
{"benchmark": "mbpp", "task_id": "301", "prompt": "Write a function to find the depth of a dictionary.", "reference_code": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0", "test_imports": [], "test_list": ["assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4", "assert dict_depth({'a':1, 'b': {'c':'python'}})==2", "assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3"], "model_name": "x-ai/grok-4-fast", "generated_code": "def dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    max_depth = 0\n    for value in d.values():\n        max_depth = max(max_depth, dict_depth(value))\n    return 1 + max_depth"}
{"benchmark": "mbpp", "task_id": "312", "prompt": "Write a function to find the volume of a cone.", "reference_code": "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume", "test_imports": ["import math"], "test_list": ["assert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)", "assert math.isclose(volume_cone(10,15), 1570.7963267948965, rel_tol=0.001)", "assert math.isclose(volume_cone(19,17), 6426.651371693521, rel_tol=0.001)"], "model_name": "x-ai/grok-4-fast", "generated_code": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Calculate the volume of a cone.\n    \n    Args:\n    r (float): radius of the base\n    h (float): height of the cone\n    \n    Returns:\n    float: volume of the cone\n    \"\"\"\n    return (1/3) * math.pi * r**2 * h"}
{"benchmark": "mbpp", "task_id": "278", "prompt": "Write a function to find the number of elements that occurs before the tuple element in the given tuple.", "reference_code": "def count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) ", "test_imports": [], "test_list": ["assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3", "assert count_first_elements((2, 9, (5, 7), 11) ) == 2", "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"], "model_name": "x-ai/grok-4-fast", "generated_code": "def count_first_elements(tup, element):\n    return tup.index(element)"}
{"benchmark": "mbpp", "task_id": "310", "prompt": "Write a function to convert a given string to a tuple of characters.", "reference_code": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result", "test_imports": [], "test_list": ["assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')", "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')", "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"], "model_name": "x-ai/grok-4-fast", "generated_code": "def string_to_tuple(s):\n    return tuple(s)"}
{"benchmark": "mbpp", "task_id": "309", "prompt": "Write a python function to find the maximum of two numbers.", "reference_code": "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b ", "test_imports": [], "test_list": ["assert maximum(5,10) == 10", "assert maximum(-1,-2) == -1", "assert maximum(9,7) == 9"], "model_name": "x-ai/grok-4-fast", "generated_code": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b"}
{"benchmark": "mbpp", "task_id": "296", "prompt": "Write a python function to count inversions in an array.", "reference_code": "def get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count ", "test_imports": [], "test_list": ["assert get_Inv_Count([1,20,6,4,5]) == 5", "assert get_Inv_Count([1,2,1]) == 1", "assert get_Inv_Count([1,2,5,6,1]) == 3"], "model_name": "x-ai/grok-4-fast", "generated_code": "def merge(arr, left, mid, right):\n    temp = [0] * (right - left + 1)\n    i, j, k = left, mid + 1, 0\n    inv_count = 0\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp[k] = arr[i]\n            i += 1\n        else:\n            temp[k] = arr[j]\n            inv_count += (mid - i + 1)\n            j += 1\n        k += 1\n    while i <= mid:\n        temp[k] = arr[i]\n        i += 1\n        k += 1\n    while j <= right:\n        temp[k] = arr[j]\n        j += 1\n        k += 1\n    for idx in range(len(temp)):\n        arr[left + idx] = temp[idx]\n    return inv_count\n\ndef _merge_sort(arr, left, right):\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n        inv_count += _merge_sort(arr, left, mid)\n        inv_count += _merge_sort(arr, mid + 1, right)\n        inv_count += merge(arr, left, mid, right)\n    return inv_count\n\ndef get_Inv_Count(arr):\n    if not arr:\n        return 0\n    return _merge_sort(arr, 0, len(arr) - 1)"}
{"benchmark": "mbpp", "task_id": "393", "prompt": "Write a function to find the list with maximum length.", "reference_code": "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)", "test_imports": [], "test_list": ["assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])", "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])", "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"], "model_name": "x-ai/grok-4-fast", "generated_code": "def max_length_list(lists):\n    \"\"\"\n    Returns the list with the maximum length from the given list of lists.\n    If the input is empty, returns an empty list.\n    \"\"\"\n    if not lists:\n        return []\n    return max(lists, key=len)"}
{"benchmark": "mbpp", "task_id": "389", "prompt": "Write a function to find the n'th lucas number.", "reference_code": "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ", "test_imports": [], "test_list": ["assert find_lucas(9) == 76", "assert find_lucas(4) == 7", "assert find_lucas(3) == 4"], "model_name": "x-ai/grok-4-fast", "generated_code": "def find_lucas(n):\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}
{"benchmark": "mbpp", "task_id": "291", "prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.", "reference_code": "def count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]", "test_imports": [], "test_list": ["assert count_no_of_ways(2, 4) == 16", "assert count_no_of_ways(3, 2) == 6", "assert count_no_of_ways(4, 4) == 228"], "model_name": "x-ai/grok-4-fast", "generated_code": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 1\n    if k == 0:\n        return 0\n    same1 = k\n    same2 = 0\n    for i in range(2, n + 1):\n        new_same1 = (same1 + same2) * (k - 1)\n        new_same2 = same1\n        same1 = new_same1\n        same2 = new_same2\n    return same1 + same2"}
{"benchmark": "mbpp", "task_id": "394", "prompt": "Write a function to check if given tuple contains no duplicates.", "reference_code": "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res ", "test_imports": [], "test_list": ["assert check_distinct((1, 4, 5, 6, 1, 4)) == False", "assert check_distinct((1, 4, 5, 6)) == True", "assert check_distinct((2, 3, 4, 5, 6)) == True"], "model_name": "x-ai/grok-4-fast", "generated_code": "def check_distinct(tup):\n    return len(tup) == len(set(tup))"}
{"benchmark": "mbpp", "task_id": "397", "prompt": "Write a function to find the median of three numbers.", "reference_code": "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median", "test_imports": [], "test_list": ["assert median_numbers(25,55,65)==55.0", "assert median_numbers(20,10,30)==20.0", "assert median_numbers(15,45,75)==45.0"], "model_name": "x-ai/grok-4-fast", "generated_code": "def median_numbers(a, b, c):\n    nums = sorted([a, b, c])\n    return nums[1]"}
{"benchmark": "mbpp", "task_id": "395", "prompt": "Write a python function to find the first non-repeated character in a given string.", "reference_code": "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None", "test_imports": [], "test_list": ["assert first_non_repeating_character(\"abcabc\") == None", "assert first_non_repeating_character(\"abc\") == \"a\"", "assert first_non_repeating_character(\"ababc\") == \"c\""], "model_name": "x-ai/grok-4-fast", "generated_code": "def first_non_repeating_character(s: str) -> str:\n    if not s:\n        return None\n    \n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    for char in s:\n        if char_count[char] == 1:\n            return char\n    \n    return None"}
{"benchmark": "mbpp", "task_id": "398", "prompt": "Write a function to compute the sum of digits of each number of a given list.", "reference_code": "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())", "test_imports": [], "test_list": ["assert sum_of_digits([10,2,56])==14", "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19", "assert sum_of_digits([10,20,-4,5,-70])==19"], "model_name": "x-ai/grok-4-fast", "generated_code": "def sum_of_digits(numbers):\n    result = []\n    for num in numbers:\n        if num == 0:\n            result.append(0)\n            continue\n        digit_sum = 0\n        n = abs(num)  # Handle negative numbers by taking absolute value\n        while n > 0:\n            digit_sum += n % 10\n            n = n // 10\n        result.append(digit_sum)\n    return result"}
{"benchmark": "mbpp", "task_id": "396", "prompt": "Write a function to check whether the given string starts and ends with the same character or not.", "reference_code": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" ", "test_imports": [], "test_list": ["assert check_char(\"abba\") == \"Valid\"", "assert check_char(\"a\") == \"Valid\"", "assert check_char(\"abcd\") == \"Invalid\""], "model_name": "x-ai/grok-4-fast", "generated_code": "def check_char(s):\n    if len(s) < 2:\n        return len(s) == 1\n    return s[0] == s[-1]"}
{"benchmark": "mbpp", "task_id": "307", "prompt": "Write a function to get a colon of a tuple.", "reference_code": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon", "test_imports": [], "test_list": ["assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)", "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))", "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"], "model_name": "x-ai/grok-4-fast", "generated_code": "def colon_tuplex(tup):\n    return tup[:]"}
{"benchmark": "mbpp", "task_id": "300", "prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.", "reference_code": "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res ", "test_imports": ["import math"], "test_list": ["assert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)", "assert math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001)", "assert math.isclose(count_binary_seq(3), 20.0, rel_tol=0.001)"], "model_name": "x-ai/grok-4-fast", "generated_code": "def count_binary_seq(n):\n    if n == 0:\n        return 1\n    res = 1\n    for i in range(1, n + 1):\n        res = res * (n + i) // i\n    return res"}
{"benchmark": "mbpp", "task_id": "308", "prompt": "Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.", "reference_code": "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result", "test_imports": [], "test_list": ["assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]", "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]", "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"], "model_name": "x-ai/grok-4-fast", "generated_code": "def large_product(nums1, nums2, k):\n    products = [x * y for x in nums1 for y in nums2]\n    products.sort(reverse=True)\n    return products[:k]"}
{"benchmark": "mbpp", "task_id": "388", "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.", "reference_code": "def highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res ", "test_imports": [], "test_list": ["assert highest_Power_of_2(10) == 8", "assert highest_Power_of_2(19) == 16", "assert highest_Power_of_2(32) == 32"], "model_name": "x-ai/grok-4-fast", "generated_code": "def highest_Power_of_2(n):\n    if n < 1:\n        return 0\n    return 1 << (n.bit_length() - 1)"}
{"benchmark": "mbpp", "task_id": "400", "prompt": "Write a function to extract the number of unique tuples in the given list.", "reference_code": "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)", "test_imports": [], "test_list": ["assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3", "assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4", "assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"], "model_name": "x-ai/grok-4-fast", "generated_code": "def extract_freq(tup_list):\n    \"\"\"\n    Returns the number of unique tuples in the given list.\n    \"\"\"\n    return len(set(tup_list))"}
{"benchmark": "mbpp", "task_id": "390", "prompt": "Write a function to apply a given format string to all of the elements in a list.", "reference_code": "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string", "test_imports": [], "test_list": ["assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']", "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']", "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"], "model_name": "x-ai/grok-4-fast", "generated_code": "def add_string(elements, format_string):\n    \"\"\"\n    Apply the given format string to each element in the list.\n    \n    Args:\n    elements (list): List of elements to format.\n    format_string (str): Format string with placeholder like {} or {0}.\n    \n    Returns:\n    list: List of formatted strings.\n    \"\"\"\n    return [format_string.format(el) for el in elements]"}
{"benchmark": "mbpp", "task_id": "404", "prompt": "Write a python function to find the minimum of two numbers.", "reference_code": "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b ", "test_imports": [], "test_list": ["assert minimum(1,2) == 1", "assert minimum(-5,-4) == -5", "assert minimum(0,0) == 0"], "model_name": "x-ai/grok-4-fast", "generated_code": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b"}
{"benchmark": "mbpp", "task_id": "405", "prompt": "Write a function to check whether an element exists within a tuple.", "reference_code": "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False", "test_imports": [], "test_list": ["assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True", "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False", "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"], "model_name": "x-ai/grok-4-fast", "generated_code": "def check_tuplex(tup, element):\n    return element in tup"}
{"benchmark": "mbpp", "task_id": "412", "prompt": "Write a python function to remove odd numbers from a given list.", "reference_code": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l", "test_imports": [], "test_list": ["assert remove_odd([1,2,3]) == [2]", "assert remove_odd([2,4,6]) == [2,4,6]", "assert remove_odd([10,20,3]) == [10,20]"], "model_name": "x-ai/grok-4-fast", "generated_code": "def remove_odd(numbers):\n    return [x for x in numbers if x % 2 == 0]"}
{"benchmark": "mbpp", "task_id": "413", "prompt": "Write a function to extract the nth element from a given list of tuples.", "reference_code": "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result", "test_imports": [], "test_list": ["assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']", "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]", "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"], "model_name": "x-ai/grok-4-fast", "generated_code": "def extract_nth_element(tuples_list, n):\n    \"\"\"\n    Extract the nth element from each tuple in the list.\n    \n    Args:\n    tuples_list (list): List of tuples.\n    n (int): Index to extract (0-based).\n    \n    Returns:\n    list: List of nth elements from each tuple.\n    \"\"\"\n    return [tup[n] for tup in tuples_list if len(tup) > n]"}
{"benchmark": "mbpp", "task_id": "109", "prompt": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.", "reference_code": "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count ", "test_imports": [], "test_list": ["assert odd_Equivalent(\"011001\",6) == 3", "assert odd_Equivalent(\"11011\",5) == 4", "assert odd_Equivalent(\"1010\",4) == 2"], "model_name": "x-ai/grok-4-fast", "generated_code": "def odd_Equivalent(s: str, k: int) -> int:\n    n = len(s)\n    if n == 0:\n        return 0\n    total_ones = s.count('1')\n    num_steps = k + 1\n    full = num_steps // n\n    rem = num_steps % n\n    total = full * total_ones\n    count_rem = 0\n    for r in range(rem):\n        p = (r - 1) % n\n        if s[p] == '1':\n            count_rem += 1\n    return total + count_rem"}
{"benchmark": "mbpp", "task_id": "406", "prompt": "Write a python function to find whether the parity of a given number is odd.", "reference_code": "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False", "test_imports": [], "test_list": ["assert find_Parity(12) == False", "assert find_Parity(7) == True", "assert find_Parity(10) == False"], "model_name": "x-ai/grok-4-fast", "generated_code": "def find_Parity(n):\n    return n % 2 != 0"}
{"benchmark": "mbpp", "task_id": "409", "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.", "reference_code": "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min", "test_imports": [], "test_list": ["assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8", "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30", "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100"], "model_name": "x-ai/grok-4-fast", "generated_code": "def min_product_tuple(tuples):\n    if not tuples:\n        raise ValueError(\"List of tuples cannot be empty\")\n    return min(t[0] * t[1] for t in tuples)"}
{"benchmark": "mbpp", "task_id": "306", "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .", "reference_code": "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]", "test_imports": [], "test_list": ["assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11", "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7", "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"], "model_name": "x-ai/grok-4-fast", "generated_code": "def max_sum_increasing_subseq(arr, i, k):\n    if i < 0 or k > len(arr) - 1 or k <= i:\n        raise ValueError(\"Invalid indices\")\n    \n    # DP for max sum increasing subsequence ending at each index up to i\n    dp = [0] * (i + 1)\n    for j in range(i + 1):\n        dp[j] = arr[j]\n        for m in range(j):\n            if arr[m] < arr[j]:\n                dp[j] = max(dp[j], dp[m] + arr[j])\n    \n    # Find the maximum sum including arr[k]\n    max_sum = arr[k]\n    for j in range(i + 1):\n        if arr[j] < arr[k]:\n            max_sum = max(max_sum, dp[j] + arr[k])\n    \n    return max_sum"}
{"benchmark": "mbpp", "task_id": "410", "prompt": "Write a function to find the minimum value in a given heterogeneous list.", "reference_code": "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val", "test_imports": [], "test_list": ["assert min_val(['Python', 3, 2, 4, 5, 'version'])==2", "assert min_val(['Python', 15, 20, 25])==15", "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"], "model_name": "x-ai/grok-4-fast", "generated_code": "def min_val(lst):\n    return min(lst)"}
{"benchmark": "mbpp", "task_id": "392", "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).", "reference_code": "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]", "test_imports": [], "test_list": ["assert get_max_sum(60) == 106", "assert get_max_sum(10) == 12", "assert get_max_sum(2) == 2"], "model_name": "x-ai/grok-4-fast", "generated_code": "def get_max_sum(n):\n    if n <= 0:\n        return 0\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = i\n        a, b, c, d = i // 2, i // 3, i // 4, i // 5\n        dp[i] = max(dp[i], dp[a] + dp[b] + dp[c] + dp[d])\n    return dp[n]"}
{"benchmark": "mbpp", "task_id": "414", "prompt": "Write a python function to check whether any value in a sequence exists in a sequence or not.", "reference_code": "def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False", "test_imports": [], "test_list": ["assert overlapping([1,2,3,4,5],[6,7,8,9]) == False", "assert overlapping([1,2,3],[4,5,6]) == False", "assert overlapping([1,4,5],[1,4,5]) == True"], "model_name": "x-ai/grok-4-fast", "generated_code": "def overlapping(seq1, seq2):\n    \"\"\"\n    Check if any value in seq1 exists in seq2.\n    \n    Args:\n    seq1, seq2: sequences (lists, tuples, etc.)\n    \n    Returns:\n    bool: True if there's any common element, False otherwise.\n    \"\"\"\n    set1 = set(seq1)\n    set2 = set(seq2)\n    return bool(set1 & set2)"}
{"benchmark": "mbpp", "task_id": "411", "prompt": "Write a function to convert the given snake case string to camel case string.", "reference_code": "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))", "test_imports": [], "test_list": ["assert snake_to_camel('android_tv') == 'AndroidTv'", "assert snake_to_camel('google_pixel') == 'GooglePixel'", "assert snake_to_camel('apple_watch') == 'AppleWatch'"], "model_name": "x-ai/grok-4-fast", "generated_code": "def snake_to_camel(snake_str: str) -> str:\n    words = snake_str.split('_')\n    if not words:\n        return ''\n    camel = words[0]\n    for word in words[1:]:\n        if word:  # Skip empty words from multiple underscores\n            camel += word.capitalize()\n    return camel"}
{"benchmark": "mbpp", "task_id": "401", "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.", "reference_code": "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ", "test_imports": [], "test_list": ["assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))", "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))", "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"], "model_name": "x-ai/grok-4-fast", "generated_code": "def add_nested_tuples(t1, t2):\n    \"\"\"\n    Perform index-wise addition of elements in two nested tuples.\n    \n    Args:\n    t1 (tuple): First nested tuple.\n    t2 (tuple): Second nested tuple.\n    \n    Returns:\n    tuple: New nested tuple with summed elements.\n    \"\"\"\n    def add_elements(a, b):\n        if isinstance(a, tuple) and isinstance(b, tuple):\n            return tuple(add_elements(x, y) for x, y in zip(a, b))\n        else:\n            return a + b\n    \n    return tuple(add_elements(a, b) for a, b in zip(t1, t2))"}
{"benchmark": "mbpp", "task_id": "418", "prompt": "Write a python function to find the element of a list having maximum length.", "reference_code": "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList", "test_imports": [], "test_list": ["assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']", "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]", "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"], "model_name": "x-ai/grok-4-fast", "generated_code": "def Find_Max(arr):\n    return max(arr, key=len) if arr else None"}
{"benchmark": "mbpp", "task_id": "426", "prompt": "Write a function to filter odd numbers.", "reference_code": "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums", "test_imports": [], "test_list": ["assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]", "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]", "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"], "model_name": "x-ai/grok-4-fast", "generated_code": "def filter_oddnumbers(numbers):\n    \"\"\"\n    Filters and returns a list of odd numbers from the input list.\n    \n    Args:\n    numbers (list): A list of integers.\n    \n    Returns:\n    list: A list containing only the odd numbers from the input.\n    \"\"\"\n    return [num for num in numbers if num % 2 != 0]"}
{"benchmark": "mbpp", "task_id": "421", "prompt": "Write a function to concatenate each element of tuple by the delimiter.", "reference_code": "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) ", "test_imports": [], "test_list": ["assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'", "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'", "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"], "model_name": "x-ai/grok-4-fast", "generated_code": "def concatenate_tuple(tup, delimiter):\n    \"\"\"\n    Concatenates elements of a tuple using the given delimiter.\n    \n    Args:\n    tup (tuple): Tuple of strings to concatenate.\n    delimiter (str): Delimiter to use between elements.\n    \n    Returns:\n    str: Concatenated string.\n    \"\"\"\n    return delimiter.join(tup)"}
{"benchmark": "mbpp", "task_id": "399", "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.", "reference_code": "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "test_imports": [], "test_list": ["assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)", "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)", "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"], "model_name": "x-ai/grok-4-fast", "generated_code": "def bitwise_xor(tuple1, tuple2):\n    return tuple(x ^ y for x, y in zip(tuple1, tuple2))"}
{"benchmark": "mbpp", "task_id": "420", "prompt": "Write a python function to find the cube sum of first n even natural numbers.", "reference_code": "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum", "test_imports": [], "test_list": ["assert cube_Sum(2) == 72", "assert cube_Sum(3) == 288", "assert cube_Sum(4) == 800"], "model_name": "x-ai/grok-4-fast", "generated_code": "def cube_Sum(n):\n    return 8 * (n * (n + 1) // 2) ** 2"}
{"benchmark": "mbpp", "task_id": "419", "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.", "reference_code": "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum", "test_imports": [], "test_list": ["assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243", "assert round_and_sum([5,2,9,24.3,29])==345", "assert round_and_sum([25.0,56.7,89.2])==513"], "model_name": "x-ai/grok-4-fast", "generated_code": "def round_and_sum(numbers):\n    rounded = [round(num) for num in numbers]\n    total_sum = sum(rounded)\n    return total_sum * len(numbers)"}
{"benchmark": "mbpp", "task_id": "427", "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.", "reference_code": "import re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)", "test_imports": [], "test_list": ["assert change_date_format(\"2026-01-02\") == '02-01-2026'", "assert change_date_format(\"2020-11-13\") == '13-11-2020'", "assert change_date_format(\"2021-04-26\") == '26-04-2021'"], "model_name": "x-ai/grok-4-fast", "generated_code": "def change_date_format(date: str) -> str:\n    \"\"\"\n    Convert date from yyyy-mm-dd to dd-mm-yyyy format.\n    \n    Args:\n    date (str): Date string in yyyy-mm-dd format.\n    \n    Returns:\n    str: Date string in dd-mm-yyyy format.\n    \"\"\"\n    year, month, day = date.split('-')\n    return f\"{day}-{month}-{year}\""}
{"benchmark": "mbpp", "task_id": "424", "prompt": "Write a function to extract only the rear index element of each string in the given tuple.", "reference_code": "def extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) ", "test_imports": [], "test_list": ["assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']", "assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']", "assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"], "model_name": "x-ai/grok-4-fast", "generated_code": "def extract_rear(tup):\n    return tuple(s[-1] for s in tup)"}
{"benchmark": "mbpp", "task_id": "433", "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.", "reference_code": "def check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]", "test_imports": [], "test_list": ["assert check_greater([1, 2, 3, 4, 5], 4) == False", "assert check_greater([2, 3, 4, 5, 6], 8) == True", "assert check_greater([9, 7, 4, 8, 6, 1], 11) == True"], "model_name": "x-ai/grok-4-fast", "generated_code": "def check_greater(num, arr):\n    return all(num > element for element in arr)"}
{"benchmark": "mbpp", "task_id": "422", "prompt": "Write a python function to find the average of cubes of first n natural numbers.", "reference_code": "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) ", "test_imports": [], "test_list": ["assert find_Average_Of_Cube(2) == 4.5", "assert find_Average_Of_Cube(3) == 12", "assert find_Average_Of_Cube(1) == 1"], "model_name": "x-ai/grok-4-fast", "generated_code": "def find_Average_Of_Cube(n):\n    if n <= 0:\n        return 0.0\n    sum_cubes = (n * (n + 1) / 2) ** 2\n    return sum_cubes / n"}
{"benchmark": "mbpp", "task_id": "425", "prompt": "Write a function to count the number of sublists containing a particular element.", "reference_code": "def count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr", "test_imports": [], "test_list": ["assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3", "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3", "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"], "model_name": "x-ai/grok-4-fast", "generated_code": "def count_element_in_list(nested_list, element):\n    count = 0\n    for sublist in nested_list:\n        if element in sublist:\n            count += 1\n    return count"}
{"benchmark": "mbpp", "task_id": "428", "prompt": "Write a function to sort the given array by using shell sort.", "reference_code": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list", "test_imports": [], "test_list": ["assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]", "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]", "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"], "model_name": "x-ai/grok-4-fast", "generated_code": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr"}
{"benchmark": "mbpp", "task_id": "429", "prompt": "Write a function to extract the elementwise and tuples from the given two tuples.", "reference_code": "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "test_imports": [], "test_list": ["assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)", "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)", "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"], "model_name": "x-ai/grok-4-fast", "generated_code": "def and_tuples(t1, t2):\n    return tuple(x and y for x, y in zip(t1, t2))"}
{"benchmark": "mbpp", "task_id": "436", "prompt": "Write a python function to return the negative numbers in a list.", "reference_code": "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out ", "test_imports": [], "test_list": ["assert neg_nos([-1,4,5,-6]) == [-1,-6]", "assert neg_nos([-1,-2,3,4]) == [-1,-2]", "assert neg_nos([-7,-6,8,9]) == [-7,-6]"], "model_name": "x-ai/grok-4-fast", "generated_code": "def neg_nos(lst):\n    return [num for num in lst if num < 0]"}
{"benchmark": "mbpp", "task_id": "415", "prompt": "Write a python function to find a pair with highest product from a given array of integers.", "reference_code": "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    ", "test_imports": [], "test_list": ["assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)", "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)", "assert max_Product([1,2,3]) == (2,3)"], "model_name": "x-ai/grok-4-fast", "generated_code": "def max_Product(arr):\n    if len(arr) < 2:\n        raise ValueError(\"Array must have at least two elements\")\n    arr_sorted = sorted(arr)\n    candidate1 = arr_sorted[0] * arr_sorted[1]\n    candidate2 = arr_sorted[-1] * arr_sorted[-2]\n    return max(candidate1, candidate2)"}
{"benchmark": "mbpp", "task_id": "431", "prompt": "Write a function that takes two lists and returns true if they have at least one common element.", "reference_code": "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result", "test_imports": [], "test_list": ["assert common_element([1,2,3,4,5], [5,6,7,8,9])==True", "assert common_element([1,2,3,4,5], [6,7,8,9])==None", "assert common_element(['a','b','c'], ['d','b','e'])==True"], "model_name": "x-ai/grok-4-fast", "generated_code": "def common_element(list1, list2):\n    return bool(set(list1) & set(list2))"}
{"benchmark": "mbpp", "task_id": "432", "prompt": "Write a function to find the median length of a trapezium.", "reference_code": "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median", "test_imports": [], "test_list": ["assert median_trapezium(15,25,35)==20", "assert median_trapezium(10,20,30)==15", "assert median_trapezium(6,9,4)==7.5"], "model_name": "x-ai/grok-4-fast", "generated_code": "def median_trapezium(a, b):\n    \"\"\"\n    Calculate the length of the median (midsegment) of a trapezium.\n    \n    Args:\n    a (float): Length of one base.\n    b (float): Length of the other base.\n    \n    Returns:\n    float: The median length, (a + b) / 2.\n    \"\"\"\n    return (a + b) / 2"}
{"benchmark": "mbpp", "task_id": "434", "prompt": "Write a function that matches a string that has an a followed by one or more b's.", "reference_code": "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n", "test_imports": [], "test_list": ["assert text_match_one(\"ac\")==False", "assert text_match_one(\"dc\")==False", "assert text_match_one(\"abba\")==True"], "model_name": "x-ai/grok-4-fast", "generated_code": "import re\n\ndef text_match_one(text):\n    return bool(re.match(r'^a+b+$', text))"}
{"benchmark": "mbpp", "task_id": "442", "prompt": "Write a function to find the ration of positive numbers in an array of integers.", "reference_code": "from array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)", "test_imports": [], "test_list": ["assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54", "assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69", "assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56"], "model_name": "x-ai/grok-4-fast", "generated_code": "def positive_count(arr):\n    if not arr:\n        return 0.0\n    count = sum(1 for x in arr if x > 0)\n    return count / len(arr)"}
{"benchmark": "mbpp", "task_id": "408", "prompt": "Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.", "reference_code": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs", "test_imports": [], "test_list": ["assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]", "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]", "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"], "model_name": "x-ai/grok-4-fast", "generated_code": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2 or k == 0:\n        return []\n    heap = []\n    m, n = len(nums1), len(nums2)\n    for j in range(min(k, n)):\n        heapq.heappush(heap, (nums1[0] + nums2[j], 0, j))\n    result = []\n    while heap and len(result) < k:\n        _, i, j = heapq.heappop(heap)\n        result.append([nums1[i], nums2[j]])\n        if i + 1 < m:\n            heapq.heappush(heap, (nums1[i + 1] + nums2[j], i + 1, j))\n    return result"}
{"benchmark": "mbpp", "task_id": "417", "prompt": "Write a function to find common first element in given list of tuple.", "reference_code": "def group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] ", "test_imports": [], "test_list": ["assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]", "assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]", "assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]"], "model_name": "x-ai/grok-4-fast", "generated_code": "from collections import defaultdict\n\ndef group_tuples(tuples_list):\n    groups = defaultdict(list)\n    for t in tuples_list:\n        if len(t) > 0:\n            key = t[0]\n            groups[key].append(t)\n    return dict(groups)"}
{"benchmark": "mbpp", "task_id": "445", "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.", "reference_code": "def index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ", "test_imports": [], "test_list": ["assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))", "assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))", "assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"], "model_name": "x-ai/grok-4-fast", "generated_code": "def index_multiplication(tuple1, tuple2):\n    return tuple(a * b for a, b in zip(tuple1, tuple2))"}
{"benchmark": "mbpp", "task_id": "304", "prompt": "Write a python function to find element at a given index after number of rotations.", "reference_code": "def find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] ", "test_imports": [], "test_list": ["assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3", "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3", "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"], "model_name": "x-ai/grok-4-fast", "generated_code": "def find_Element(arr, d, index):\n    n = len(arr)\n    if n == 0:\n        raise ValueError(\"Array is empty\")\n    rot = d % n\n    orig_idx = (index - rot) % n\n    return arr[orig_idx]"}
{"benchmark": "mbpp", "task_id": "439", "prompt": "Write a function to join a list of multiple integers into a single integer.", "reference_code": "def multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x", "test_imports": [], "test_list": ["assert multiple_to_single([11, 33, 50])==113350", "assert multiple_to_single([-1,2,3,4,5,6])==-123456", "assert multiple_to_single([10,15,20,25])==10152025"], "model_name": "x-ai/grok-4-fast", "generated_code": "def multiple_to_single(numbers):\n    \"\"\"\n    Joins a list of integers into a single integer by concatenating their string representations.\n    \n    Args:\n    numbers (list[int]): List of non-negative integers.\n    \n    Returns:\n    int: The concatenated integer.\n    \n    Raises:\n    ValueError: If the list is empty.\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"Input list cannot be empty\")\n    return int(''.join(map(str, numbers)))"}
{"benchmark": "mbpp", "task_id": "447", "prompt": "Write a function to find cubes of individual elements in a list.", "reference_code": "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums", "test_imports": [], "test_list": ["assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]", "assert cube_nums([10,20,30])==([1000, 8000, 27000])", "assert cube_nums([12,15])==([1728, 3375])"], "model_name": "x-ai/grok-4-fast", "generated_code": "def cube_nums(nums):\n    \"\"\"\n    Returns a list of cubes of individual elements in the input list.\n    \n    Args:\n    nums (list): List of numbers.\n    \n    Returns:\n    list: List of cubed numbers.\n    \"\"\"\n    return [x ** 3 for x in nums]"}
{"benchmark": "mbpp", "task_id": "444", "prompt": "Write a function to trim each tuple by k in the given tuple list.", "reference_code": "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) ", "test_imports": [], "test_list": ["assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'", "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'", "assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"], "model_name": "x-ai/grok-4-fast", "generated_code": "def trim_tuple(tuples, k):\n    \"\"\"\n    Trim each tuple in the list by removing the first k and last k elements.\n    If a tuple has fewer than 2*k elements, return an empty tuple for that one.\n    \"\"\"\n    result = []\n    for t in tuples:\n        start = k\n        end = -k if len(t) > 2 * k else None\n        trimmed = t[start:end] if end is not None else t[start:]\n        result.append(trimmed)\n    return result"}
{"benchmark": "mbpp", "task_id": "451", "prompt": "Write a function to remove all whitespaces from the given string.", "reference_code": "import re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))", "test_imports": [], "test_list": ["assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'", "assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'", "assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"], "model_name": "x-ai/grok-4-fast", "generated_code": "def remove_whitespaces(s):\n    return ''.join(c for c in s if not c.isspace())"}
{"benchmark": "mbpp", "task_id": "458", "prompt": "Write a function to find the area of a rectangle.", "reference_code": "def rectangle_area(l,b):\n  area=l*b\n  return area", "test_imports": [], "test_list": ["assert rectangle_area(10,20)==200", "assert rectangle_area(10,5)==50", "assert rectangle_area(4,2)==8"], "model_name": "x-ai/grok-4-fast", "generated_code": "def rectangle_area(length, width):\n    return length * width"}
{"benchmark": "mbpp", "task_id": "441", "prompt": "Write a function to find the surface area of a cube of a given size.", "reference_code": "def surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea", "test_imports": [], "test_list": ["assert surfacearea_cube(5)==150", "assert surfacearea_cube(3)==54", "assert surfacearea_cube(10)==600"], "model_name": "x-ai/grok-4-fast", "generated_code": "def surfacearea_cube(size):\n    \"\"\"\n    Calculate the surface area of a cube with the given side length.\n    \n    Args:\n    size (float): The side length of the cube.\n    \n    Returns:\n    float: The surface area of the cube.\n    \"\"\"\n    return 6 * (size ** 2)"}
{"benchmark": "mbpp", "task_id": "450", "prompt": "Write a function to extract specified size of strings from a given list of string values.", "reference_code": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result", "test_imports": [], "test_list": ["assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']", "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']", "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"], "model_name": "x-ai/grok-4-fast", "generated_code": "def extract_string(strings, size):\n    \"\"\"\n    Extract strings from the list that have exactly the specified length.\n    \n    Args:\n    strings (list[str]): List of string values.\n    size (int): The desired length of strings to extract.\n    \n    Returns:\n    list[str]: List of strings with the specified length.\n    \"\"\"\n    return [s for s in strings if len(s) == size]"}
{"benchmark": "mbpp", "task_id": "456", "prompt": "Write a function to reverse each string in a given list of string values.", "reference_code": "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result", "test_imports": [], "test_list": ["assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']", "assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']", "assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"], "model_name": "x-ai/grok-4-fast", "generated_code": "def reverse_string_list(lst):\n    return [s[::-1] for s in lst]"}
{"benchmark": "mbpp", "task_id": "460", "prompt": "Write a python function to get the first element of each sublist.", "reference_code": "def Extract(lst): \n    return [item[0] for item in lst] ", "test_imports": [], "test_list": ["assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]", "assert Extract([[1,2,3],[4, 5]]) == [1,4]", "assert Extract([[9,8,1],[1,2]]) == [9,1]"], "model_name": "x-ai/grok-4-fast", "generated_code": "def Extract(nested_list):\n    \"\"\"\n    Extracts the first element from each sublist in the nested list.\n    \n    Args:\n    nested_list (list): A list of lists.\n    \n    Returns:\n    list: A list containing the first element of each sublist.\n    \"\"\"\n    return [sublist[0] for sublist in nested_list]"}
{"benchmark": "mbpp", "task_id": "455", "prompt": "Write a function to check whether the given month number contains 31 days or not.", "reference_code": "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False", "test_imports": [], "test_list": ["assert check_monthnumb_number(5)==True", "assert check_monthnumb_number(2)==False", "assert check_monthnumb_number(6)==False"], "model_name": "x-ai/grok-4-fast", "generated_code": "def check_monthnumb_number(month):\n    thirty_one_days = {1, 3, 5, 7, 8, 10, 12}\n    return month in thirty_one_days"}
{"benchmark": "mbpp", "task_id": "452", "prompt": "Write a function that gives loss amount on a sale if the given amount has loss else return 0.", "reference_code": "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0", "test_imports": [], "test_list": ["assert loss_amount(1500,1200)==0", "assert loss_amount(100,200)==100", "assert loss_amount(2000,5000)==3000"], "model_name": "x-ai/grok-4-fast", "generated_code": "def loss_amount(cost_price, selling_price):\n    if selling_price < cost_price:\n        return cost_price - selling_price\n    else:\n        return 0"}
{"benchmark": "mbpp", "task_id": "454", "prompt": "Write a function that matches a word containing 'z'.", "reference_code": "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False", "test_imports": [], "test_list": ["assert text_match_wordz(\"pythonz.\")==True", "assert text_match_wordz(\"xyz.\")==True", "assert text_match_wordz(\"  lang  .\")==False"], "model_name": "x-ai/grok-4-fast", "generated_code": "def text_match_wordz(text):\n    return any('z' in word for word in text.split())"}
{"benchmark": "mbpp", "task_id": "437", "prompt": "Write a function to remove odd characters in a string.", "reference_code": "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2", "test_imports": [], "test_list": ["assert remove_odd(\"python\")==(\"yhn\")", "assert remove_odd(\"program\")==(\"rga\")", "assert remove_odd(\"language\")==(\"agae\")"], "model_name": "x-ai/grok-4-fast", "generated_code": "def remove_odd(s):\n    \"\"\"\n    Remove characters at odd positions (0-based indexing).\n    Keeps characters at even positions: 0, 2, 4, ...\n    \"\"\"\n    return s[0::2]"}
{"benchmark": "mbpp", "task_id": "443", "prompt": "Write a python function to find the largest negative number from the given list.", "reference_code": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max", "test_imports": [], "test_list": ["assert largest_neg([1,2,3,-4,-6]) == -6", "assert largest_neg([1,2,3,-8,-9]) == -9", "assert largest_neg([1,2,3,4,-1]) == -1"], "model_name": "x-ai/grok-4-fast", "generated_code": "def largest_neg(numbers):\n    return max(n for n in numbers if n < 0)"}
{"benchmark": "mbpp", "task_id": "457", "prompt": "Write a python function to find the sublist having minimum length.", "reference_code": "def Find_Min(lst): \n    return min(lst, key=len) ", "test_imports": [], "test_list": ["assert Find_Min([[1],[1,2],[1,2,3]]) == [1]", "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]", "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"], "model_name": "x-ai/grok-4-fast", "generated_code": "def Find_Min(nested_list):\n    \"\"\"\n    Find the sublist with the minimum length from a list of lists.\n    \n    Args:\n    nested_list (list): A list containing multiple sublists.\n    \n    Returns:\n    list: The sublist with the minimum length. If multiple, returns the first one.\n    \"\"\"\n    if not nested_list:\n        return []\n    return min(nested_list, key=len)"}
{"benchmark": "mbpp", "task_id": "440", "prompt": "Write a function to find the first adverb and their positions in a given sentence.", "reference_code": "import re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))", "test_imports": [], "test_list": ["assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')", "assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')", "assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"], "model_name": "x-ai/grok-4-fast", "generated_code": "def find_adverb_position(sentence):\n    if not sentence:\n        return None\n    words = sentence.split()\n    for i, word in enumerate(words):\n        if word.endswith('ly'):\n            prefix = ' '.join(words[:i])\n            start = len(prefix) + (1 if i > 0 else 0)\n            end = start + len(word)\n            return (word, start, end)\n    return None"}
{"benchmark": "mbpp", "task_id": "464", "prompt": "Write a function to check if all values are same in a dictionary.", "reference_code": "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result", "test_imports": [], "test_list": ["assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False", "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True", "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False"], "model_name": "x-ai/grok-4-fast", "generated_code": "def check_value(d: dict) -> bool:\n    return len(set(d.values())) <= 1"}
{"benchmark": "mbpp", "task_id": "461", "prompt": "Write a python function to count the upper case characters in a given string.", "reference_code": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr", "test_imports": [], "test_list": ["assert upper_ctr('PYthon') == 1", "assert upper_ctr('BigData') == 1", "assert upper_ctr('program') == 0"], "model_name": "x-ai/grok-4-fast", "generated_code": "def upper_ctr(s):\n    return sum(1 for char in s if char.isupper())"}
{"benchmark": "mbpp", "task_id": "448", "prompt": "Write a function to calculate the sum of perrin numbers.", "reference_code": "def cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum", "test_imports": [], "test_list": ["assert cal_sum(9) == 49", "assert cal_sum(10) == 66", "assert cal_sum(11) == 88"], "model_name": "x-ai/grok-4-fast", "generated_code": "def cal_sum(n):\n    if n < 0:\n        return 0\n    if n == 0:\n        return 3\n    if n == 1:\n        return 3\n    total = 5\n    a, b, c = 3, 0, 2\n    for i in range(3, n + 1):\n        next_val = b + a\n        total += next_val\n        a, b, c = b, c, next_val\n    return total"}
{"benchmark": "mbpp", "task_id": "435", "prompt": "Write a python function to find the last digit of a given number.", "reference_code": "def last_Digit(n) :\n    return (n % 10) ", "test_imports": [], "test_list": ["assert last_Digit(123) == 3", "assert last_Digit(25) == 5", "assert last_Digit(30) == 0"], "model_name": "x-ai/grok-4-fast", "generated_code": "def last_Digit(n):\n    return abs(n) % 10"}
{"benchmark": "mbpp", "task_id": "476", "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.", "reference_code": "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum", "test_imports": [], "test_list": ["assert big_sum([1,2,3]) == 4", "assert big_sum([-1,2,3,4]) == 3", "assert big_sum([2,3,6]) == 8"], "model_name": "x-ai/grok-4-fast", "generated_code": "def big_sum(arr):\n    return min(arr) + max(arr)"}
{"benchmark": "mbpp", "task_id": "446", "prompt": "Write a python function to count the occurence of all elements of list in a tuple.", "reference_code": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  ", "test_imports": [], "test_list": ["assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3", "assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6", "assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2"], "model_name": "x-ai/grok-4-fast", "generated_code": "def count_Occurrence(element_list, data_tuple):\n    result = {}\n    for elem in element_list:\n        result[elem] = data_tuple.count(elem)\n    return result"}
{"benchmark": "mbpp", "task_id": "465", "prompt": "Write a function to drop empty items from a given dictionary.", "reference_code": "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1", "test_imports": [], "test_list": ["assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}", "assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}", "assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}"], "model_name": "x-ai/grok-4-fast", "generated_code": "def drop_empty(d):\n    \"\"\"\n    Drop empty items from a given dictionary.\n    Empty means None or empty collections (str, list, dict, set, tuple).\n    \"\"\"\n    result = {}\n    for k, v in d.items():\n        if v is None:\n            continue\n        if isinstance(v, (str, list, dict, set, tuple)):\n            if len(v) == 0:\n                continue\n        result[k] = v\n    return result"}
{"benchmark": "mbpp", "task_id": "471", "prompt": "Write a python function to find the product of the array multiplication modulo n.", "reference_code": "def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n ", "test_imports": [], "test_list": ["assert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9", "assert find_remainder([1,1,1],1) == 0", "assert find_remainder([1,2,1],2) == 0"], "model_name": "x-ai/grok-4-fast", "generated_code": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"}
{"benchmark": "mbpp", "task_id": "470", "prompt": "Write a function to find the pairwise addition of the neighboring elements of the given tuple.", "reference_code": "def add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ", "test_imports": [], "test_list": ["assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)", "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)", "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"], "model_name": "x-ai/grok-4-fast", "generated_code": "def add_pairwise(tup):\n    if len(tup) < 2:\n        return ()\n    return tuple(tup[i] + tup[i + 1] for i in range(len(tup) - 1))"}
{"benchmark": "mbpp", "task_id": "453", "prompt": "Write a python function to find the sum of even factors of a number.", "reference_code": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res", "test_imports": [], "test_list": ["assert sumofFactors(18) == 26", "assert sumofFactors(30) == 48", "assert sumofFactors(6) == 8"], "model_name": "x-ai/grok-4-fast", "generated_code": "import math\n\ndef sumofFactors(n):\n    if n % 2 != 0 or n <= 1:\n        return 0\n    m = n // 2\n    total = 0\n    for i in range(1, int(math.sqrt(m)) + 1):\n        if m % i == 0:\n            total += i\n            if i != m // i:\n                total += m // i\n    return 2 * total"}
{"benchmark": "mbpp", "task_id": "474", "prompt": "Write a function to replace characters in a string.", "reference_code": "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2", "test_imports": [], "test_list": ["assert replace_char(\"polygon\",'y','l')==(\"pollgon\")", "assert replace_char(\"character\",'c','a')==(\"aharaater\")", "assert replace_char(\"python\",'l','a')==(\"python\")"], "model_name": "x-ai/grok-4-fast", "generated_code": "def replace_char(s: str, old_char: str, new_char: str) -> str:\n    \"\"\"\n    Replace all occurrences of old_char with new_char in the string s.\n    \"\"\"\n    return s.replace(old_char, new_char)"}
{"benchmark": "mbpp", "task_id": "430", "prompt": "Write a function to find the directrix of a parabola.", "reference_code": "def parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix", "test_imports": [], "test_list": ["assert parabola_directrix(5,3,2)==-198", "assert parabola_directrix(9,8,4)==-2336", "assert parabola_directrix(2,4,6)==-130"], "model_name": "x-ai/grok-4-fast", "generated_code": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Compute the y-value of the directrix for the parabola y = a x^2 + b x + c.\n    \n    Assumes a != 0 (vertical parabola).\n    \n    Returns the constant d such that the directrix is y = d.\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"Coefficient a must be non-zero for a parabola.\")\n    \n    # Vertex coordinates\n    h = -b / (2 * a)\n    k = c - (b ** 2) / (4 * a)\n    \n    # Directrix y = k - 1/(4a)\n    d = k - 1 / (4 * a)\n    \n    return d"}
{"benchmark": "mbpp", "task_id": "438", "prompt": "Write a function to count bidirectional tuple pairs.", "reference_code": "def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res", "test_imports": [], "test_list": ["assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3", "assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 2", "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == 4"], "model_name": "x-ai/grok-4-fast", "generated_code": "def count_bidirectional(pairs):\n    directions = set(pairs)\n    bidirectional = 0\n    seen = set()\n    for u, v in directions:\n        key = frozenset({u, v})\n        if key in seen:\n            continue\n        if (v, u) in directions:\n            bidirectional += 1\n        seen.add(key)\n    return bidirectional"}
{"benchmark": "mbpp", "task_id": "475", "prompt": "Write a function to sort a dictionary by value.", "reference_code": "from collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter", "test_imports": [], "test_list": ["assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]", "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]", "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"], "model_name": "x-ai/grok-4-fast", "generated_code": "def sort_counter(d):\n    return sorted(d.items(), key=lambda item: item[1])"}
{"benchmark": "mbpp", "task_id": "472", "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.", "reference_code": "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) ", "test_imports": [], "test_list": ["assert check_Consecutive([1,2,3,4,5]) == True", "assert check_Consecutive([1,2,3,5,6]) == False", "assert check_Consecutive([1,2,1]) == False"], "model_name": "x-ai/grok-4-fast", "generated_code": "def check_Consecutive(nums):\n    if not nums:\n        return False\n    nums = sorted(set(nums))  # Remove duplicates and sort\n    if len(nums) != len(set(nums)):  # Already handled by set, but just in case\n        return False\n    for i in range(1, len(nums)):\n        if nums[i] != nums[i-1] + 1:\n            return False\n    return True"}
{"benchmark": "mbpp", "task_id": "478", "prompt": "Write a function to remove lowercase substrings from a given string.", "reference_code": "import re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)", "test_imports": [], "test_list": ["assert remove_lowercase(\"PYTHon\")==('PYTH')", "assert remove_lowercase(\"FInD\")==('FID')", "assert remove_lowercase(\"STRinG\")==('STRG')"], "model_name": "x-ai/grok-4-fast", "generated_code": "def remove_lowercase(s: str) -> str:\n    return ''.join(c for c in s if not c.islower())"}
{"benchmark": "mbpp", "task_id": "462", "prompt": "Write a function to find all possible combinations of the elements of a given list.", "reference_code": "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result", "test_imports": [], "test_list": ["assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]", "assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]", "assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"], "model_name": "x-ai/grok-4-fast", "generated_code": "def combinations_list(elements):\n    if not elements:\n        return [[]]\n    without = combinations_list(elements[1:])\n    with_ = [[elements[0]] + sub for sub in without]\n    return without + with_"}
{"benchmark": "mbpp", "task_id": "463", "prompt": "Write a function to find the maximum product subarray of the given array.", "reference_code": "def max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far", "test_imports": [], "test_list": ["assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112", "assert max_subarray_product([6, -3, -10, 0, 2]) == 180", "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"], "model_name": "x-ai/grok-4-fast", "generated_code": "def max_subarray_product(nums):\n    if not nums:\n        return 0\n    max_prod = nums[0]\n    min_prod = nums[0]\n    result = nums[0]\n    for num in nums[1:]:\n        temp = max_prod\n        max_prod = max(num, max_prod * num, min_prod * num)\n        min_prod = min(num, temp * num, min_prod * num)\n        result = max(result, max_prod)\n    return result"}
{"benchmark": "mbpp", "task_id": "391", "prompt": "Write a function to convert more than one list to nested dictionary.", "reference_code": "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result", "test_imports": [], "test_list": ["assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]", "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]", "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"], "model_name": "x-ai/grok-4-fast", "generated_code": "def convert_list_dictionary(*lists):\n    if not lists:\n        return {}\n    n = len(lists[0])\n    if any(len(lst) != n for lst in lists):\n        raise ValueError(\"All lists must have the same length.\")\n    \n    def build(lists_slice, idx):\n        if len(lists_slice) == 1:\n            return lists_slice[0][idx]\n        key = lists_slice[0][idx]\n        sub_value = build(lists_slice[1:], idx)\n        return {key: sub_value}\n    \n    result = {}\n    for i in range(n):\n        key = lists[0][i]\n        value = build(lists[1:], i)\n        result[key] = value\n    return result"}
{"benchmark": "mbpp", "task_id": "477", "prompt": "Write a python function to convert the given string to lower case.", "reference_code": "def is_lower(string):\n  return (string.lower())", "test_imports": [], "test_list": ["assert is_lower(\"InValid\") == \"invalid\"", "assert is_lower(\"TruE\") == \"true\"", "assert is_lower(\"SenTenCE\") == \"sentence\""], "model_name": "x-ai/grok-4-fast", "generated_code": "def is_lower(s: str) -> str:\n    return s.lower()"}
{"benchmark": "mbpp", "task_id": "459", "prompt": "Write a function to remove uppercase substrings from a given string.", "reference_code": "import re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)", "test_imports": [], "test_list": ["assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'", "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'", "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"], "model_name": "x-ai/grok-4-fast", "generated_code": "def remove_uppercase(s: str) -> str:\n    return ''.join(c for c in s if not c.isupper())"}
{"benchmark": "mbpp", "task_id": "473", "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.", "reference_code": "def tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)", "test_imports": [], "test_list": ["assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}", "assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}", "assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"], "model_name": "x-ai/grok-4-fast", "generated_code": "def tuple_intersection(tuple_list):\n    if not tuple_list:\n        return ()\n    common = set(tuple_list[0])\n    for t in tuple_list[1:]:\n        common &= set(t)\n    return tuple(sorted(common))"}
{"benchmark": "mbpp", "task_id": "311", "prompt": "Write a python function to set the left most unset bit.", "reference_code": "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) ", "test_imports": [], "test_list": ["assert set_left_most_unset_bit(10) == 14", "assert set_left_most_unset_bit(12) == 14", "assert set_left_most_unset_bit(15) == 15"], "model_name": "x-ai/grok-4-fast", "generated_code": "def set_left_most_unset_bit(n):\n    if n == 0:\n        return 1\n    msb = n.bit_length() - 1\n    full = (1 << (msb + 1)) - 1\n    unset_mask = full ^ n\n    if unset_mask == 0:\n        return n\n    pos = unset_mask.bit_length() - 1\n    return n | (1 << pos)"}
{"benchmark": "mbpp", "task_id": "407", "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.", "reference_code": "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False", "test_imports": [], "test_list": ["assert rearrange_bigger(12)==21", "assert rearrange_bigger(10)==False", "assert rearrange_bigger(102)==120"], "model_name": "x-ai/grok-4-fast", "generated_code": "def rearrange_bigger(n: int) -> int:\n    s = str(n)\n    digits = list(s)\n    length = len(digits)\n    k = -1\n    for i in range(length - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            k = i\n            break\n    if k == -1:\n        return -1\n    l = -1\n    for i in range(length - 1, k, -1):\n        if digits[i] > digits[k]:\n            l = i\n            break\n    digits[k], digits[l] = digits[l], digits[k]\n    left = k + 1\n    right = length - 1\n    while left < right:\n        digits[left], digits[right] = digits[right], digits[left]\n        left += 1\n        right -= 1\n    result = ''.join(digits)\n    return int(result)"}
{"benchmark": "mbpp", "task_id": "479", "prompt": "Write a python function to find the first digit of a given number.", "reference_code": "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) ", "test_imports": [], "test_list": ["assert first_Digit(123) == 1", "assert first_Digit(456) == 4", "assert first_Digit(12) == 1"], "model_name": "x-ai/grok-4-fast", "generated_code": "def first_Digit(n):\n    return int(str(abs(n))[0])"}
{"benchmark": "mbpp", "task_id": "468", "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.", "reference_code": "def max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)", "test_imports": [], "test_list": ["assert max_product([3, 100, 4, 5, 150, 6]) == 3000", "assert max_product([4, 42, 55, 68, 80]) == 50265600", "assert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460"], "model_name": "x-ai/grok-4-fast", "generated_code": "def max_product(arr):\n    if not arr:\n        return 0\n    n = len(arr)\n    dp = [0] * n\n    max_prod = arr[0]\n    dp[0] = arr[0]\n    for i in range(1, n):\n        dp[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n        max_prod = max(max_prod, dp[i])\n    return max_prod"}
{"benchmark": "mbpp", "task_id": "286", "prompt": "Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.", "reference_code": "def max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far", "test_imports": [], "test_list": ["assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30", "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59", "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"], "model_name": "x-ai/grok-4-fast", "generated_code": "def max_sub_array_sum_repeated(arr, k):\n    if not arr:\n        return 0\n    n = len(arr)\n    \n    # Kadane's algorithm for max subarray sum in one array\n    max_ending_here = max_so_far = arr[0]\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    max_sub = max_so_far\n    \n    # Total sum\n    total = sum(arr)\n    \n    if k == 1:\n        return max_sub\n    \n    # Max prefix sum (non-empty)\n    max_pre = float('-inf')\n    cur = 0\n    for x in arr:\n        cur += x\n        max_pre = max(max_pre, cur)\n    \n    # Max suffix sum (non-empty)\n    max_suf = float('-inf')\n    cur = 0\n    for x in arr[::-1]:\n        cur += x\n        max_suf = max(max_suf, cur)\n    \n    # Spanning max\n    if total > 0:\n        spanning_max = max_suf + max_pre + (k - 2) * total\n    else:\n        spanning_max = max_suf + max_pre\n    \n    return max(max_sub, spanning_max)"}
