{"benchmark": "mbpp", "task_id": "17", "prompt": "Write a function that returns the perimeter of a square given its side length as input.", "reference_code": "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter", "test_imports": [], "test_list": ["assert square_perimeter(10)==40", "assert square_perimeter(5)==20", "assert square_perimeter(4)==16"], "model_name": "openai/gpt-5", "generated_code": "def square_perimeter(side):\n    \"\"\"\n    Return the perimeter of a square given its side length.\n\n    Parameters:\n        side (int or float): The length of a side of the square.\n\n    Returns:\n        int or float: The perimeter of the square.\n    \"\"\"\n    return 4 * side"}
{"benchmark": "mbpp", "task_id": "11", "prompt": "Write a python function to remove first and last occurrence of a given character from the string.", "reference_code": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ", "test_imports": [], "test_list": ["assert remove_Occ(\"hello\",\"l\") == \"heo\"", "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"", "assert remove_Occ(\"PHP\",\"P\") == \"H\""], "model_name": "openai/gpt-5", "generated_code": "def remove_Occ(s, ch):\n    \"\"\"\n    Remove the first and last occurrence of character `ch` from string `s`.\n    If `ch` occurs only once, that single occurrence is removed.\n    If `ch` does not occur, the original string is returned.\n    \"\"\"\n    if not isinstance(s, str) or not isinstance(ch, str):\n        raise TypeError(\"Both s and ch must be strings.\")\n    if ch == \"\":\n        return s\n\n    first = s.find(ch)\n    if first == -1:\n        return s\n\n    last = s.rfind(ch)\n\n    if first == last:\n        # Only one occurrence\n        return s[:first] + s[first + len(ch):]\n    else:\n        # Remove first and last occurrences\n        # After removing the first, the indices beyond shift left by len(ch),\n        # so we remove using slices that account for both positions on original s.\n        return s[:first] + s[first + len(ch):last] + s[last + len(ch):]"}
{"benchmark": "mbpp", "task_id": "14", "prompt": "Write a python function to find the volume of a triangular prism.", "reference_code": "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) ", "test_imports": [], "test_list": ["assert find_Volume(10,8,6) == 240", "assert find_Volume(3,2,2) == 6", "assert find_Volume(1,2,1) == 1"], "model_name": "openai/gpt-5", "generated_code": "def find_Volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Volume = (1/2) * base * height * length\n\n    Parameters:\n    - base: the base of the triangular face\n    - height: the height of the triangular face\n    - length: the length (or depth) of the prism\n\n    Returns:\n    - The volume as an int if all inputs are integers and the result is whole,\n      otherwise as a float.\n    \"\"\"\n    prod = base * height * length\n    if isinstance(base, int) and isinstance(height, int) and isinstance(length, int):\n        # Return integer if the result is a whole number\n        if prod % 2 == 0:\n            return prod // 2\n        return prod / 2.0\n    return prod / 2.0"}
{"benchmark": "mbpp", "task_id": "16", "prompt": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.", "reference_code": "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False", "test_imports": [], "test_list": ["assert text_lowercase_underscore(\"aab_cbbbc\")==(True)", "assert text_lowercase_underscore(\"aab_Abbbc\")==(False)", "assert text_lowercase_underscore(\"Aaab_abbbc\")==(False)"], "model_name": "openai/gpt-5", "generated_code": "import re\n\ndef text_lowercase_underscore(s):\n    \"\"\"\n    Return True if the input string consists of sequences of lowercase letters\n    joined with at least one underscore (e.g., 'abc_def' or 'a_b_c'), False otherwise.\n    \"\"\"\n    if not isinstance(s, str):\n        return False\n    return re.fullmatch(r'[a-z]+(?:_[a-z]+)+', s) is not None"}
{"benchmark": "mbpp", "task_id": "12", "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "reference_code": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result", "test_imports": [], "test_list": ["assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"], "model_name": "openai/gpt-5", "generated_code": "def sort_matrix(matrix):\n    \"\"\"\n    Sort a given matrix (iterable of row iterables) in ascending order\n    according to the sum of its rows. Returns a new list with rows sorted.\n    \"\"\"\n    return sorted(matrix, key=sum)"}
