{"benchmark": "mbpp", "task_id": "17", "prompt": "Write a function that returns the perimeter of a square given its side length as input.", "reference_code": "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter", "test_imports": [], "test_list": ["assert square_perimeter(10)==40", "assert square_perimeter(5)==20", "assert square_perimeter(4)==16"], "model_name": "openai/gpt-5", "generated_code": "```python\ndef square_perimeter(side_length):\n    \"\"\"\n    Calculate and return the perimeter of a square given its side length.\n\n    Parameters:\n    - side_length (int or float): Length of one side of the square.\n\n    Returns:\n    - int or float: The perimeter of the square.\n    \"\"\"\n    return 4 * side_length\n```"}
{"benchmark": "mbpp", "task_id": "12", "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "reference_code": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result", "test_imports": [], "test_list": ["assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"], "model_name": "openai/gpt-5", "generated_code": "```python\ndef sort_matrix(matrix):\n    \"\"\"\n    Sorts a matrix (list of iterables) in ascending order based on the sum of each row.\n    \n    Args:\n        matrix: A list of rows, where each row is an iterable of numbers.\n    \n    Returns:\n        A new list with rows sorted by their row sums in ascending order.\n    \"\"\"\n    if matrix is None:\n        return []\n    return sorted(matrix, key=lambda row: sum(row))\n```"}
{"benchmark": "mbpp", "task_id": "14", "prompt": "Write a python function to find the volume of a triangular prism.", "reference_code": "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) ", "test_imports": [], "test_list": ["assert find_Volume(10,8,6) == 240", "assert find_Volume(3,2,2) == 6", "assert find_Volume(1,2,1) == 1"], "model_name": "openai/gpt-5", "generated_code": "```python\ndef find_Volume(b, h, l):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    - b (float or int): Base length of the triangular face.\n    - h (float or int): Height of the triangular face.\n    - l (float or int): Length of the prism.\n\n    Returns:\n    - float: Volume of the triangular prism.\n    \"\"\"\n    return (b * h * l) / 2\n```"}
{"benchmark": "mbpp", "task_id": "11", "prompt": "Write a python function to remove first and last occurrence of a given character from the string.", "reference_code": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ", "test_imports": [], "test_list": ["assert remove_Occ(\"hello\",\"l\") == \"heo\"", "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"", "assert remove_Occ(\"PHP\",\"P\") == \"H\""], "model_name": "openai/gpt-5", "generated_code": "```python\ndef remove_Occ(s, ch):\n    \"\"\"\n    Remove the first and last occurrence of a given character (or substring) from the string.\n    If the character/substring occurs once, remove that single occurrence.\n    If it does not occur, return the original string.\n\n    Parameters:\n    - s (str): The input string.\n    - ch (str): The character or substring to remove.\n\n    Returns:\n    - str: The string after removing the first and last occurrence of ch.\n    \"\"\"\n    if not isinstance(s, str) or not isinstance(ch, str):\n        raise TypeError(\"Both s and ch must be strings.\")\n    if ch == \"\":\n        return s\n\n    first = s.find(ch)\n    if first == -1:\n        return s\n\n    last = s.rfind(ch)\n\n    if first == last:\n        # Only one occurrence\n        return s[:first] + s[first + len(ch):]\n\n    # Remove both first and last occurrences using original indices\n    return s[:first] + s[first + len(ch):last] + s[last + len(ch):]\n```"}
{"benchmark": "mbpp", "task_id": "18", "prompt": "Write a function to remove characters from the first string which are present in the second string.", "reference_code": "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) ", "test_imports": [], "test_list": ["assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'", "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'", "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'"], "model_name": "openai/gpt-5", "generated_code": "```python\nfrom typing import Optional\n\ndef remove_dirty_chars(s1: Optional[str], s2: Optional[str]) -> str:\n    \"\"\"\n    Remove all characters from s1 that are present in s2.\n\n    Args:\n        s1: The source string.\n        s2: The string containing characters to remove from s1.\n\n    Returns:\n        A new string with characters from s2 removed from s1.\n        If s1 is None, returns an empty string.\n        If s2 is None, returns s1 as-is (or empty string if s1 is None).\n    \"\"\"\n    if s1 is None:\n        return \"\"\n    if s2 is None:\n        return s1\n    remove_set = set(s2)\n    return \"\".join(ch for ch in s1 if ch not in remove_set)\n```"}
{"benchmark": "mbpp", "task_id": "16", "prompt": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.", "reference_code": "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False", "test_imports": [], "test_list": ["assert text_lowercase_underscore(\"aab_cbbbc\")==(True)", "assert text_lowercase_underscore(\"aab_Abbbc\")==(False)", "assert text_lowercase_underscore(\"Aaab_abbbc\")==(False)"], "model_name": "openai/gpt-5", "generated_code": "```python\nimport re\n\n# Precompile the regex pattern: one or more lowercase letters, followed by\n# one or more groups of an underscore and one or more lowercase letters.\n_PATTERN = re.compile(r'^[a-z]+(?:_[a-z]+)+$')\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Return True if the input string consists of sequences of lowercase letters\n    joined with underscores (at least one underscore), and False otherwise.\n    Examples:\n    - 'abc_def' -> True\n    - 'abc_def_ghi' -> True\n    - 'abcdef' -> False (no underscore)\n    - 'Abc_def' -> False (uppercase)\n    - 'abc__def' -> False (double underscore)\n    - '_abc' or 'abc_' -> False (leading/trailing underscore)\n    \"\"\"\n    if not isinstance(text, str):\n        return False\n    return bool(_PATTERN.fullmatch(text))\n```"}
{"benchmark": "mbpp", "task_id": "19", "prompt": "Write a function to find whether a given array of integers contains any duplicate element.", "reference_code": "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     ", "test_imports": [], "test_list": ["assert test_duplicate(([1,2,3,4,5]))==False", "assert test_duplicate(([1,2,3,4, 4]))==True", "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"], "model_name": "openai/gpt-5", "generated_code": "```python\ndef test_duplicate(arr):\n    \"\"\"\n    Determine if the given iterable of integers contains any duplicate element.\n\n    Args:\n        arr: An iterable of integers.\n\n    Returns:\n        True if any element appears more than once, otherwise False.\n    \"\"\"\n    seen = set()\n    for x in arr:\n        if x in seen:\n            return True\n        seen.add(x)\n    return False\n```"}
{"benchmark": "mbpp", "task_id": "56", "prompt": "Write a python function to check if a given number is one less than twice its reverse.", "reference_code": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ", "test_imports": [], "test_list": ["assert check(70) == False", "assert check(23) == False", "assert check(73) == True"], "model_name": "openai/gpt-5", "generated_code": "```python\ndef check(n):\n    \"\"\"\n    Check if the given integer n is one less than twice its reverse.\n    Returns True if n == 2 * reverse(n) - 1, else False.\n    \"\"\"\n    sign = -1 if n < 0 else 1\n    rev_abs = int(str(abs(n))[::-1])\n    rev = sign * rev_abs\n    return n == 2 * rev - 1\n```"}
{"benchmark": "mbpp", "task_id": "57", "prompt": "Write a python function to find the largest number that can be formed with the given list of digits.", "reference_code": "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ", "test_imports": [], "test_list": ["assert find_Max_Num([1,2,3]) == 321", "assert find_Max_Num([4,5,6,1]) == 6541", "assert find_Max_Num([1,2,3,9]) == 9321"], "model_name": "openai/gpt-5", "generated_code": "```python\ndef find_Max_Num(digits):\n    \"\"\"\n    Find the largest number that can be formed from a list of digits.\n\n    Args:\n        digits (list): A list of digits (ints or strings representing 0-9).\n\n    Returns:\n        int: The largest possible integer formed by concatenating the digits in descending order.\n             Returns 0 for an empty list.\n    \"\"\"\n    if not digits:\n        return 0\n\n    # Convert all elements to integers (assumes they represent digits 0-9)\n    nums = [int(d) for d in digits]\n\n    # Sort in descending order and concatenate\n    nums.sort(reverse=True)\n    number_str = ''.join(str(d) for d in nums)\n\n    return int(number_str) if number_str else 0\n```"}
{"benchmark": "mbpp", "task_id": "20", "prompt": "Write a function to check if the given number is woodball or not.", "reference_code": "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False", "test_imports": [], "test_list": ["assert is_woodall(383) == True", "assert is_woodall(254) == False", "assert is_woodall(200) == False"], "model_name": "openai/gpt-5", "generated_code": "```python\ndef is_woodall(num):\n    \"\"\"\n    Check if a given integer is a Woodall number.\n    A Woodall number is of the form n * 2^n - 1 for some integer n >= 1.\n    \"\"\"\n    if not isinstance(num, int):\n        return False\n    if num < 1:\n        return False\n\n    target = num + 1\n    k = 1\n    while True:\n        prod = k << k  # k * 2^k\n        if prod == target:\n            return True\n        if prod > target:\n            return False\n        k += 1\n```"}
