{"benchmark": "mbpp", "task_id": "17", "prompt": "Write a function that returns the perimeter of a square given its side length as input.", "reference_code": "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter", "test_imports": [], "test_list": ["assert square_perimeter(10)==40", "assert square_perimeter(5)==20", "assert square_perimeter(4)==16"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def square_perimeter(side_length):\n    \"\"\"\n    Returns the perimeter of a square given its side length.\n    \n    Args:\n        side_length: The length of one side of the square\n        \n    Returns:\n        The perimeter of the square (4 * side_length)\n    \"\"\"\n    return 4 * side_length"}
{"benchmark": "mbpp", "task_id": "12", "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "reference_code": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result", "test_imports": [], "test_list": ["assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def sort_matrix(matrix):\n    \"\"\"\n    Sort a given matrix in ascending order according to the sum of its rows.\n    \n    Args:\n        matrix: A list of lists representing a matrix\n        \n    Returns:\n        A new matrix sorted by row sums in ascending order\n    \"\"\"\n    return sorted(matrix, key=sum)"}
{"benchmark": "mbpp", "task_id": "19", "prompt": "Write a function to find whether a given array of integers contains any duplicate element.", "reference_code": "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     ", "test_imports": [], "test_list": ["assert test_duplicate(([1,2,3,4,5]))==False", "assert test_duplicate(([1,2,3,4, 4]))==True", "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def test_duplicate(arr):\n    \"\"\"\n    Find whether a given array of integers contains any duplicate element.\n    \n    Args:\n        arr: List of integers\n        \n    Returns:\n        True if the array contains any duplicate element, False otherwise\n    \"\"\"\n    return len(arr) != len(set(arr))"}
{"benchmark": "mbpp", "task_id": "58", "prompt": "Write a python function to check whether the given two integers have opposite sign or not.", "reference_code": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); ", "test_imports": [], "test_list": ["assert opposite_Signs(1,-2) == True", "assert opposite_Signs(3,2) == False", "assert opposite_Signs(-10,-10) == False", "assert opposite_Signs(-2,2) == True"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def opposite_Signs(a, b):\n    \"\"\"\n    Check whether the given two integers have opposite signs.\n    \n    Args:\n        a: First integer\n        b: Second integer\n    \n    Returns:\n        True if the integers have opposite signs, False otherwise\n    \"\"\"\n    return (a > 0 and b < 0) or (a < 0 and b > 0)"}
{"benchmark": "mbpp", "task_id": "59", "prompt": "Write a function to find the nth octagonal number.", "reference_code": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n ", "test_imports": [], "test_list": ["assert is_octagonal(5) == 65", "assert is_octagonal(10) == 280", "assert is_octagonal(15) == 645"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def is_octagonal(n):\n    \"\"\"\n    Find the nth octagonal number.\n    \n    The nth octagonal number is given by the formula: n(3n - 2)\n    \n    Args:\n        n: A positive integer representing which octagonal number to find\n        \n    Returns:\n        The nth octagonal number\n    \"\"\"\n    return n * (3 * n - 2)"}
{"benchmark": "mbpp", "task_id": "69", "prompt": "Write a function to check whether a list contains the given sublist or not.", "reference_code": "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set", "test_imports": [], "test_list": ["assert is_sublist([2,4,3,5,7],[3,7])==False", "assert is_sublist([2,4,3,5,7],[4,3])==True", "assert is_sublist([2,4,3,5,7],[1,6])==False"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def is_sublist(lst, sublist):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n    \n    Args:\n        lst: The main list to search in\n        sublist: The sublist to search for\n    \n    Returns:\n        True if sublist is found in lst, False otherwise\n    \"\"\"\n    if not sublist:\n        return True\n    \n    if len(sublist) > len(lst):\n        return False\n    \n    for i in range(len(lst) - len(sublist) + 1):\n        if lst[i:i + len(sublist)] == sublist:\n            return True\n    \n    return False"}
{"benchmark": "mbpp", "task_id": "56", "prompt": "Write a python function to check if a given number is one less than twice its reverse.", "reference_code": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ", "test_imports": [], "test_list": ["assert check(70) == False", "assert check(23) == False", "assert check(73) == True"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def check(n):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n    \n    Args:\n        n: An integer to check\n        \n    Returns:\n        True if n == 2 * reverse(n) - 1, False otherwise\n    \"\"\"\n    # Handle negative numbers by working with absolute value\n    abs_n = abs(n)\n    \n    # Reverse the digits of the absolute value\n    reversed_n = int(str(abs_n)[::-1])\n    \n    # If original number was negative, make reversed negative too\n    if n < 0:\n        reversed_n = -reversed_n\n    \n    # Check if n is one less than twice its reverse\n    return n == 2 * reversed_n - 1"}
{"benchmark": "mbpp", "task_id": "65", "prompt": "Write a function to flatten a list and sum all of its elements.", "reference_code": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total", "test_imports": [], "test_list": ["assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21", "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106", "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def recursive_list_sum(lst):\n    \"\"\"\n    Flatten a list and sum all of its elements.\n    \n    Args:\n        lst: A list that may contain nested lists\n        \n    Returns:\n        The sum of all numeric elements in the flattened list\n    \"\"\"\n    total = 0\n    for item in lst:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total"}
{"benchmark": "mbpp", "task_id": "64", "prompt": "Write a function to sort a list of tuples using the second value of each tuple.", "reference_code": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks", "test_imports": [], "test_list": ["assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]", "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])", "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def subject_marks(tuples_list):\n    \"\"\"\n    Sort a list of tuples using the second value of each tuple.\n    \n    Args:\n        tuples_list: A list of tuples where each tuple contains at least 2 elements\n        \n    Returns:\n        A new list of tuples sorted by the second element of each tuple\n    \"\"\"\n    return sorted(tuples_list, key=lambda x: x[1])"}
{"benchmark": "mbpp", "task_id": "63", "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.", "reference_code": "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) ", "test_imports": [], "test_list": ["assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7", "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15", "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def max_difference(tuple_list):\n    \"\"\"\n    Find the maximum difference between available pairs in the given tuple list.\n    \n    Args:\n        tuple_list: A list of tuples containing numeric values\n        \n    Returns:\n        The maximum difference between any two elements across all tuples,\n        or 0 if the list is empty or has fewer than 2 elements total\n    \"\"\"\n    if not tuple_list:\n        return 0\n    \n    # Flatten all tuples into a single list of numbers\n    all_numbers = []\n    for tup in tuple_list:\n        all_numbers.extend(tup)\n    \n    # If we have fewer than 2 numbers, we can't form a pair\n    if len(all_numbers) < 2:\n        return 0\n    \n    # Find the maximum difference (max - min)\n    max_num = max(all_numbers)\n    min_num = min(all_numbers)\n    \n    return max_num - min_num"}
{"benchmark": "mbpp", "task_id": "70", "prompt": "Write a function to find whether all the given tuples have equal length or not.", "reference_code": "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1", "test_imports": [], "test_list": ["assert get_equal([(11, 22, 33), (44, 55, 66)]) == True", "assert get_equal([(1, 2, 3), (4, 5, 6, 7)]) == False", "assert get_equal([(1, 2), (3, 4)]) == True"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def get_equal(tuples):\n    \"\"\"\n    Check whether all the given tuples have equal length or not.\n    \n    Args:\n        tuples: An iterable of tuples\n        \n    Returns:\n        True if all tuples have equal length, False otherwise\n    \"\"\"\n    if not tuples:\n        return True\n    \n    tuples_list = list(tuples)\n    if len(tuples_list) == 0:\n        return True\n    \n    first_length = len(tuples_list[0])\n    return all(len(t) == first_length for t in tuples_list)"}
{"benchmark": "mbpp", "task_id": "11", "prompt": "Write a python function to remove first and last occurrence of a given character from the string.", "reference_code": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ", "test_imports": [], "test_list": ["assert remove_Occ(\"hello\",\"l\") == \"heo\"", "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"", "assert remove_Occ(\"PHP\",\"P\") == \"H\""], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def remove_Occ(s, ch):\n    \"\"\"\n    Remove first and last occurrence of a given character from the string.\n    \n    Args:\n        s: The input string\n        ch: The character to remove\n    \n    Returns:\n        The string with first and last occurrence of ch removed\n    \"\"\"\n    if not s or ch not in s:\n        return s\n    \n    # Find the first occurrence\n    first_index = s.find(ch)\n    \n    # Find the last occurrence\n    last_index = s.rfind(ch)\n    \n    # If first and last are the same (only one occurrence), remove it\n    if first_index == last_index:\n        return s[:first_index] + s[first_index + 1:]\n    \n    # Remove both first and last occurrences\n    # Build the result by concatenating parts before first, between first and last, and after last\n    result = s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]\n    \n    return result"}
{"benchmark": "mbpp", "task_id": "66", "prompt": "Write a python function to count the number of positive numbers in a list.", "reference_code": "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count ", "test_imports": [], "test_list": ["assert pos_count([1,-2,3,-4]) == 2", "assert pos_count([3,4,5,-1]) == 3", "assert pos_count([1,2,3,4]) == 4"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def pos_count(numbers):\n    \"\"\"\n    Count the number of positive numbers in a list.\n    \n    Args:\n        numbers: A list of numbers\n        \n    Returns:\n        The count of positive numbers in the list\n    \"\"\"\n    return sum(1 for num in numbers if num > 0)"}
{"benchmark": "mbpp", "task_id": "18", "prompt": "Write a function to remove characters from the first string which are present in the second string.", "reference_code": "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) ", "test_imports": [], "test_list": ["assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'", "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'", "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def remove_dirty_chars(s1, s2):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n    \n    Args:\n        s1: The first string (to remove characters from)\n        s2: The second string (characters to remove)\n    \n    Returns:\n        A new string with characters from s1 that are not in s2\n    \"\"\"\n    # Create a set of characters from s2 for O(1) lookup\n    chars_to_remove = set(s2)\n    \n    # Keep only characters from s1 that are not in s2\n    result = ''.join(char for char in s1 if char not in chars_to_remove)\n    \n    return result"}
{"benchmark": "mbpp", "task_id": "61", "prompt": "Write a python function to count the number of substrings with the sum of digits equal to their length.", "reference_code": "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count", "test_imports": [], "test_list": ["assert count_Substrings('112112') == 6", "assert count_Substrings('111') == 6", "assert count_Substrings('1101112') == 12"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def count_Substrings(s):\n    \"\"\"\n    Count the number of substrings where the sum of digits equals the length of the substring.\n    \n    Args:\n        s: A string containing digits\n        \n    Returns:\n        The count of substrings where sum of digits == length of substring\n    \"\"\"\n    count = 0\n    n = len(s)\n    \n    # Check all possible substrings\n    for i in range(n):\n        digit_sum = 0\n        for j in range(i, n):\n            # Add the current digit to the sum\n            digit_sum += int(s[j])\n            \n            # Length of current substring is (j - i + 1)\n            substring_length = j - i + 1\n            \n            # Check if sum of digits equals length\n            if digit_sum == substring_length:\n                count += 1\n    \n    return count"}
{"benchmark": "mbpp", "task_id": "71", "prompt": "Write a function to sort a list of elements.", "reference_code": "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums", "test_imports": [], "test_list": ["assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]", "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]", "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def comb_sort(arr):\n    \"\"\"\n    Sort a list using the comb sort algorithm.\n    \n    Args:\n        arr: List of elements to sort\n        \n    Returns:\n        The sorted list (sorts in-place and returns the list)\n    \"\"\"\n    n = len(arr)\n    gap = n\n    shrink = 1.3\n    swapped = True\n    \n    while gap > 1 or swapped:\n        gap = max(1, int(gap / shrink))\n        swapped = False\n        \n        for i in range(n - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                swapped = True\n    \n    return arr"}
{"benchmark": "mbpp", "task_id": "75", "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.", "reference_code": "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res", "test_imports": [], "test_list": ["assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]", "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]", "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def find_tuples(tuples_list, k):\n    \"\"\"\n    Find tuples which have all elements divisible by k from the given list of tuples.\n    \n    Args:\n        tuples_list: A list of tuples containing numeric elements\n        k: The divisor to check against\n    \n    Returns:\n        A list of tuples where all elements are divisible by k\n    \"\"\"\n    result = []\n    for tup in tuples_list:\n        if all(element % k == 0 for element in tup):\n            result.append(tup)\n    return result"}
{"benchmark": "mbpp", "task_id": "68", "prompt": "Write a python function to check whether the given array is monotonic or not.", "reference_code": "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ", "test_imports": [], "test_list": ["assert is_Monotonic([6, 5, 4, 4]) == True", "assert is_Monotonic([1, 2, 2, 3]) == True", "assert is_Monotonic([1, 3, 2]) == False"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def is_Monotonic(arr):\n    \"\"\"\n    Check whether the given array is monotonic or not.\n    \n    An array is monotonic if it is either entirely non-increasing or non-decreasing.\n    \n    Args:\n        arr: A list of numbers\n        \n    Returns:\n        True if the array is monotonic, False otherwise\n    \"\"\"\n    if len(arr) <= 1:\n        return True\n    \n    # Check if array is non-decreasing (monotonic increasing)\n    is_non_decreasing = all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))\n    \n    # Check if array is non-increasing (monotonic decreasing)\n    is_non_increasing = all(arr[i] >= arr[i + 1] for i in range(len(arr) - 1))\n    \n    return is_non_decreasing or is_non_increasing"}
{"benchmark": "mbpp", "task_id": "62", "prompt": "Write a python function to find smallest number in a list.", "reference_code": "def smallest_num(xs):\n  return min(xs)\n", "test_imports": [], "test_list": ["assert smallest_num([10, 20, 1, 45, 99]) == 1", "assert smallest_num([1, 2, 3]) == 1", "assert smallest_num([45, 46, 50, 60]) == 45"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def smallest_num(numbers):\n    \"\"\"\n    Find the smallest number in a list.\n    \n    Args:\n        numbers: A list of numbers\n        \n    Returns:\n        The smallest number in the list\n    \"\"\"\n    if not numbers:\n        return None\n    return min(numbers)"}
{"benchmark": "mbpp", "task_id": "57", "prompt": "Write a python function to find the largest number that can be formed with the given list of digits.", "reference_code": "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ", "test_imports": [], "test_list": ["assert find_Max_Num([1,2,3]) == 321", "assert find_Max_Num([4,5,6,1]) == 6541", "assert find_Max_Num([1,2,3,9]) == 9321"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def find_Max_Num(digits):\n    \"\"\"\n    Find the largest number that can be formed with the given list of digits.\n    \n    Args:\n        digits: A list of integers (digits)\n    \n    Returns:\n        An integer representing the largest number that can be formed\n    \"\"\"\n    if not digits:\n        return 0\n    \n    # Convert digits to strings for custom sorting\n    digit_strings = [str(d) for d in digits]\n    \n    # Sort using a custom comparator\n    # For two numbers a and b, if ab > ba, then a should come before b\n    from functools import cmp_to_key\n    \n    def compare(a, b):\n        # Compare concatenations: a+b vs b+a\n        if a + b > b + a:\n            return -1  # a should come before b (descending order)\n        elif a + b < b + a:\n            return 1   # b should come before a\n        else:\n            return 0   # they are equal\n    \n    digit_strings.sort(key=cmp_to_key(compare))\n    \n    # Join the sorted digits to form the largest number\n    result = ''.join(digit_strings)\n    \n    # Handle the case where all digits are 0\n    if result[0] == '0':\n        return 0\n    \n    return int(result)"}
{"benchmark": "mbpp", "task_id": "67", "prompt": "Write a function to find the number of ways to partition a set of Bell numbers.", "reference_code": "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] ", "test_imports": [], "test_list": ["assert bell_number(2)==2", "assert bell_number(10)==115975", "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def bell_number(n: int) -> int:\n    \"\"\"\n    Calculate the nth Bell number, which represents the number of ways\n    to partition a set of n elements.\n    \n    The Bell number B(n) is the number of partitions of a set with n elements.\n    \n    Args:\n        n: Non-negative integer\n        \n    Returns:\n        The nth Bell number\n    \"\"\"\n    if n == 0:\n        return 1\n    \n    # Use Bell triangle (similar to Pascal's triangle)\n    # Each row starts with the last element of the previous row\n    # Each subsequent element is the sum of the element to its left\n    # and the element above-left in the previous row\n    \n    # Initialize with B(0) = 1\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n + 1):\n        # First element of each row is the last element of previous row\n        bell[i][0] = bell[i - 1][i - 1]\n        \n        # Fill the rest of the row\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i][j - 1] + bell[i - 1][j - 1]\n    \n    # The nth Bell number is the first element of the (n)th row\n    return bell[n][0]"}
{"benchmark": "mbpp", "task_id": "79", "prompt": "Write a python function to check whether the length of the word is odd or not.", "reference_code": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False", "test_imports": [], "test_list": ["assert word_len(\"Hadoop\") == False", "assert word_len(\"great\") == True", "assert word_len(\"structure\") == True"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def word_len(word):\n    \"\"\"\n    Check whether the length of the word is odd or not.\n    \n    Args:\n        word: A string representing a word\n        \n    Returns:\n        True if the length of the word is odd, False otherwise\n    \"\"\"\n    return len(word) % 2 == 1"}
{"benchmark": "mbpp", "task_id": "14", "prompt": "Write a python function to find the volume of a triangular prism.", "reference_code": "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) ", "test_imports": [], "test_list": ["assert find_Volume(10,8,6) == 240", "assert find_Volume(3,2,2) == 6", "assert find_Volume(1,2,1) == 1"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def find_Volume(base, height, length):\n    \"\"\"\n    Find the volume of a triangular prism.\n    \n    Args:\n        base: The base of the triangular face\n        height: The height of the triangular face\n        length: The length (depth) of the prism\n    \n    Returns:\n        The volume of the triangular prism\n    \"\"\"\n    # Volume of triangular prism = (1/2 * base * height) * length\n    # where (1/2 * base * height) is the area of the triangular face\n    triangle_area = 0.5 * base * height\n    volume = triangle_area * length\n    return volume"}
{"benchmark": "mbpp", "task_id": "20", "prompt": "Write a function to check if the given number is woodball or not.", "reference_code": "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False", "test_imports": [], "test_list": ["assert is_woodall(383) == True", "assert is_woodall(254) == False", "assert is_woodall(200) == False"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def is_woodall(n):\n    \"\"\"\n    Check if the given number is a Woodall number.\n    \n    A Woodall number is a natural number of the form n * 2^n - 1,\n    where n is a positive integer.\n    \n    Args:\n        n: The number to check\n        \n    Returns:\n        True if n is a Woodall number, False otherwise\n    \"\"\"\n    if n <= 0:\n        return False\n    \n    # Check if n + 1 is divisible by powers of 2 times increasing integers\n    # We need to find if there exists a positive integer k such that:\n    # n = k * 2^k - 1\n    # Which means: n + 1 = k * 2^k\n    \n    target = n + 1\n    \n    # Try different values of k\n    # k can't be too large, as k * 2^k grows very quickly\n    # For practical purposes, we check up to a reasonable limit\n    k = 1\n    while k * (1 << k) <= target * 2:  # 1 << k is 2^k\n        if k * (1 << k) == target:\n            return True\n        k += 1\n    \n    return False"}
{"benchmark": "mbpp", "task_id": "74", "prompt": "Write a function to check whether it follows the sequence given in the patterns array.", "reference_code": "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True", "test_imports": [], "test_list": ["assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True", "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False", "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def is_samepatterns(sequence, patterns):\n    \"\"\"\n    Check whether a sequence follows the patterns given in the patterns array.\n    \n    Args:\n        sequence: A list or string representing the sequence to check\n        patterns: A list of patterns that the sequence should follow\n    \n    Returns:\n        True if the sequence follows all patterns, False otherwise\n    \"\"\"\n    if not patterns:\n        return True\n    \n    if not sequence:\n        return len(patterns) == 0\n    \n    # Convert sequence to list if it's a string\n    if isinstance(sequence, str):\n        seq_list = list(sequence)\n    else:\n        seq_list = list(sequence)\n    \n    # Check each pattern\n    for pattern in patterns:\n        if not isinstance(pattern, (list, tuple)):\n            pattern = [pattern]\n        \n        pattern_len = len(pattern)\n        \n        # Check if pattern appears in sequence\n        found = False\n        for i in range(len(seq_list) - pattern_len + 1):\n            if seq_list[i:i + pattern_len] == list(pattern):\n                found = True\n                break\n        \n        if not found:\n            return False\n    \n    return True"}
{"benchmark": "mbpp", "task_id": "72", "prompt": "Write a python function to check whether the given number can be represented as the difference of two squares or not.", "reference_code": "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False", "test_imports": [], "test_list": ["assert dif_Square(5) == True", "assert dif_Square(10) == False", "assert dif_Square(15) == True"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def dif_Square(n):\n    \"\"\"\n    Check whether the given number can be represented as the difference of two squares.\n    \n    A number n can be represented as a difference of two squares if and only if:\n    n = a² - b² = (a+b)(a-b)\n    \n    This is possible when n is not of the form 4k + 2 (i.e., n % 4 != 2)\n    \n    Equivalently:\n    - All odd numbers can be represented (a² - b² where a = (n+1)/2, b = (n-1)/2)\n    - Numbers divisible by 4 can be represented\n    - Numbers of the form 4k + 2 cannot be represented\n    \"\"\"\n    # A number can be represented as difference of two squares\n    # if and only if it's not congruent to 2 (mod 4)\n    return n % 4 != 2"}
{"benchmark": "mbpp", "task_id": "16", "prompt": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.", "reference_code": "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False", "test_imports": [], "test_list": ["assert text_lowercase_underscore(\"aab_cbbbc\")==(True)", "assert text_lowercase_underscore(\"aab_Abbbc\")==(False)", "assert text_lowercase_underscore(\"Aaab_abbbc\")==(False)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def text_lowercase_underscore(s: str) -> bool:\n    \"\"\"\n    Returns True if the input string contains sequences of lowercase letters\n    joined with an underscore, and False otherwise.\n    \n    Valid patterns:\n    - lowercase_letters\n    - multiple_sequences_like_this\n    - a_b_c\n    \n    Invalid patterns:\n    - empty string\n    - no underscores\n    - UPPERCASE\n    - numbers123\n    - leading/trailing underscores\n    - consecutive underscores\n    \"\"\"\n    if not s:\n        return False\n    \n    # Split by underscore\n    parts = s.split('_')\n    \n    # Must have at least 2 parts (at least one underscore)\n    if len(parts) < 2:\n        return False\n    \n    # Each part must be non-empty and contain only lowercase letters\n    for part in parts:\n        if not part or not part.islower() or not part.isalpha():\n            return False\n    \n    return True"}
{"benchmark": "mbpp", "task_id": "82", "prompt": "Write a function to find the volume of a sphere.", "reference_code": "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume", "test_imports": ["import math"], "test_list": ["assert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)", "assert math.isclose(volume_sphere(25), 65449.84694978735, rel_tol=0.001)", "assert math.isclose(volume_sphere(20), 33510.32163829113, rel_tol=0.001)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "import math\n\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere given its radius.\n    \n    Formula: V = (4/3) * π * r³\n    \n    Args:\n        radius: The radius of the sphere (numeric value)\n    \n    Returns:\n        The volume of the sphere\n    \"\"\"\n    return (4/3) * math.pi * (radius ** 3)"}
{"benchmark": "mbpp", "task_id": "80", "prompt": "Write a function to find the nth tetrahedral number.", "reference_code": "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6", "test_imports": [], "test_list": ["assert tetrahedral_number(5) == 35", "assert tetrahedral_number(6) == 56", "assert tetrahedral_number(7) == 84"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def tetrahedral_number(n: int) -> int:\n    \"\"\"\n    Calculate the nth tetrahedral number.\n    \n    The nth tetrahedral number is the sum of the first n triangular numbers.\n    Formula: T(n) = n(n+1)(n+2)/6\n    \n    Args:\n        n: The position in the tetrahedral number sequence (1-indexed)\n    \n    Returns:\n        The nth tetrahedral number\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6"}
{"benchmark": "mbpp", "task_id": "77", "prompt": "Write a python function to find whether a number is divisible by 11.", "reference_code": "def is_Diff(n): \n    return (n % 11 == 0) ", "test_imports": [], "test_list": ["assert is_Diff (12345) == False", "assert is_Diff(1212112) == True", "assert is_Diff(1212) == False"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def is_Diff(n):\n    \"\"\"\n    Check if a number is divisible by 11.\n    \n    A number is divisible by 11 if the difference between the sum of digits\n    at odd positions and the sum of digits at even positions is divisible by 11.\n    \n    Args:\n        n: An integer to check for divisibility by 11\n        \n    Returns:\n        True if n is divisible by 11, False otherwise\n    \"\"\"\n    return n % 11 == 0"}
{"benchmark": "mbpp", "task_id": "83", "prompt": "Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.", "reference_code": "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)", "test_imports": [], "test_list": ["assert get_Char(\"abc\") == \"f\"", "assert get_Char(\"gfg\") == \"t\"", "assert get_Char(\"ab\") == \"c\""], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def get_Char(s):\n    \"\"\"\n    Find the character made by adding the ASCII value of all characters\n    of the given string modulo 26.\n    \n    Args:\n        s: A string\n        \n    Returns:\n        A character corresponding to the sum of ASCII values modulo 26\n    \"\"\"\n    # Sum all ASCII values of characters in the string\n    ascii_sum = sum(ord(char) for char in s)\n    \n    # Get modulo 26\n    mod_value = ascii_sum % 26\n    \n    # Convert to character (a=0, b=1, ..., z=25)\n    result_char = chr(ord('a') + mod_value)\n    \n    return result_char"}
{"benchmark": "mbpp", "task_id": "84", "prompt": "Write a function to find the nth number in the newman conway sequence.", "reference_code": "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))", "test_imports": [], "test_list": ["assert sequence(10) == 6", "assert sequence(2) == 1", "assert sequence(3) == 2"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def sequence(n: int) -> int:\n    \"\"\"\n    Find the nth number in the Newman-Conway sequence.\n    \n    The Newman-Conway sequence is defined as:\n    P(1) = 1\n    P(2) = 1\n    P(n) = P(P(n-1)) + P(n - P(n-1)) for n > 2\n    \n    Args:\n        n: The position in the sequence (1-indexed)\n    \n    Returns:\n        The nth number in the Newman-Conway sequence\n    \"\"\"\n    if n == 1 or n == 2:\n        return 1\n    \n    # Build the sequence up to n\n    p = [0] * (n + 1)  # p[0] is unused, p[1] to p[n] are used\n    p[1] = 1\n    p[2] = 1\n    \n    for i in range(3, n + 1):\n        p[i] = p[p[i - 1]] + p[i - p[i - 1]]\n    \n    return p[n]"}
{"benchmark": "mbpp", "task_id": "85", "prompt": "Write a function to find the surface area of a sphere.", "reference_code": "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea", "test_imports": ["import math"], "test_list": ["assert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)", "assert math.isclose(surfacearea_sphere(15), 2827.4333882308138, rel_tol=0.001)", "assert math.isclose(surfacearea_sphere(20), 5026.548245743669, rel_tol=0.001)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "import math\n\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n    \n    Args:\n        radius: The radius of the sphere\n        \n    Returns:\n        The surface area of the sphere (4 * pi * r^2)\n    \"\"\"\n    return 4 * math.pi * radius ** 2"}
{"benchmark": "mbpp", "task_id": "88", "prompt": "Write a function to get the frequency of all the elements in a list, returned as a dictionary.", "reference_code": "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count", "test_imports": [], "test_list": ["assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})", "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})", "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def freq_count(lst):\n    \"\"\"\n    Get the frequency of all elements in a list, returned as a dictionary.\n    \n    Args:\n        lst: A list of elements\n        \n    Returns:\n        A dictionary with elements as keys and their frequencies as values\n    \"\"\"\n    frequency = {}\n    for element in lst:\n        frequency[element] = frequency.get(element, 0) + 1\n    return frequency"}
{"benchmark": "mbpp", "task_id": "86", "prompt": "Write a function to find nth centered hexagonal number.", "reference_code": "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1", "test_imports": [], "test_list": ["assert centered_hexagonal_number(10) == 271", "assert centered_hexagonal_number(2) == 7", "assert centered_hexagonal_number(9) == 217"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    Find the nth centered hexagonal number.\n    \n    The nth centered hexagonal number is given by the formula:\n    H(n) = 3*n*(n-1) + 1\n    \n    This represents a hexagonal pattern with a center point surrounded by\n    concentric hexagonal layers.\n    \n    Args:\n        n: The position in the sequence (1-indexed)\n    \n    Returns:\n        The nth centered hexagonal number\n    \"\"\"\n    return 3 * n * (n - 1) + 1"}
{"benchmark": "mbpp", "task_id": "87", "prompt": "Write a function to merge three dictionaries into a single dictionary.", "reference_code": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict", "test_imports": [], "test_list": ["assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}", "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}", "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \n    Args:\n        dict1: First dictionary\n        dict2: Second dictionary\n        dict3: Third dictionary\n    \n    Returns:\n        A new dictionary containing all key-value pairs from the three input dictionaries.\n        If keys overlap, later dictionaries override earlier ones.\n    \"\"\"\n    result = {}\n    result.update(dict1)\n    result.update(dict2)\n    result.update(dict3)\n    return result"}
{"benchmark": "mbpp", "task_id": "91", "prompt": "Write a function to check if a string is present as a substring in a given list of string values.", "reference_code": "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False", "test_imports": [], "test_list": ["assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True", "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False", "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def find_substring(substring, string_list):\n    \"\"\"\n    Check if a substring is present in any of the strings in the given list.\n    \n    Args:\n        substring: The substring to search for\n        string_list: A list of strings to search in\n    \n    Returns:\n        True if the substring is found in any string in the list, False otherwise\n    \"\"\"\n    for string in string_list:\n        if substring in string:\n            return True\n    return False"}
{"benchmark": "mbpp", "task_id": "90", "prompt": "Write a python function to find the length of the longest word.", "reference_code": "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max", "test_imports": [], "test_list": ["assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7", "assert len_log([\"a\",\"ab\",\"abc\"]) == 3", "assert len_log([\"small\",\"big\",\"tall\"]) == 5"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def len_log(words):\n    \"\"\"\n    Find the length of the longest word in a list of words.\n    \n    Args:\n        words: A list of strings (words)\n    \n    Returns:\n        The length of the longest word, or 0 if the list is empty\n    \"\"\"\n    if not words:\n        return 0\n    return max(len(word) for word in words)"}
{"benchmark": "mbpp", "task_id": "93", "prompt": "Write a function to calculate the value of 'a' to the power 'b'.", "reference_code": "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)", "test_imports": [], "test_list": ["assert power(3,4) == 81", "assert power(2,3) == 8", "assert power(5,5) == 3125"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def power(a, b):\n    \"\"\"Calculate the value of 'a' to the power 'b'.\"\"\"\n    return a ** b"}
{"benchmark": "mbpp", "task_id": "89", "prompt": "Write a function to find the closest smaller number than n.", "reference_code": "def closest_num(N):\n  return (N - 1)", "test_imports": [], "test_list": ["assert closest_num(11) == 10", "assert closest_num(7) == 6", "assert closest_num(12) == 11"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def closest_num(n):\n    \"\"\"\n    Find the closest smaller number than n.\n    \n    Args:\n        n: A number (int or float)\n    \n    Returns:\n        The closest smaller number than n\n    \"\"\"\n    if isinstance(n, int):\n        return n - 1\n    else:\n        # For floats, return the next smaller representable float\n        import struct\n        if n == 0.0:\n            return -float('inf') if n > 0 else float('-inf')\n        \n        # Convert to bytes and back to get the next smaller float\n        bits = struct.unpack('>q', struct.pack('>d', n))[0]\n        \n        if n > 0:\n            bits -= 1\n        else:\n            bits += 1\n        \n        return struct.unpack('>d', struct.pack('>q', bits))[0]"}
{"benchmark": "mbpp", "task_id": "92", "prompt": "Write a function to check whether the given number is undulating or not.", "reference_code": "def is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True", "test_imports": [], "test_list": ["assert is_undulating(1212121) == True", "assert is_undulating(1991) == False", "assert is_undulating(121) == True"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def is_undulating(n: int) -> bool:\n    \"\"\"\n    Check whether the given number is undulating or not.\n    \n    An undulating number is a number where the digits alternate between two values.\n    For example: 121, 1212, 12121 are undulating numbers.\n    Single digit and two digit numbers are considered undulating.\n    \n    Args:\n        n: An integer to check\n        \n    Returns:\n        True if the number is undulating, False otherwise\n    \"\"\"\n    # Convert to string to work with digits\n    s = str(abs(n))\n    \n    # Single digit numbers are undulating\n    if len(s) == 1:\n        return True\n    \n    # Two digit numbers are undulating\n    if len(s) == 2:\n        return True\n    \n    # For numbers with 3 or more digits, check if digits alternate\n    # between two values\n    for i in range(len(s) - 2):\n        # Check if digit at position i equals digit at position i+2\n        # This ensures alternating pattern\n        if s[i] != s[i + 2]:\n            return False\n    \n    return True"}
{"benchmark": "mbpp", "task_id": "94", "prompt": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.", "reference_code": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) ", "test_imports": [], "test_list": ["assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'", "assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'", "assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def index_minimum(tuples):\n    \"\"\"\n    Returns the first value of the tuple with the smallest second value.\n    \n    Args:\n        tuples: A list of tuples\n        \n    Returns:\n        The first value of the tuple with the smallest second value\n    \"\"\"\n    if not tuples:\n        return None\n    \n    min_tuple = min(tuples, key=lambda t: t[1])\n    return min_tuple[0]"}
{"benchmark": "mbpp", "task_id": "95", "prompt": "Write a python function to find the length of the smallest list in a list of lists.", "reference_code": "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength ", "test_imports": [], "test_list": ["assert Find_Min_Length([[1],[1,2]]) == 1", "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2", "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def Find_Min_Length(lists):\n    \"\"\"\n    Find the length of the smallest list in a list of lists.\n    \n    Args:\n        lists: A list of lists\n        \n    Returns:\n        The length of the smallest list, or 0 if the input is empty\n    \"\"\"\n    if not lists:\n        return 0\n    return min(len(sublist) for sublist in lists)"}
{"benchmark": "mbpp", "task_id": "97", "prompt": "Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.", "reference_code": "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n", "test_imports": [], "test_list": ["assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}", "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}", "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def frequency_lists(lists):\n    \"\"\"\n    Find frequency of each element in a flattened list of lists.\n    \n    Args:\n        lists: A list of lists containing elements\n        \n    Returns:\n        A dictionary with elements as keys and their frequencies as values\n    \"\"\"\n    frequency = {}\n    \n    # Flatten the list of lists and count frequencies\n    for sublist in lists:\n        for element in sublist:\n            frequency[element] = frequency.get(element, 0) + 1\n    \n    return frequency"}
{"benchmark": "mbpp", "task_id": "98", "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.", "reference_code": "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) ", "test_imports": ["import math"], "test_list": ["assert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)", "assert math.isclose(multiply_num((-10,-20,-30)), -2000.0, rel_tol=0.001)", "assert math.isclose(multiply_num((19,15,18)), 1710.0, rel_tol=0.001)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def multiply_num(numbers):\n    \"\"\"\n    Multiply all the numbers in a list and divide by the length of the list.\n    \n    Args:\n        numbers: A list of numbers\n        \n    Returns:\n        The product of all numbers divided by the length of the list\n    \"\"\"\n    if not numbers:\n        return 0\n    \n    product = 1\n    for num in numbers:\n        product *= num\n    \n    return product / len(numbers)"}
{"benchmark": "mbpp", "task_id": "96", "prompt": "Write a python function to find the number of divisors of a given integer.", "reference_code": "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x", "test_imports": [], "test_list": ["assert divisor(15) == 4", "assert divisor(12) == 6", "assert divisor(9) == 3"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def divisor(n):\n    \"\"\"\n    Find the number of divisors of a given integer.\n    \n    Args:\n        n: An integer\n        \n    Returns:\n        The count of divisors of n\n    \"\"\"\n    if n == 0:\n        return 0\n    \n    n = abs(n)\n    count = 0\n    \n    # Check divisors up to sqrt(n)\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            count += 1\n            # If i is not the square root, count the corresponding divisor\n            if i * i != n:\n                count += 1\n        i += 1\n    \n    return count"}
{"benchmark": "mbpp", "task_id": "99", "prompt": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.", "reference_code": "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") ", "test_imports": [], "test_list": ["assert decimal_to_binary(8) == '1000'", "assert decimal_to_binary(18) == '10010'", "assert decimal_to_binary(7) == '111'"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def decimal_to_binary(n: int) -> str:\n    \"\"\"\n    Convert a decimal number to its binary equivalent as a string.\n    \n    Args:\n        n: A non-negative integer\n        \n    Returns:\n        A string representing the binary equivalent with no leading zeros\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    \n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    \n    return binary"}
{"benchmark": "mbpp", "task_id": "101", "prompt": "Write a function to find the kth element in the given array using 1-based indexing.", "reference_code": "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]", "test_imports": [], "test_list": ["assert kth_element([12,3,5,7,19], 2) == 3", "assert kth_element([17,24,8,23], 3) == 8", "assert kth_element([16,21,25,36,4], 4) == 36"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def kth_element(arr, k):\n    \"\"\"\n    Find the kth element in the given array using 1-based indexing.\n    \n    Args:\n        arr: List of elements\n        k: 1-based index (1 means first element, 2 means second element, etc.)\n    \n    Returns:\n        The element at position k (1-based indexing)\n    \"\"\"\n    return arr[k - 1]"}
{"benchmark": "mbpp", "task_id": "100", "prompt": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.", "reference_code": "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i", "test_imports": [], "test_list": ["assert next_smallest_palindrome(99)==101", "assert next_smallest_palindrome(1221)==1331", "assert next_smallest_palindrome(120)==121"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def next_smallest_palindrome(n: int) -> int:\n    \"\"\"\n    Find the next smallest palindrome greater than n.\n    \n    Args:\n        n: An integer\n        \n    Returns:\n        The next smallest palindrome greater than n\n    \"\"\"\n    n = n + 1\n    \n    while True:\n        s = str(n)\n        if s == s[::-1]:\n            return n\n        n += 1"}
{"benchmark": "mbpp", "task_id": "102", "prompt": "Write a function to convert a snake case string to camel case string.", "reference_code": "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))", "test_imports": [], "test_list": ["assert snake_to_camel('python_program')=='PythonProgram'", "assert snake_to_camel('python_language')==('PythonLanguage')", "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def snake_to_camel(snake_str: str) -> str:\n    \"\"\"\n    Convert a snake_case string to camelCase.\n    \n    Args:\n        snake_str: A string in snake_case format\n        \n    Returns:\n        The string converted to camelCase format\n    \"\"\"\n    components = snake_str.split('_')\n    # Keep the first component as is, capitalize the rest\n    return components[0] + ''.join(x.capitalize() for x in components[1:])"}
{"benchmark": "mbpp", "task_id": "104", "prompt": "Write a function to sort each sublist of strings in a given list of lists.", "reference_code": "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n", "test_imports": [], "test_list": ["assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]", "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]", "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def sort_sublists(list_of_lists):\n    \"\"\"\n    Sort each sublist of strings in a given list of lists.\n    \n    Args:\n        list_of_lists: A list containing sublists of strings\n        \n    Returns:\n        A list of lists where each sublist is sorted\n    \"\"\"\n    return [sorted(sublist) for sublist in list_of_lists]"}
{"benchmark": "mbpp", "task_id": "103", "prompt": "Write a function to find the Eulerian number a(n, m).", "reference_code": "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))", "test_imports": [], "test_list": ["assert eulerian_num(3, 1) == 4", "assert eulerian_num(4, 1) == 11", "assert eulerian_num(5, 3) == 26"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def eulerian_num(n, m):\n    \"\"\"\n    Compute the Eulerian number a(n, m).\n    \n    Eulerian numbers count the number of permutations of n elements\n    with exactly m descents (or ascents, depending on convention).\n    \n    Uses the recurrence relation:\n    a(n, m) = (m + 1) * a(n - 1, m) + (n - m) * a(n - 1, m - 1)\n    \n    Base cases:\n    a(0, 0) = 1\n    a(n, m) = 0 if m < 0 or m >= n\n    \"\"\"\n    \n    # Base case\n    if n == 0:\n        return 1 if m == 0 else 0\n    \n    # Invalid cases\n    if m < 0 or m >= n:\n        return 0\n    \n    # Use dynamic programming to build up the values\n    # dp[i][j] represents a(i, j)\n    dp = [[0] * n for _ in range(n + 1)]\n    \n    # Base case: a(0, 0) = 1\n    dp[0][0] = 1\n    \n    # Fill the table using the recurrence relation\n    for i in range(1, n + 1):\n        for j in range(i):\n            # a(i, j) = (j + 1) * a(i - 1, j) + (i - j) * a(i - 1, j - 1)\n            term1 = (j + 1) * dp[i - 1][j] if j < i - 1 else 0\n            term2 = (i - j) * dp[i - 1][j - 1] if j > 0 else 0\n            dp[i][j] = term1 + term2\n    \n    return dp[n][m]"}
{"benchmark": "mbpp", "task_id": "106", "prompt": "Write a function to append the given list to the given tuples.", "reference_code": "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) ", "test_imports": [], "test_list": ["assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)", "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)", "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def add_lists(tup, lst):\n    \"\"\"\n    Append the given list to the given tuple.\n    \n    Args:\n        tup: A tuple\n        lst: A list\n    \n    Returns:\n        A new tuple with the list elements appended\n    \"\"\"\n    return tup + tuple(lst)"}
{"benchmark": "mbpp", "task_id": "105", "prompt": "Write a python function to count true booleans in the given list.", "reference_code": "def count(lst):   \n    return sum(lst) ", "test_imports": [], "test_list": ["assert count([True,False,True]) == 2", "assert count([False,False]) == 0", "assert count([True,True,True]) == 3"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def count(lst):\n    \"\"\"Count the number of True booleans in the given list.\"\"\"\n    return sum(1 for item in lst if item is True)"}
{"benchmark": "mbpp", "task_id": "108", "prompt": "Write a function to merge three lists into a single sorted list.", "reference_code": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)", "test_imports": [], "test_list": ["assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]", "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]", "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def merge_sorted_list(list1, list2, list3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \n    Args:\n        list1: First sorted list\n        list2: Second sorted list\n        list3: Third sorted list\n    \n    Returns:\n        A single sorted list containing all elements from the three input lists\n    \"\"\"\n    merged = list1 + list2 + list3\n    return sorted(merged)"}
{"benchmark": "mbpp", "task_id": "111", "prompt": "Write a function to find the common elements in given nested lists.", "reference_code": "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result", "test_imports": [], "test_list": ["assert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])", "assert set(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))==set([5,23])", "assert set(common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]]))==set([4])"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def common_in_nested_lists(nested_lists):\n    \"\"\"\n    Find the common elements in given nested lists.\n    \n    Args:\n        nested_lists: A list of lists\n        \n    Returns:\n        A list of common elements found in all nested lists\n    \"\"\"\n    if not nested_lists:\n        return []\n    \n    if len(nested_lists) == 1:\n        return list(set(nested_lists[0]))\n    \n    # Convert first list to a set\n    common_set = set(nested_lists[0])\n    \n    # Intersect with all other lists\n    for sublist in nested_lists[1:]:\n        common_set = common_set.intersection(set(sublist))\n    \n    return list(common_set)"}
{"benchmark": "mbpp", "task_id": "109", "prompt": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.", "reference_code": "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count ", "test_imports": [], "test_list": ["assert odd_Equivalent(\"011001\",6) == 3", "assert odd_Equivalent(\"11011\",5) == 4", "assert odd_Equivalent(\"1010\",4) == 2"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def odd_Equivalent(binary_string, rotations):\n    \"\"\"\n    Find the number of numbers with an odd value when rotating a binary string\n    the given number of times.\n    \n    Args:\n        binary_string: A string of binary digits (0s and 1s)\n        rotations: Number of times to rotate the string\n    \n    Returns:\n        Count of rotations that result in an odd number\n    \"\"\"\n    if not binary_string or len(binary_string) == 0:\n        return 0\n    \n    # Normalize rotations to be within the length of the string\n    n = len(binary_string)\n    rotations = rotations % n if n > 0 else 0\n    \n    count = 0\n    \n    # Check each rotation\n    for i in range(rotations):\n        # Rotate the string left by i positions\n        rotated = binary_string[i:] + binary_string[:i]\n        \n        # Convert binary string to integer\n        num = int(rotated, 2)\n        \n        # Check if the number is odd (last bit is 1)\n        if num % 2 == 1:\n            count += 1\n    \n    return count"}
{"benchmark": "mbpp", "task_id": "115", "prompt": "Write a function to check whether all dictionaries in a list are empty or not.", "reference_code": "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit", "test_imports": [], "test_list": ["assert empty_dit([{},{},{}])==True", "assert empty_dit([{1,2},{},{}])==False", "assert empty_dit({})==True"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def empty_dit(dict_list):\n    \"\"\"\n    Check whether all dictionaries in a list are empty or not.\n    \n    Args:\n        dict_list: A list of dictionaries\n        \n    Returns:\n        True if all dictionaries are empty, False otherwise\n    \"\"\"\n    return all(len(d) == 0 for d in dict_list)"}
{"benchmark": "mbpp", "task_id": "113", "prompt": "Write a function to check if a string represents an integer or not.", "reference_code": "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False", "test_imports": [], "test_list": ["assert check_integer(\"python\")==False", "assert check_integer(\"1\")==True", "assert check_integer(\"12345\")==True"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def check_integer(s):\n    \"\"\"\n    Check if a string represents an integer or not.\n    \n    Args:\n        s: A string to check\n        \n    Returns:\n        True if the string represents an integer, False otherwise\n    \"\"\"\n    if not isinstance(s, str):\n        return False\n    \n    s = s.strip()\n    \n    if not s:\n        return False\n    \n    # Handle optional leading sign\n    if s[0] in ('+', '-'):\n        s = s[1:]\n    \n    # Check if remaining string is all digits\n    if not s:\n        return False\n    \n    return s.isdigit()"}
{"benchmark": "mbpp", "task_id": "116", "prompt": "Write a function to convert a given tuple of positive integers into a single integer.", "reference_code": "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result", "test_imports": [], "test_list": ["assert tuple_to_int((1,2,3))==123", "assert tuple_to_int((4,5,6))==456", "assert tuple_to_int((5,6,7))==567"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def tuple_to_int(t):\n    \"\"\"\n    Convert a tuple of positive integers into a single integer.\n    \n    Args:\n        t: A tuple of positive integers\n        \n    Returns:\n        A single integer formed by concatenating the digits of all numbers in the tuple\n    \"\"\"\n    return int(''.join(str(num) for num in t))"}
{"benchmark": "mbpp", "task_id": "118", "prompt": "Write a function to convert a string to a list of strings split on the space character.", "reference_code": "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst", "test_imports": [], "test_list": ["assert string_to_list(\"python programming\")==['python','programming']", "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']", "assert string_to_list(\"write a program\")==['write','a','program']"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def string_to_list(s):\n    \"\"\"Convert a string to a list of strings split on the space character.\"\"\"\n    if not s:\n        return ['']\n    return s.split(' ')"}
{"benchmark": "mbpp", "task_id": "117", "prompt": "Write a function to convert all possible convertible elements in a list of lists to floats.", "reference_code": "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res", "test_imports": [], "test_list": ["assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]", "assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]", "assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def list_to_float(data):\n    \"\"\"\n    Convert all possible convertible elements in a list of lists to floats.\n    \n    Args:\n        data: A list of lists containing mixed types\n        \n    Returns:\n        A list of lists with convertible elements converted to floats\n    \"\"\"\n    result = []\n    for sublist in data:\n        converted_sublist = []\n        for element in sublist:\n            try:\n                converted_sublist.append(float(element))\n            except (ValueError, TypeError):\n                converted_sublist.append(element)\n        result.append(converted_sublist)\n    return result"}
{"benchmark": "mbpp", "task_id": "120", "prompt": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.", "reference_code": "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max", "test_imports": [], "test_list": ["assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36", "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200", "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def max_product_tuple(tuples_list):\n    \"\"\"\n    Find the maximum absolute product between numbers in pairs of tuples.\n    \n    Args:\n        tuples_list: A list of tuples containing numbers\n        \n    Returns:\n        The maximum absolute product between any two numbers from the tuples\n    \"\"\"\n    if not tuples_list:\n        return 0\n    \n    # Flatten all numbers from all tuples\n    all_numbers = []\n    for tup in tuples_list:\n        all_numbers.extend(tup)\n    \n    if len(all_numbers) < 2:\n        return 0\n    \n    # Find the maximum absolute product\n    max_product = 0\n    \n    for i in range(len(all_numbers)):\n        for j in range(i + 1, len(all_numbers)):\n            product = abs(all_numbers[i] * all_numbers[j])\n            max_product = max(max_product, product)\n    \n    return max_product"}
{"benchmark": "mbpp", "task_id": "124", "prompt": "Write a function to get the angle of a complex number.", "reference_code": "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle", "test_imports": ["import math"], "test_list": ["assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)", "assert math.isclose(angle_complex(2,1j), 0.4636476090008061, rel_tol=0.001)", "assert math.isclose(angle_complex(0,2j), 1.5707963267948966, rel_tol=0.001)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "import cmath\n\ndef angle_complex(z):\n    \"\"\"\n    Get the angle (argument) of a complex number in radians.\n    \n    Args:\n        z: A complex number\n        \n    Returns:\n        The angle of the complex number in radians, in the range [-π, π]\n    \"\"\"\n    return cmath.phase(z)"}
{"benchmark": "mbpp", "task_id": "119", "prompt": "Write a python function to find the element that appears only once in a sorted array.", "reference_code": "def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)", "test_imports": [], "test_list": ["assert search([1,1,2,2,3]) == 3", "assert search([1,1,3,3,4,4,5,5,7,7,8]) == 8", "assert search([1,2,2,3,3,4,4]) == 1"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def search(arr):\n    \"\"\"\n    Find the element that appears only once in a sorted array.\n    \n    In a sorted array where all elements appear twice except one,\n    find and return the element that appears only once.\n    \n    Args:\n        arr: A sorted list of integers where all elements appear twice except one\n        \n    Returns:\n        The element that appears only once\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        # Ensure mid is even so we can compare pairs\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        \n        # If arr[mid] == arr[mid+1], the single element is in the right half\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            # The single element is in the left half (including mid)\n            right = mid\n    \n    return arr[left]"}
{"benchmark": "mbpp", "task_id": "123", "prompt": "Write a function to sum all amicable numbers from 1 to a specified number.", "reference_code": "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)", "test_imports": [], "test_list": ["assert amicable_numbers_sum(999)==504", "assert amicable_numbers_sum(9999)==31626", "assert amicable_numbers_sum(99)==0"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def amicable_numbers_sum(n: int) -> int:\n    \"\"\"\n    Sum all amicable numbers from 1 to n.\n    \n    Amicable numbers are pairs of different numbers where each number\n    equals the sum of the proper divisors of the other.\n    \"\"\"\n    def sum_of_proper_divisors(num: int) -> int:\n        \"\"\"Calculate the sum of proper divisors of a number.\"\"\"\n        if num <= 1:\n            return 0\n        divisor_sum = 1\n        # Check divisors up to sqrt(num)\n        i = 2\n        while i * i <= num:\n            if num % i == 0:\n                divisor_sum += i\n                if i != num // i:\n                    divisor_sum += num // i\n            i += 1\n        return divisor_sum\n    \n    amicable_set = set()\n    \n    # Check each number from 1 to n\n    for i in range(1, n + 1):\n        sum_divisors_i = sum_of_proper_divisors(i)\n        # Check if it forms an amicable pair\n        if sum_divisors_i != i and sum_divisors_i <= n:\n            sum_divisors_j = sum_of_proper_divisors(sum_divisors_i)\n            if sum_divisors_j == i:\n                amicable_set.add(i)\n    \n    return sum(amicable_set)"}
{"benchmark": "mbpp", "task_id": "127", "prompt": "Write a function to multiply two integers.", "reference_code": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)", "test_imports": [], "test_list": ["assert multiply_int(10,20)==200", "assert multiply_int(5,10)==50", "assert multiply_int(4,8)==32"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def multiply_int(a: int, b: int) -> int:\n    \"\"\"Multiply two integers and return the result.\"\"\"\n    return a * b"}
{"benchmark": "mbpp", "task_id": "125", "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.", "reference_code": "def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0", "test_imports": [], "test_list": ["assert find_length(\"11000010001\") == 6", "assert find_length(\"10111\") == 1", "assert find_length(\"11011101100101\") == 2"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def find_length(s: str) -> int:\n    \"\"\"\n    Find the maximum difference between the number of 0s and number of 1s\n    in any sub-string of the given binary string.\n    \n    This is solved by converting 0s to -1s and finding the maximum subarray sum.\n    The maximum difference (0s - 1s) equals the maximum subarray sum when\n    we treat 0 as +1 and 1 as -1.\n    \"\"\"\n    if not s:\n        return 0\n    \n    # Convert string to array where 0 -> 1 and 1 -> -1\n    # Then find maximum subarray sum using Kadane's algorithm\n    max_diff = 0\n    current_sum = 0\n    \n    for char in s:\n        if char == '0':\n            current_sum += 1\n        else:\n            current_sum -= 1\n        \n        # If current sum is negative, reset to 0 (start new subarray)\n        if current_sum < 0:\n            current_sum = 0\n        \n        # Track maximum difference found\n        max_diff = max(max_diff, current_sum)\n    \n    return max_diff"}
{"benchmark": "mbpp", "task_id": "128", "prompt": "Write a function to find words that are longer than n characters from a given list of words.", "reference_code": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t", "test_imports": [], "test_list": ["assert long_words(3,\"python is a programming language\")==['python','programming','language']", "assert long_words(2,\"writing a program\")==['writing','program']", "assert long_words(5,\"sorting list\")==['sorting']"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def long_words(words, n):\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n    \n    Args:\n        words: A list of words (strings)\n        n: The threshold length (integer)\n    \n    Returns:\n        A list of words that have length greater than n\n    \"\"\"\n    return [word for word in words if len(word) > n]"}
{"benchmark": "mbpp", "task_id": "130", "prompt": "Write a function to find the item with maximum frequency in a given list.", "reference_code": "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]", "test_imports": [], "test_list": ["assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2", "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8", "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==20"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def max_occurrences(items):\n    \"\"\"\n    Find the item with maximum frequency in a given list.\n    \n    Args:\n        items: A list of items\n        \n    Returns:\n        The item that appears most frequently in the list.\n        If the list is empty, returns None.\n        If there are ties, returns the first item encountered with max frequency.\n    \"\"\"\n    if not items:\n        return None\n    \n    frequency = {}\n    for item in items:\n        frequency[item] = frequency.get(item, 0) + 1\n    \n    max_item = max(frequency, key=frequency.get)\n    return max_item"}
{"benchmark": "mbpp", "task_id": "126", "prompt": "Write a python function to find the sum of common divisors of two given numbers.", "reference_code": "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum", "test_imports": [], "test_list": ["assert sum(10,15) == 6", "assert sum(100,150) == 93", "assert sum(4,6) == 3"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def sum(a, b):\n    \"\"\"\n    Find the sum of common divisors of two given numbers.\n    \n    Args:\n        a: First number\n        b: Second number\n    \n    Returns:\n        The sum of all common divisors of a and b\n    \"\"\"\n    # Handle edge cases\n    if a == 0 and b == 0:\n        return 0\n    \n    # Get absolute values to handle negative numbers\n    a = abs(a)\n    b = abs(b)\n    \n    # Find the GCD to determine the range of divisors to check\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    \n    # The common divisors of a and b are exactly the divisors of gcd(a, b)\n    common_gcd = gcd(a, b)\n    \n    # Sum all divisors of the GCD\n    divisor_sum = 0\n    i = 1\n    while i * i <= common_gcd:\n        if common_gcd % i == 0:\n            divisor_sum += i\n            # Add the corresponding divisor if it's different\n            if i != common_gcd // i:\n                divisor_sum += common_gcd // i\n        i += 1\n    \n    return divisor_sum"}
{"benchmark": "mbpp", "task_id": "133", "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers.", "reference_code": "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)", "test_imports": [], "test_list": ["assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32", "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52", "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def sum_negativenum(numbers):\n    \"\"\"\n    Calculate the sum of the negative numbers in a given list.\n    \n    Args:\n        numbers: A list of numbers\n        \n    Returns:\n        The sum of all negative numbers in the list\n    \"\"\"\n    return sum(num for num in numbers if num < 0)"}
{"benchmark": "mbpp", "task_id": "131", "prompt": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).", "reference_code": "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string", "test_imports": [], "test_list": ["assert reverse_vowels(\"Python\") == \"Python\"", "assert reverse_vowels(\"USA\") == \"ASU\"", "assert reverse_vowels(\"ab\") == \"ab\""], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def reverse_vowels(s: str) -> str:\n    vowels = set('aeiouAEIOU')\n    chars = list(s)\n    left, right = 0, len(chars) - 1\n    \n    while left < right:\n        # Find the next vowel from the left\n        while left < right and chars[left] not in vowels:\n            left += 1\n        \n        # Find the next vowel from the right\n        while left < right and chars[right] not in vowels:\n            right -= 1\n        \n        # Swap the vowels\n        chars[left], chars[right] = chars[right], chars[left]\n        left += 1\n        right -= 1\n    \n    return ''.join(chars)"}
{"benchmark": "mbpp", "task_id": "135", "prompt": "Write a function to find the nth hexagonal number.", "reference_code": "def hexagonal_num(n): \n\treturn n*(2*n - 1) ", "test_imports": [], "test_list": ["assert hexagonal_num(10) == 190", "assert hexagonal_num(5) == 45", "assert hexagonal_num(7) == 91"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def hexagonal_num(n: int) -> int:\n    \"\"\"\n    Find the nth hexagonal number.\n    \n    The nth hexagonal number is given by the formula: n * (2*n - 1)\n    \n    Hexagonal numbers: 1, 6, 15, 28, 45, 66, 91, 120, ...\n    \"\"\"\n    return n * (2 * n - 1)"}
{"benchmark": "mbpp", "task_id": "129", "prompt": "Write a function to calculate whether the matrix is a magic square.", "reference_code": "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True", "test_imports": [], "test_list": ["assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True", "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True", "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def magic_square_test(matrix):\n    \"\"\"\n    Test whether a matrix is a magic square.\n    \n    A magic square is a square matrix where:\n    - All rows sum to the same value\n    - All columns sum to the same value\n    - Both diagonals sum to the same value\n    - All these sums are equal\n    \n    Args:\n        matrix: A list of lists representing a square matrix\n        \n    Returns:\n        True if the matrix is a magic square, False otherwise\n    \"\"\"\n    # Handle empty or invalid input\n    if not matrix or not isinstance(matrix, list):\n        return False\n    \n    n = len(matrix)\n    \n    # Check if it's a square matrix\n    if not all(isinstance(row, list) and len(row) == n for row in matrix):\n        return False\n    \n    # Handle 1x1 matrix\n    if n == 1:\n        return True\n    \n    # Calculate the magic sum from the first row\n    magic_sum = sum(matrix[0])\n    \n    # Check all rows\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check all columns\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n    \n    # Check main diagonal (top-left to bottom-right)\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    \n    # Check anti-diagonal (top-right to bottom-left)\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n    \n    return True"}
{"benchmark": "mbpp", "task_id": "132", "prompt": "Write a function to convert a tuple to a string.", "reference_code": "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str", "test_imports": [], "test_list": ["assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")", "assert tup_string(('p','y','t','h','o','n'))==(\"python\")", "assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def tup_string(tup):\n    \"\"\"\n    Convert a tuple to a string representation.\n    \n    Args:\n        tup: A tuple to convert to string\n        \n    Returns:\n        A string representation of the tuple\n    \"\"\"\n    return str(tup)"}
{"benchmark": "mbpp", "task_id": "137", "prompt": "Write a function to find the ratio of zeroes to non-zeroes in an array of integers.", "reference_code": "from array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)", "test_imports": ["import math"], "test_list": ["assert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)", "assert math.isclose(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.00, rel_tol=0.001)", "assert math.isclose(zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.00, rel_tol=0.001)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def zero_count(arr):\n    \"\"\"\n    Find the ratio of zeroes to non-zeroes in an array of integers.\n    \n    Args:\n        arr: A list of integers\n        \n    Returns:\n        A float representing the ratio of zeroes to non-zeroes.\n        Returns 0 if there are no non-zero elements.\n    \"\"\"\n    if not arr:\n        return 0\n    \n    zeroes = arr.count(0)\n    non_zeroes = len(arr) - zeroes\n    \n    if non_zeroes == 0:\n        return 0\n    \n    return zeroes / non_zeroes"}
{"benchmark": "mbpp", "task_id": "139", "prompt": "Write a function to find the circumference of a circle.", "reference_code": "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter", "test_imports": ["import math"], "test_list": ["assert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)", "assert math.isclose(circle_circumference(5), 31.415000000000003, rel_tol=0.001)", "assert math.isclose(circle_circumference(4), 25.132, rel_tol=0.001)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "import math\n\ndef circle_circumference(radius):\n    \"\"\"\n    Calculate the circumference of a circle given its radius.\n    \n    Args:\n        radius: The radius of the circle (numeric value)\n    \n    Returns:\n        The circumference of the circle (2 * π * radius)\n    \"\"\"\n    return 2 * math.pi * radius"}
{"benchmark": "mbpp", "task_id": "140", "prompt": "Write a function to flatten the list of lists into a single set of numbers.", "reference_code": "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) ", "test_imports": [], "test_list": ["assert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])", "assert set(extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)])) == set([1, 2, 3, 4, 7, 8])", "assert set(extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)])) == set([7, 8, 9, 10, 11, 12])"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def extract_singly(list_of_lists):\n    \"\"\"\n    Flatten a list of lists into a single set of numbers.\n    \n    Args:\n        list_of_lists: A list containing lists of numbers\n        \n    Returns:\n        A set containing all unique numbers from the nested lists\n    \"\"\"\n    result = set()\n    for sublist in list_of_lists:\n        if isinstance(sublist, list):\n            for item in sublist:\n                result.add(item)\n        else:\n            result.add(sublist)\n    return result"}
{"benchmark": "mbpp", "task_id": "142", "prompt": "Write a function to count number items that are identical in the same position of three given lists.", "reference_code": "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result", "test_imports": [], "test_list": ["assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3", "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4", "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Count the number of items that are identical in the same position\n    across three given lists.\n    \n    Args:\n        list1: First list\n        list2: Second list\n        list3: Third list\n    \n    Returns:\n        Integer count of positions where all three lists have identical values\n    \"\"\"\n    count = 0\n    min_length = min(len(list1), len(list2), len(list3))\n    \n    for i in range(min_length):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    \n    return count"}
{"benchmark": "mbpp", "task_id": "138", "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.", "reference_code": "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True", "test_imports": [], "test_list": ["assert is_Sum_Of_Powers_Of_Two(10) == True", "assert is_Sum_Of_Powers_Of_Two(7) == False", "assert is_Sum_Of_Powers_Of_Two(14) == True"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Check whether the given number can be represented as sum of non-zero powers of 2.\n    \n    A number can be represented as sum of non-zero powers of 2 if and only if\n    it has at least one bit set in its binary representation (i.e., n > 0).\n    \n    This is because every positive integer can be uniquely represented as a sum\n    of distinct powers of 2 (binary representation).\n    \n    Args:\n        n: An integer to check\n        \n    Returns:\n        True if n can be represented as sum of non-zero powers of 2, False otherwise\n    \"\"\"\n    return n > 0"}
{"benchmark": "mbpp", "task_id": "143", "prompt": "Write a function to find number of lists present in the given tuple.", "reference_code": "def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) ", "test_imports": [], "test_list": ["assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2", "assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3", "assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def find_lists(t):\n    \"\"\"\n    Find the number of lists present in the given tuple.\n    \n    Args:\n        t: A tuple that may contain lists and other elements\n        \n    Returns:\n        The count of list objects in the tuple\n    \"\"\"\n    count = 0\n    for item in t:\n        if isinstance(item, list):\n            count += 1\n    return count"}
{"benchmark": "mbpp", "task_id": "141", "prompt": "Write a function to sort a list of elements.", "reference_code": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums", "test_imports": [], "test_list": ["assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]", "assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]", "assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def pancake_sort(arr):\n    \"\"\"\n    Sort a list using the pancake sort algorithm.\n    \n    Pancake sort works by repeatedly finding the maximum element in an unsorted\n    portion of the array, flipping it to the front, then flipping it to its\n    correct position.\n    \n    Args:\n        arr: List of comparable elements\n        \n    Returns:\n        The sorted list (sorts in-place and returns the list)\n    \"\"\"\n    def flip(arr, k):\n        \"\"\"Reverse the first k elements of the array\"\"\"\n        arr[:k] = arr[:k][::-1]\n    \n    n = len(arr)\n    \n    # Start from the end of the array and work backwards\n    for i in range(n, 1, -1):\n        # Find the index of the maximum element in arr[0:i]\n        max_idx = arr.index(max(arr[:i]))\n        \n        # If the maximum element is not already at the end of current subarray\n        if max_idx != i - 1:\n            # Flip to bring max element to front\n            if max_idx != 0:\n                flip(arr, max_idx + 1)\n            # Flip to bring max element to its correct position\n            flip(arr, i)\n    \n    return arr"}
{"benchmark": "mbpp", "task_id": "145", "prompt": "Write a python function to find the maximum difference between any two elements in a given array.", "reference_code": "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) ", "test_imports": [], "test_list": ["assert max_Abs_Diff((2,1,5,3)) == 4", "assert max_Abs_Diff((9,3,2,5,1)) == 8", "assert max_Abs_Diff((3,2,1)) == 2"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def max_Abs_Diff(arr):\n    \"\"\"\n    Find the maximum difference between any two elements in a given array.\n    \n    Args:\n        arr: A list of numbers\n        \n    Returns:\n        The maximum absolute difference between any two elements\n    \"\"\"\n    if not arr or len(arr) < 2:\n        return 0\n    \n    min_val = min(arr)\n    max_val = max(arr)\n    \n    return max_val - min_val"}
{"benchmark": "mbpp", "task_id": "161", "prompt": "Write a function to remove all elements from a given list present in another list.", "reference_code": "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result", "test_imports": [], "test_list": ["assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]", "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]", "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def remove_elements(list1, list2):\n    \"\"\"\n    Remove all elements from list1 that are present in list2.\n    \n    Args:\n        list1: The list to remove elements from\n        list2: The list containing elements to remove\n    \n    Returns:\n        A new list with elements from list1 that are not in list2\n    \"\"\"\n    list2_set = set(list2)\n    return [element for element in list1 if element not in list2_set]"}
{"benchmark": "mbpp", "task_id": "162", "prompt": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).", "reference_code": "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)", "test_imports": [], "test_list": ["assert sum_series(6) == 12", "assert sum_series(10) == 30", "assert sum_series(9) == 25"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def sum_series(n):\n    \"\"\"\n    Calculate the sum of (n - 2*i) from i=0 to n // 2.\n    This gives: n + (n-2) + (n-4) + ... until the term becomes <= 0.\n    \"\"\"\n    total = 0\n    i = 0\n    while True:\n        term = n - 2 * i\n        if term <= 0:\n            break\n        total += term\n        i += 1\n    return total"}
{"benchmark": "mbpp", "task_id": "160", "prompt": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.", "reference_code": "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None", "test_imports": [], "test_list": ["assert find_solution(2, 3, 7) == (2, 1)", "assert find_solution(4, 2, 7) == None", "assert find_solution(1, 13, 17) == (4, 1)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def find_solution(a, b, n):\n    \"\"\"\n    Find integers x and y such that ax + by = n.\n    Returns (x, y) as a tuple, or None if no solution exists.\n    \"\"\"\n    def gcd_extended(a, b):\n        \"\"\"\n        Extended Euclidean Algorithm.\n        Returns (gcd, x, y) where gcd = ax + by\n        \"\"\"\n        if b == 0:\n            return (a, 1, 0)\n        else:\n            gcd, x1, y1 = gcd_extended(b, a % b)\n            x = y1\n            y = x1 - (a // b) * y1\n            return (gcd, x, y)\n    \n    # Handle edge cases\n    if a == 0 and b == 0:\n        if n == 0:\n            return (0, 0)\n        else:\n            return None\n    \n    if a == 0:\n        if n % b == 0:\n            return (0, n // b)\n        else:\n            return None\n    \n    if b == 0:\n        if n % a == 0:\n            return (n // a, 0)\n        else:\n            return None\n    \n    # Use extended Euclidean algorithm\n    gcd, x, y = gcd_extended(abs(a), abs(b))\n    \n    # Check if solution exists\n    if n % gcd != 0:\n        return None\n    \n    # Scale the solution\n    scale = n // gcd\n    x *= scale\n    y *= scale\n    \n    # Adjust for signs of a and b\n    if a < 0:\n        x = -x\n    if b < 0:\n        y = -y\n    \n    return (x, y)"}
{"benchmark": "mbpp", "task_id": "163", "prompt": "Write a function to calculate the area of a regular polygon given the length and number of its sides.", "reference_code": "from math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area", "test_imports": ["import math"], "test_list": ["assert math.isclose(area_polygon(4, 20), 400., rel_tol=0.001)", "assert math.isclose(area_polygon(10, 15), 1731.197, rel_tol=0.001)", "assert math.isclose(area_polygon(9, 7), 302.909, rel_tol=0.001)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "import math\n\ndef area_polygon(side_length, num_sides):\n    \"\"\"\n    Calculate the area of a regular polygon.\n    \n    Args:\n        side_length: The length of each side of the polygon\n        num_sides: The number of sides of the polygon\n    \n    Returns:\n        The area of the regular polygon\n    \"\"\"\n    if num_sides < 3:\n        raise ValueError(\"A polygon must have at least 3 sides\")\n    \n    if side_length <= 0:\n        raise ValueError(\"Side length must be positive\")\n    \n    # Formula: Area = (n * s^2) / (4 * tan(π/n))\n    # where n is number of sides and s is side length\n    area = (num_sides * side_length ** 2) / (4 * math.tan(math.pi / num_sides))\n    \n    return area"}
{"benchmark": "mbpp", "task_id": "164", "prompt": "Write a function to determine if the sum of the divisors of two integers are the same.", "reference_code": "import math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); ", "test_imports": [], "test_list": ["assert are_equivalent(36, 57) == False", "assert are_equivalent(2, 4) == False", "assert are_equivalent(23, 47) == True"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def are_equivalent(a, b):\n    \"\"\"\n    Determine if the sum of divisors of two integers are the same.\n    \n    Args:\n        a: First integer\n        b: Second integer\n    \n    Returns:\n        True if sum of divisors of a equals sum of divisors of b, False otherwise\n    \"\"\"\n    def sum_of_divisors(n):\n        \"\"\"Calculate the sum of all divisors of n (including 1 and n itself).\"\"\"\n        if n == 0:\n            return 0\n        \n        n = abs(n)  # Work with absolute value\n        divisor_sum = 0\n        \n        # Find all divisors up to sqrt(n)\n        i = 1\n        while i * i <= n:\n            if n % i == 0:\n                divisor_sum += i\n                # Add the corresponding divisor if it's different\n                if i != n // i:\n                    divisor_sum += n // i\n            i += 1\n        \n        return divisor_sum\n    \n    return sum_of_divisors(a) == sum_of_divisors(b)"}
{"benchmark": "mbpp", "task_id": "165", "prompt": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).", "reference_code": "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars ", "test_imports": [], "test_list": ["assert count_char_position(\"xbcefg\") == 2", "assert count_char_position(\"ABcED\") == 3", "assert count_char_position(\"AbgdeF\") == 5"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def count_char_position(s):\n    \"\"\"\n    Count the number of characters in a string that occur at the same position\n    in the string as in the English alphabet (case insensitive).\n    \n    For example:\n    - 'a' is at position 1 in the alphabet, so if it's at position 1 in the string (index 0), it counts\n    - 'b' is at position 2 in the alphabet, so if it's at position 2 in the string (index 1), it counts\n    \"\"\"\n    count = 0\n    for i, char in enumerate(s):\n        if char.isalpha():\n            # Get position in alphabet (1-indexed): a/A=1, b/B=2, etc.\n            alphabet_position = ord(char.upper()) - ord('A') + 1\n            # Get position in string (1-indexed)\n            string_position = i + 1\n            if alphabet_position == string_position:\n                count += 1\n    return count"}
{"benchmark": "mbpp", "task_id": "167", "prompt": "Write a python function to find the smallest power of 2 greater than or equal to n.", "reference_code": "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; ", "test_imports": [], "test_list": ["assert next_power_of_2(0) == 1", "assert next_power_of_2(5) == 8", "assert next_power_of_2(17) == 32"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n    \n    Args:\n        n: A non-negative integer\n        \n    Returns:\n        The smallest power of 2 that is >= n\n    \"\"\"\n    if n <= 1:\n        return 1\n    \n    # Check if n is already a power of 2\n    if (n & (n - 1)) == 0:\n        return n\n    \n    # Find the position of the most significant bit\n    power = n.bit_length()\n    \n    # Return 2 raised to that power\n    return 1 << power"}
{"benchmark": "mbpp", "task_id": "166", "prompt": "Write a function that counts the number of pairs of integers in a list that xor to an even number.", "reference_code": "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count", "test_imports": [], "test_list": ["assert find_even_pair([5, 4, 7, 2, 1]) == 4", "assert find_even_pair([7, 2, 8, 1, 0, 5, 11]) == 9", "assert find_even_pair([1, 2, 3]) == 1"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def find_even_pair(lst):\n    \"\"\"\n    Counts the number of pairs of integers in a list that xor to an even number.\n    \n    A pair (a, b) where a < b xors to an even number when a ^ b is even.\n    XOR result is even when both numbers have the same parity (both even or both odd).\n    \"\"\"\n    count = 0\n    n = len(lst)\n    \n    # Check all pairs (i, j) where i < j\n    for i in range(n):\n        for j in range(i + 1, n):\n            # XOR of two numbers is even if they have the same parity\n            if (lst[i] ^ lst[j]) % 2 == 0:\n                count += 1\n    \n    return count"}
{"benchmark": "mbpp", "task_id": "168", "prompt": "Write a function to count the number of occurrences of a number in a given list.", "reference_code": "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count ", "test_imports": [], "test_list": ["assert frequency([1,2,3], 4) == 0", "assert frequency([1,2,2,3,3,3,4], 3) == 3", "assert frequency([0,1,2,3,1,2], 1) == 2"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def frequency(lst, num):\n    \"\"\"\n    Count the number of occurrences of a number in a given list.\n    \n    Args:\n        lst: A list that may contain the number to count\n        num: The number to count occurrences of\n    \n    Returns:\n        The count of how many times num appears in lst\n    \"\"\"\n    return lst.count(num)"}
{"benchmark": "mbpp", "task_id": "170", "prompt": "Write a function to find the sum of numbers in a list within a range specified by two indices.", "reference_code": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   ", "test_imports": [], "test_list": ["assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29", "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16", "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def sum_range_list(numbers, start, end):\n    \"\"\"\n    Find the sum of numbers in a list within a range specified by two indices.\n    \n    Args:\n        numbers: A list of numbers\n        start: The starting index (inclusive)\n        end: The ending index (inclusive)\n    \n    Returns:\n        The sum of numbers from index start to end (inclusive)\n    \"\"\"\n    if not numbers or start > end or start < 0 or end >= len(numbers):\n        return 0\n    \n    return sum(numbers[start:end + 1])"}
{"benchmark": "mbpp", "task_id": "171", "prompt": "Write a function to find the perimeter of a regular pentagon from the length of its sides.", "reference_code": "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter", "test_imports": [], "test_list": ["assert perimeter_pentagon(5) == 25", "assert perimeter_pentagon(10) == 50", "assert perimeter_pentagon(15) == 75"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def perimeter_pentagon(side_length):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon given the side length.\n    \n    A regular pentagon has 5 equal sides, so the perimeter is 5 times the side length.\n    \n    Args:\n        side_length: The length of one side of the regular pentagon\n        \n    Returns:\n        The perimeter of the pentagon\n    \"\"\"\n    return 5 * side_length"}
{"benchmark": "mbpp", "task_id": "172", "prompt": "Write a function to count the number of occurence of the string 'std' in a given string.", "reference_code": "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count", "test_imports": [], "test_list": ["assert count_occurance(\"letstdlenstdporstd\") == 3", "assert count_occurance(\"truststdsolensporsd\") == 1", "assert count_occurance(\"makestdsostdworthit\") == 2", "assert count_occurance(\"stds\") == 1", "assert count_occurance(\"\") == 0"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def count_occurance(s):\n    \"\"\"\n    Count the number of occurrences of the string 'std' in a given string.\n    \n    Args:\n        s: A string to search in\n        \n    Returns:\n        The number of times 'std' appears in the string\n    \"\"\"\n    return s.count('std')"}
{"benchmark": "mbpp", "task_id": "223", "prompt": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)", "reference_code": "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1", "test_imports": [], "test_list": ["assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True", "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False", "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True", "assert is_majority([1, 1, 2, 2], 5, 1) == False"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def is_majority(arr, n, x):\n    \"\"\"\n    Determines if element x is the majority element in sorted array arr.\n    \n    A majority element occurs more than n/2 times.\n    \n    Args:\n        arr: A sorted array\n        n: Length of the array\n        x: Element to check\n    \n    Returns:\n        True if x is the majority element, False otherwise\n    \"\"\"\n    # The majority element must occur more than n/2 times\n    threshold = n // 2\n    \n    # Count occurrences of x in the array\n    count = 0\n    for element in arr:\n        if element == x:\n            count += 1\n    \n    # Check if count is greater than n/2\n    return count > threshold"}
{"benchmark": "mbpp", "task_id": "222", "prompt": "Write a function to check if all the elements in tuple have same data type or not.", "reference_code": "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) ", "test_imports": [], "test_list": ["assert check_type((5, 6, 7, 3, 5, 6) ) == True", "assert check_type((1, 2, \"4\") ) == False", "assert check_type((3, 2, 1, 4, 5) ) == True"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def check_type(t):\n    \"\"\"\n    Check if all elements in a tuple have the same data type.\n    \n    Args:\n        t: A tuple to check\n        \n    Returns:\n        True if all elements have the same data type, False otherwise\n    \"\"\"\n    if len(t) == 0:\n        return True\n    \n    first_type = type(t[0])\n    return all(type(element) == first_type for element in t)"}
{"benchmark": "mbpp", "task_id": "224", "prompt": "Write a python function to count the number of set bits (binary digits with value 1) in a given number.", "reference_code": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count ", "test_imports": [], "test_list": ["assert count_Set_Bits(2) == 1", "assert count_Set_Bits(4) == 1", "assert count_Set_Bits(6) == 2"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def count_Set_Bits(n):\n    \"\"\"\n    Count the number of set bits (1s) in the binary representation of a number.\n    \n    Args:\n        n: An integer number\n        \n    Returns:\n        The count of set bits in the binary representation of n\n    \"\"\"\n    count = 0\n    # Handle negative numbers by working with absolute value\n    n = abs(n)\n    \n    while n > 0:\n        # Check if the least significant bit is 1\n        count += n & 1\n        # Right shift to check the next bit\n        n >>= 1\n    \n    return count"}
{"benchmark": "mbpp", "task_id": "226", "prompt": "Write a python function to remove the characters which have odd index values of a given string.", "reference_code": "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result", "test_imports": [], "test_list": ["assert odd_values_string('abcdef') == 'ace'", "assert odd_values_string('python') == 'pto'", "assert odd_values_string('data') == 'dt'", "assert odd_values_string('lambs') == 'lms'"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def odd_values_string(s):\n    \"\"\"\n    Remove characters at odd index positions from a string.\n    \n    Args:\n        s: Input string\n        \n    Returns:\n        String with characters at odd indices removed\n    \"\"\"\n    return s[::2]"}
{"benchmark": "mbpp", "task_id": "227", "prompt": "Write a function to find minimum of three numbers.", "reference_code": "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest ", "test_imports": [], "test_list": ["assert min_of_three(10,20,0)==0", "assert min_of_three(19,15,18)==15", "assert min_of_three(-10,-20,-30)==-30"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def min_of_three(a, b, c):\n    \"\"\"Find the minimum of three numbers.\"\"\"\n    return min(a, b, c)"}
{"benchmark": "mbpp", "task_id": "228", "prompt": "Write a python function to check whether all the bits are unset in the given range or not.", "reference_code": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False", "test_imports": [], "test_list": ["assert all_Bits_Set_In_The_Given_Range(4,1,2) == True", "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True", "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def all_Bits_Set_In_The_Given_Range(num, l, r):\n    \"\"\"\n    Check whether all the bits are unset in the given range [l, r].\n    \n    Args:\n        num: The number to check\n        l: Left position (0-indexed from right)\n        r: Right position (0-indexed from right)\n    \n    Returns:\n        True if all bits in range [l, r] are unset (0), False otherwise\n    \"\"\"\n    # Create a mask with all bits set in the range [l, r]\n    # First, create a mask with (r - l + 1) bits set\n    mask = (1 << (r - l + 1)) - 1\n    # Shift the mask to start at position l\n    mask = mask << l\n    \n    # Check if all bits in the range are unset\n    # If (num & mask) == 0, then all bits in the range are unset\n    return (num & mask) == 0"}
{"benchmark": "mbpp", "task_id": "229", "prompt": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.", "reference_code": "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr", "test_imports": [], "test_list": ["assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]", "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]", "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def re_arrange_array(arr, n):\n    \"\"\"\n    Re-arranges the first n elements of the array so that all negative elements\n    appear before positive ones, while preserving relative order within each group.\n    \n    Args:\n        arr: The input array to be modified\n        n: The number of elements to consider from the start of the array\n    \n    Returns:\n        None (modifies arr in-place)\n    \"\"\"\n    # Separate negative and positive elements while preserving order\n    negatives = []\n    positives = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n    \n    # Reconstruct the first n elements with negatives first, then positives\n    combined = negatives + positives\n    for i in range(n):\n        arr[i] = combined[i]"}
{"benchmark": "mbpp", "task_id": "230", "prompt": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.", "reference_code": "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2", "test_imports": [], "test_list": ["assert replace_blank(\"hello people\",'@')==(\"hello@people\")", "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")", "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def replace_blank(string, character):\n    return string.replace(' ', character)"}
{"benchmark": "mbpp", "task_id": "232", "prompt": "Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.", "reference_code": "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest", "test_imports": [], "test_list": ["assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])", "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5))==set([100,90,80,70,60])", "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3))==set([100,90,80])"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def larg_nnum(lst, n):\n    \"\"\"\n    Returns a list containing the n largest items from the input list.\n    \n    Args:\n        lst: A list of items\n        n: An integer specifying how many largest items to return\n    \n    Returns:\n        A list containing the n largest items, sorted in descending order\n    \"\"\"\n    if n <= 0:\n        return []\n    if n >= len(lst):\n        return sorted(lst, reverse=True)\n    return sorted(lst, reverse=True)[:n]"}
{"benchmark": "mbpp", "task_id": "233", "prompt": "Write a function to find the lateral surface area of a cylinder.", "reference_code": "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface", "test_imports": ["import math"], "test_list": ["assert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)", "assert math.isclose(lateralsuface_cylinder(4,5), 125.66000000000001, rel_tol=0.001)", "assert math.isclose(lateralsuface_cylinder(4,10), 251.32000000000002, rel_tol=0.001)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def lateralsuface_cylinder(radius, height):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n    \n    The lateral surface area of a cylinder is the area of the curved surface,\n    excluding the top and bottom circles.\n    \n    Formula: Lateral Surface Area = 2 * π * r * h\n    \n    Args:\n        radius: The radius of the cylinder\n        height: The height of the cylinder\n    \n    Returns:\n        The lateral surface area of the cylinder\n    \"\"\"\n    import math\n    return 2 * math.pi * radius * height"}
{"benchmark": "mbpp", "task_id": "234", "prompt": "Write a function to find the volume of a cube given its side length.", "reference_code": "def volume_cube(l):\n  volume = l * l * l\n  return volume", "test_imports": [], "test_list": ["assert volume_cube(3)==27", "assert volume_cube(2)==8", "assert volume_cube(5)==125"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def volume_cube(side_length):\n    \"\"\"\n    Calculate the volume of a cube given its side length.\n    \n    Args:\n        side_length: The length of one side of the cube\n        \n    Returns:\n        The volume of the cube (side_length^3)\n    \"\"\"\n    return side_length ** 3"}
{"benchmark": "mbpp", "task_id": "238", "prompt": "Write a python function to count the number of non-empty substrings of a given string.", "reference_code": "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); ", "test_imports": [], "test_list": ["assert number_of_substrings(\"abc\") == 6", "assert number_of_substrings(\"abcd\") == 10", "assert number_of_substrings(\"abcde\") == 15"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def number_of_substrings(s: str) -> int:\n    \"\"\"\n    Count the number of non-empty substrings of a given string.\n    \n    For a string of length n, the total number of non-empty substrings is n*(n+1)/2.\n    This is because:\n    - Substrings of length 1: n\n    - Substrings of length 2: n-1\n    - Substrings of length 3: n-2\n    - ...\n    - Substrings of length n: 1\n    Total = n + (n-1) + (n-2) + ... + 1 = n*(n+1)/2\n    \"\"\"\n    n = len(s)\n    return n * (n + 1) // 2"}
{"benchmark": "mbpp", "task_id": "240", "prompt": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.", "reference_code": "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n", "test_imports": [], "test_list": ["assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]", "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]", "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def replace_list(list1, list2):\n    \"\"\"\n    Replaces the last element of the first list with the elements of the second list.\n    \n    Args:\n        list1: The first list to modify\n        list2: The list whose elements will replace the last element of list1\n    \n    Returns:\n        The modified list1\n    \"\"\"\n    if len(list1) > 0:\n        list1.pop()\n        list1.extend(list2)\n    return list1"}
{"benchmark": "mbpp", "task_id": "237", "prompt": "Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.", "reference_code": "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) ", "test_imports": [], "test_list": ["assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}", "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}", "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def check_occurences(tuples_list):\n    \"\"\"\n    Takes a list of tuples and returns a dictionary mapping each unique tuple\n    to the number of times it occurs in the list.\n    \n    Args:\n        tuples_list: A list of tuples\n        \n    Returns:\n        A dictionary with tuples as keys and their occurrence counts as values\n    \"\"\"\n    occurrence_dict = {}\n    for tup in tuples_list:\n        if tup in occurrence_dict:\n            occurrence_dict[tup] += 1\n        else:\n            occurrence_dict[tup] = 1\n    return occurrence_dict"}
{"benchmark": "mbpp", "task_id": "239", "prompt": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.", "reference_code": "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]", "test_imports": [], "test_list": ["assert get_total_number_of_sequences(10, 4) == 4", "assert get_total_number_of_sequences(5, 2) == 6", "assert get_total_number_of_sequences(16, 3) == 84"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def get_total_number_of_sequences(m: int, n: int) -> int:\n    \"\"\"\n    Find the number of sequences of length n where:\n    - Each element is a positive integer\n    - Each element >= 2 * previous element\n    - Each element <= m\n    \n    Uses dynamic programming with memoization.\n    \"\"\"\n    memo = {}\n    \n    def count_sequences(length_remaining: int, last_value: int) -> int:\n        \"\"\"\n        Count sequences of given length starting after last_value.\n        \n        Args:\n            length_remaining: How many more elements we need to add\n            last_value: The value of the previous element (0 if this is the first)\n        \n        Returns:\n            Number of valid sequences\n        \"\"\"\n        if length_remaining == 0:\n            return 1\n        \n        if (length_remaining, last_value) in memo:\n            return memo[(length_remaining, last_value)]\n        \n        count = 0\n        # Determine the minimum value for the next element\n        if last_value == 0:\n            # First element must be at least 1\n            min_next = 1\n        else:\n            # Next element must be at least 2 * last_value\n            min_next = 2 * last_value\n        \n        # Try all valid values for the next element\n        for next_value in range(min_next, m + 1):\n            count += count_sequences(length_remaining - 1, next_value)\n        \n        memo[(length_remaining, last_value)] = count\n        return count\n    \n    return count_sequences(n, 0)"}
{"benchmark": "mbpp", "task_id": "235", "prompt": "Write a python function to set all even bits of a given number.", "reference_code": "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) ", "test_imports": [], "test_list": ["assert even_bit_set_number(10) == 10", "assert even_bit_set_number(20) == 30", "assert even_bit_set_number(30) == 30"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def even_bit_set_number(n):\n    \"\"\"\n    Set all even bits of a given number.\n    Even bits are at positions 0, 2, 4, 6, ... (0-indexed from the right).\n    \n    Args:\n        n: A non-negative integer\n        \n    Returns:\n        The number with all even-positioned bits set to 1\n    \"\"\"\n    # Create a mask with all even bits set\n    # For a 32-bit number, even bits are at positions 0, 2, 4, ..., 30\n    # This creates the pattern: 0101010101...0101 in binary\n    mask = 0x55555555  # For 32-bit integers\n    \n    # If we need to handle larger numbers, we can create the mask dynamically\n    # But for typical use cases, 32-bit is sufficient\n    # For arbitrary precision, we can use:\n    if n == 0:\n        return 0\n    \n    # Find the highest bit position\n    bit_length = n.bit_length()\n    \n    # Create mask with even bits set up to the highest bit\n    mask = 0\n    for i in range(0, bit_length + 1, 2):\n        mask |= (1 << i)\n    \n    # Set all even bits by OR-ing with the mask\n    result = n | mask\n    \n    return result"}
{"benchmark": "mbpp", "task_id": "242", "prompt": "Write a function to count the total number of characters in a string.", "reference_code": "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total", "test_imports": [], "test_list": ["assert count_charac(\"python programming\")==18", "assert count_charac(\"language\")==8", "assert count_charac(\"words\")==5"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def count_charac(s):\n    \"\"\"\n    Count the total number of characters in a string.\n    \n    Args:\n        s: A string\n        \n    Returns:\n        The total number of characters in the string\n    \"\"\"\n    return len(s)"}
{"benchmark": "mbpp", "task_id": "244", "prompt": "Write a python function to find the next perfect square greater than a given number.", "reference_code": "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN ", "test_imports": [], "test_list": ["assert next_Perfect_Square(35) == 36", "assert next_Perfect_Square(6) == 9", "assert next_Perfect_Square(9) == 16"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def next_Perfect_Square(n):\n    \"\"\"\n    Find the next perfect square greater than a given number.\n    \n    Args:\n        n: An integer\n        \n    Returns:\n        The next perfect square greater than n\n    \"\"\"\n    import math\n    \n    # Find the square root of n\n    sqrt_n = math.sqrt(n)\n    \n    # If n is already a perfect square, we need the next one\n    # Otherwise, we need to round up to the next integer\n    next_sqrt = math.floor(sqrt_n) + 1\n    \n    # Return the square of the next integer\n    return next_sqrt * next_sqrt"}
{"benchmark": "mbpp", "task_id": "246", "prompt": "Write a function for computing square roots using the babylonian method.", "reference_code": "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;", "test_imports": ["import math"], "test_list": ["assert math.isclose(babylonian_squareroot(10), 3.162277660168379, rel_tol=0.001)", "assert math.isclose(babylonian_squareroot(2), 1.414213562373095, rel_tol=0.001)", "assert math.isclose(babylonian_squareroot(9), 3.0, rel_tol=0.001)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def babylonian_squareroot(n, tolerance=1e-10, max_iterations=1000):\n    \"\"\"\n    Compute the square root of n using the Babylonian method.\n    \n    The Babylonian method (also known as Heron's method) iteratively\n    improves an estimate using the formula: x_new = (x + n/x) / 2\n    \n    Args:\n        n: The number to find the square root of\n        tolerance: The acceptable error margin (default 1e-10)\n        max_iterations: Maximum number of iterations (default 1000)\n    \n    Returns:\n        The approximate square root of n\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Cannot compute square root of negative number\")\n    \n    if n == 0:\n        return 0\n    \n    # Start with an initial guess\n    x = n\n    \n    for _ in range(max_iterations):\n        # Babylonian method formula\n        x_new = (x + n / x) / 2\n        \n        # Check if we've converged\n        if abs(x_new - x) < tolerance:\n            return x_new\n        \n        x = x_new\n    \n    return x"}
{"benchmark": "mbpp", "task_id": "250", "prompt": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.", "reference_code": "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count ", "test_imports": [], "test_list": ["assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0", "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3", "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def count_X(tup, element):\n    \"\"\"\n    Counts the occurrences of an element in a tuple.\n    \n    Args:\n        tup: A tuple to search in\n        element: The element to count\n        \n    Returns:\n        The number of times the element appears in the tuple\n    \"\"\"\n    return tup.count(element)"}
{"benchmark": "mbpp", "task_id": "248", "prompt": "Write a function that takes in an integer n and calculates the harmonic sum of n-1.", "reference_code": "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) ", "test_imports": ["import math"], "test_list": ["assert math.isclose(harmonic_sum(7), 2.5928571428571425, rel_tol=0.001)", "assert math.isclose(harmonic_sum(4), 2.083333333333333, rel_tol=0.001)", "assert math.isclose(harmonic_sum(19), 3.547739657143682, rel_tol=0.001)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def harmonic_sum(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1.\n    The harmonic sum of k is: 1/1 + 1/2 + 1/3 + ... + 1/k\n    \"\"\"\n    total = 0\n    for i in range(1, n):\n        total += 1 / i\n    return total"}
{"benchmark": "mbpp", "task_id": "245", "prompt": "Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.", "reference_code": "def max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum", "test_imports": [], "test_list": ["assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194", "assert max_sum([80, 60, 30, 40, 20, 10]) == 210", "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30]) == 138"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def max_sum(arr):\n    \"\"\"\n    Find the maximum sum of a bitonic subsequence.\n    A bitonic subsequence is one that first increases then decreases.\n    \"\"\"\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    \n    # inc[i] = maximum sum of increasing subsequence ending at i\n    inc = [0] * n\n    # dec[i] = maximum sum of decreasing subsequence starting at i\n    dec = [0] * n\n    \n    # Calculate inc array - maximum sum of increasing subsequence ending at each index\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    \n    # Calculate dec array - maximum sum of decreasing subsequence starting at each index\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[j] < arr[i]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    \n    # Find maximum bitonic sum\n    # A bitonic subsequence can be:\n    # 1. Just increasing (peak at some point)\n    # 2. Just decreasing (peak at some point)\n    # 3. Increasing then decreasing (peak at some point)\n    max_bitonic = 0\n    \n    for i in range(n):\n        # Peak at index i: inc[i] + dec[i] - arr[i] (subtract arr[i] as it's counted twice)\n        bitonic_sum = inc[i] + dec[i] - arr[i]\n        max_bitonic = max(max_bitonic, bitonic_sum)\n    \n    return max_bitonic"}
{"benchmark": "mbpp", "task_id": "251", "prompt": "Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.", "reference_code": "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list", "test_imports": [], "test_list": ["assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']", "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']", "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad']"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result"}
{"benchmark": "mbpp", "task_id": "247", "prompt": "Write a function to find the length of the longest palindromic subsequence in the given string.", "reference_code": "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]", "test_imports": [], "test_list": ["assert lps(\"TENS FOR TENS\") == 5", "assert lps(\"CARDIO FOR CARDS\") == 7", "assert lps(\"PART OF THE JOURNEY IS PART\") == 9"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def lps(s: str) -> int:\n    \"\"\"\n    Find the length of the longest palindromic subsequence in the given string.\n    \n    A palindromic subsequence is a subsequence that reads the same forwards and backwards.\n    \n    Args:\n        s: Input string\n        \n    Returns:\n        Length of the longest palindromic subsequence\n    \"\"\"\n    if not s:\n        return 0\n    \n    n = len(s)\n    \n    # dp[i][j] represents the length of the longest palindromic subsequence\n    # in the substring s[i:j+1]\n    dp = [[0] * n for _ in range(n)]\n    \n    # Every single character is a palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Build the table for substrings of length 2 and more\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            \n            if s[i] == s[j]:\n                # If characters match, add 2 to the result of inner substring\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                # If characters don't match, take the maximum of two possibilities:\n                # 1. Longest palindromic subsequence in s[i+1:j+1]\n                # 2. Longest palindromic subsequence in s[i:j]\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    \n    return dp[0][n - 1]"}
{"benchmark": "mbpp", "task_id": "249", "prompt": "Write a function to find the intersection of two arrays.", "reference_code": "def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result", "test_imports": [], "test_list": ["assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]", "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]", "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def intersection_array(arr1, arr2):\n    \"\"\"\n    Find the intersection of two arrays.\n    \n    Args:\n        arr1: First array/list\n        arr2: Second array/list\n    \n    Returns:\n        A list containing elements that appear in both arrays,\n        without duplicates, in the order they appear in arr1.\n    \"\"\"\n    set2 = set(arr2)\n    result = []\n    seen = set()\n    \n    for element in arr1:\n        if element in set2 and element not in seen:\n            result.append(element)\n            seen.add(element)\n    \n    return result"}
{"benchmark": "mbpp", "task_id": "255", "prompt": "Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.", "reference_code": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n", "test_imports": [], "test_list": ["assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]", "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]", "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "from itertools import combinations_with_replacement\n\ndef combinations_colors(colors, n):\n    \"\"\"\n    Generate all combinations with repetition of elements from a list.\n    \n    Args:\n        colors: A list of elements to combine\n        n: The length of each combination\n    \n    Returns:\n        A list of tuples, where each tuple is a combination with repetition\n    \"\"\"\n    return list(combinations_with_replacement(colors, n))"}
{"benchmark": "mbpp", "task_id": "257", "prompt": "Write a function that takes in two numbers and returns a tuple with the second number and then the first number.", "reference_code": "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)", "test_imports": [], "test_list": ["assert swap_numbers(10,20)==(20,10)", "assert swap_numbers(15,17)==(17,15)", "assert swap_numbers(100,200)==(200,100)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def swap_numbers(first, second):\n    return (second, first)"}
{"benchmark": "mbpp", "task_id": "252", "prompt": "Write a python function to convert complex numbers to polar coordinates.", "reference_code": "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) ", "test_imports": [], "test_list": ["assert convert(1) == (1.0, 0.0)", "assert convert(4) == (4.0,0.0)", "assert convert(5) == (5.0,0.0)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "import math\n\ndef convert(complex_number):\n    \"\"\"\n    Convert a complex number to polar coordinates.\n    \n    Args:\n        complex_number: A complex number (e.g., 3+4j)\n    \n    Returns:\n        A tuple (r, theta) where:\n        - r is the magnitude (distance from origin)\n        - theta is the angle in radians (from -π to π)\n    \"\"\"\n    r = abs(complex_number)\n    theta = math.atan2(complex_number.imag, complex_number.real)\n    return (r, theta)"}
{"benchmark": "mbpp", "task_id": "256", "prompt": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.", "reference_code": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr", "test_imports": [], "test_list": ["assert count_Primes_nums(5) == 2", "assert count_Primes_nums(10) == 4", "assert count_Primes_nums(100) == 25"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def count_Primes_nums(n):\n    \"\"\"\n    Returns the count of prime numbers less than the given non-negative number n.\n    \n    Args:\n        n: A non-negative integer\n        \n    Returns:\n        The count of prime numbers less than n\n    \"\"\"\n    if n <= 2:\n        return 0\n    \n    # Use Sieve of Eratosthenes for efficient prime counting\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    \n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            # Mark all multiples of i as not prime\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n    \n    return sum(is_prime)"}
{"benchmark": "mbpp", "task_id": "259", "prompt": "Write a function to maximize the given two tuples.", "reference_code": "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ", "test_imports": [], "test_list": ["assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))", "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))", "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def maximize_elements(tuple1, tuple2):\n    \"\"\"\n    Maximize the given two tuples by taking the maximum element at each position.\n    \n    Args:\n        tuple1: First tuple of numbers\n        tuple2: Second tuple of numbers\n    \n    Returns:\n        A tuple containing the maximum element at each position\n    \"\"\"\n    return tuple(max(a, b) for a, b in zip(tuple1, tuple2))"}
{"benchmark": "mbpp", "task_id": "262", "prompt": "Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.", "reference_code": "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]", "test_imports": [], "test_list": ["assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])", "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])", "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def split_two_parts(lst, L):\n    \"\"\"\n    Splits a list into two parts where the first part has length L.\n    \n    Args:\n        lst: The list to split\n        L: The length of the first part\n    \n    Returns:\n        A tuple containing two lists (first_part, second_part)\n    \"\"\"\n    return (lst[:L], lst[L:])"}
{"benchmark": "mbpp", "task_id": "261", "prompt": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.", "reference_code": "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "test_imports": [], "test_list": ["assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)", "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)", "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def division_elements(tuple1, tuple2):\n    \"\"\"\n    Performs element-wise division of two tuples.\n    \n    Args:\n        tuple1: First tuple of numbers\n        tuple2: Second tuple of numbers\n    \n    Returns:\n        A tuple containing the element-wise division results\n    \"\"\"\n    return tuple(a / b for a, b in zip(tuple1, tuple2))"}
{"benchmark": "mbpp", "task_id": "265", "prompt": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.", "reference_code": "def list_split(S, step):\n    return [S[i::step] for i in range(step)]", "test_imports": [], "test_list": ["assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]", "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]", "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def list_split(lst, n):\n    \"\"\"\n    Splits a list into chunks of size n.\n    \n    Args:\n        lst: The list to split\n        n: The size of each chunk\n        \n    Returns:\n        A list of lists, where each sublist contains up to n elements\n    \"\"\"\n    if n <= 0:\n        return []\n    \n    result = []\n    for i in range(0, len(lst), n):\n        result.append(lst[i:i + n])\n    \n    return result"}
{"benchmark": "mbpp", "task_id": "260", "prompt": "Write a function to find the nth newman–shanks–williams prime number.", "reference_code": "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)", "test_imports": [], "test_list": ["assert newman_prime(3) == 7", "assert newman_prime(4) == 17", "assert newman_prime(5) == 41"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def newman_prime(n: int) -> int:\n    \"\"\"\n    Find the nth Newman-Shanks-Williams prime number.\n    \n    Newman-Shanks-Williams primes are primes of the form:\n    P(k) = (a^k - b^k) / (a - b)\n    where a = (1 + sqrt(5)) / 2 and b = (1 - sqrt(5)) / 2\n    \n    Equivalently, they satisfy the recurrence:\n    P(0) = 1, P(1) = 1, P(k) = 2*P(k-1) + P(k-2)\n    \n    We need to find primes among the indices k where P(k) is prime.\n    \"\"\"\n    \n    def is_prime(num):\n        \"\"\"Check if a number is prime.\"\"\"\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        if num < 9:\n            return True\n        if num % 3 == 0:\n            return False\n        limit = int(num ** 0.5)\n        for i in range(5, limit + 1, 6):\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n        return True\n    \n    def nsw_number(k):\n        \"\"\"Calculate the k-th NSW number using recurrence relation.\"\"\"\n        if k == 0:\n            return 1\n        if k == 1:\n            return 1\n        \n        p_prev2 = 1  # P(0)\n        p_prev1 = 1  # P(1)\n        \n        for i in range(2, k + 1):\n            p_curr = 2 * p_prev1 + p_prev2\n            p_prev2 = p_prev1\n            p_prev1 = p_curr\n        \n        return p_prev1\n    \n    count = 0\n    k = 1\n    \n    # NSW primes occur at indices that are themselves prime\n    # We check NSW numbers at prime indices\n    while count < n:\n        if is_prime(k):\n            nsw_val = nsw_number(k)\n            if is_prime(nsw_val):\n                count += 1\n                if count == n:\n                    return nsw_val\n        k += 1\n    \n    return -1"}
{"benchmark": "mbpp", "task_id": "264", "prompt": "Write a function to calculate a dog's age in dog's years.", "reference_code": "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age", "test_imports": [], "test_list": ["assert dog_age(12)==61", "assert dog_age(15)==73", "assert dog_age(24)==109"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def dog_age(human_years: int) -> int:\n    \"\"\"\n    Calculate a dog's age in dog years.\n    \n    The conversion is:\n    - First year of a dog's life = 15 dog years\n    - Second year of a dog's life = 9 dog years\n    - Each year after that = 5 dog years\n    \n    Args:\n        human_years: The number of human years\n        \n    Returns:\n        The equivalent age in dog years\n    \"\"\"\n    if human_years <= 0:\n        return 0\n    elif human_years == 1:\n        return 15\n    elif human_years == 2:\n        return 15 + 9\n    else:\n        return 15 + 9 + (human_years - 2) * 5"}
{"benchmark": "mbpp", "task_id": "266", "prompt": "Write a function to find the lateral surface area of a cube given its side length.", "reference_code": "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA", "test_imports": [], "test_list": ["assert lateralsurface_cube(5)==100", "assert lateralsurface_cube(9)==324", "assert lateralsurface_cube(10)==400"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def lateralsurface_cube(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n    \n    The lateral surface area of a cube is the area of all 4 vertical faces\n    (excluding the top and bottom faces).\n    \n    Formula: Lateral Surface Area = 4 * side_length^2\n    \n    Args:\n        side_length: The length of one side of the cube\n        \n    Returns:\n        The lateral surface area of the cube\n    \"\"\"\n    return 4 * side_length * side_length"}
{"benchmark": "mbpp", "task_id": "267", "prompt": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.", "reference_code": "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) ", "test_imports": [], "test_list": ["assert square_Sum(2) == 10", "assert square_Sum(3) == 35", "assert square_Sum(4) == 84"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def square_Sum(n):\n    \"\"\"\n    Returns the sum of the squares of the first n odd natural numbers.\n    \n    The first n odd natural numbers are: 1, 3, 5, 7, ..., (2n-1)\n    We need to calculate: 1^2 + 3^2 + 5^2 + ... + (2n-1)^2\n    \"\"\"\n    total = 0\n    for i in range(1, n + 1):\n        odd_number = 2 * i - 1\n        total += odd_number ** 2\n    return total"}
{"benchmark": "mbpp", "task_id": "253", "prompt": "Write a python function that returns the number of integer elements in a given list.", "reference_code": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr", "test_imports": [], "test_list": ["assert count_integer([1,2,'abc',1.2]) == 2", "assert count_integer([1,2,3]) == 3", "assert count_integer([1,1.2,4,5.1]) == 2"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def count_integer(lst):\n    \"\"\"\n    Returns the number of integer elements in a given list.\n    \n    Args:\n        lst: A list that may contain various types of elements\n        \n    Returns:\n        The count of integer elements in the list\n    \"\"\"\n    count = 0\n    for element in lst:\n        if isinstance(element, int) and not isinstance(element, bool):\n            count += 1\n    return count"}
{"benchmark": "mbpp", "task_id": "269", "prompt": "Write a function to find the ascii value of a character.", "reference_code": "def ascii_value(k):\n  ch=k\n  return ord(ch)", "test_imports": [], "test_list": ["assert ascii_value('A')==65", "assert ascii_value('R')==82", "assert ascii_value('S')==83"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def ascii_value(char):\n    \"\"\"\n    Find the ASCII value of a character.\n    \n    Args:\n        char: A single character string\n        \n    Returns:\n        The ASCII value of the character as an integer\n    \"\"\"\n    return ord(char)"}
{"benchmark": "mbpp", "task_id": "270", "prompt": "Write a python function to find the sum of even numbers at even positions of a list.", "reference_code": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum", "test_imports": [], "test_list": ["assert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30", "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26", "assert sum_even_and_even_index([5, 6, 12, 1]) == 12"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def sum_even_and_even_index(lst):\n    \"\"\"\n    Find the sum of even numbers at even positions of a list.\n    \n    Args:\n        lst: A list of numbers\n        \n    Returns:\n        The sum of even numbers that are located at even indices (0, 2, 4, ...)\n    \"\"\"\n    total = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total"}
{"benchmark": "mbpp", "task_id": "273", "prompt": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.", "reference_code": "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) ", "test_imports": [], "test_list": ["assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)", "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)", "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def substract_elements(tuple1, tuple2):\n    \"\"\"\n    Subtracts elements of tuple2 from tuple1 at the same index.\n    \n    Args:\n        tuple1: First tuple\n        tuple2: Second tuple\n    \n    Returns:\n        A tuple with elements of tuple1 minus corresponding elements of tuple2\n    \"\"\"\n    return tuple(a - b for a, b in zip(tuple1, tuple2))"}
{"benchmark": "mbpp", "task_id": "268", "prompt": "Write a function to find the n'th star number.", "reference_code": "def find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) ", "test_imports": [], "test_list": ["assert find_star_num(3) == 37", "assert find_star_num(4) == 73", "assert find_star_num(5) == 121"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def find_star_num(n: int) -> int:\n    \"\"\"\n    Find the n'th star number.\n    \n    A star number is a centered figurate number that represents a star with a \n    dot in the center and all other dots surrounding the center dot in successive \n    square layers.\n    \n    The formula for the n'th star number is: 6*n*(n-1) + 1\n    \n    For example:\n    - 1st star number: 1\n    - 2nd star number: 13\n    - 3rd star number: 37\n    - 4th star number: 73\n    \"\"\"\n    return 6 * n * (n - 1) + 1"}
{"benchmark": "mbpp", "task_id": "272", "prompt": "Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.", "reference_code": "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) ", "test_imports": [], "test_list": ["assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]", "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]", "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def rear_extract(tuples_list):\n    return [t[-1] for t in tuples_list]"}
{"benchmark": "mbpp", "task_id": "271", "prompt": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.", "reference_code": "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; ", "test_imports": [], "test_list": ["assert even_Power_Sum(2) == 1056", "assert even_Power_Sum(3) == 8832", "assert even_Power_Sum(1) == 32"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def even_Power_Sum(n):\n    \"\"\"\n    Calculate the sum of the first n even natural numbers raised to the fifth power.\n    \n    Args:\n        n: An integer representing how many even natural numbers to process\n        \n    Returns:\n        The sum of (2*1)^5 + (2*2)^5 + (2*3)^5 + ... + (2*n)^5\n    \"\"\"\n    total = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total += even_number ** 5\n    return total"}
{"benchmark": "mbpp", "task_id": "276", "prompt": "Write a function that takes in the radius and height of a cylinder and returns the the volume.", "reference_code": "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume", "test_imports": ["import math"], "test_list": ["assert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)", "assert math.isclose(volume_cylinder(4,5), 251.32000000000002, rel_tol=0.001)", "assert math.isclose(volume_cylinder(4,10), 502.64000000000004, rel_tol=0.001)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "import math\n\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculate the volume of a cylinder.\n    \n    Args:\n        radius: The radius of the cylinder's base\n        height: The height of the cylinder\n    \n    Returns:\n        The volume of the cylinder (π * r² * h)\n    \"\"\"\n    return math.pi * radius ** 2 * height"}
{"benchmark": "mbpp", "task_id": "277", "prompt": "Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.", "reference_code": "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result", "test_imports": [], "test_list": ["assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}", "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}", "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def dict_filter(d, n):\n    \"\"\"\n    Filters a dictionary to only include entries with values >= n.\n    \n    Args:\n        d: A dictionary to filter\n        n: An integer threshold value\n        \n    Returns:\n        A new dictionary containing only entries with values >= n\n    \"\"\"\n    return {key: value for key, value in d.items() if value >= n}"}
{"benchmark": "mbpp", "task_id": "274", "prompt": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.", "reference_code": "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) ", "test_imports": [], "test_list": ["assert even_binomial_Coeff_Sum(4) == 8", "assert even_binomial_Coeff_Sum(6) == 32", "assert even_binomial_Coeff_Sum(2) == 2"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def even_binomial_Coeff_Sum(n: int) -> int:\n    \"\"\"\n    Finds the sum of binomial coefficients at even indices.\n    \n    For a given n, this computes:\n    C(n,0) + C(n,2) + C(n,4) + ... \n    \n    Using the mathematical identity:\n    Sum of C(n,k) for even k = 2^(n-1)\n    \"\"\"\n    if n == 0:\n        return 1\n    return 2 ** (n - 1)"}
{"benchmark": "mbpp", "task_id": "279", "prompt": "Write a function to find the nth decagonal number.", "reference_code": "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n ", "test_imports": [], "test_list": ["assert is_num_decagonal(3) == 27", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(10) == 370"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Find the nth decagonal number.\n    \n    A decagonal number is a figurate number that represents a decagon.\n    The formula for the nth decagonal number is: n(4n - 3)\n    \n    Args:\n        n: The position in the sequence (1-indexed)\n    \n    Returns:\n        The nth decagonal number\n    \"\"\"\n    return n * (4 * n - 3)"}
{"benchmark": "mbpp", "task_id": "278", "prompt": "Write a function to find the number of elements that occurs before the tuple element in the given tuple.", "reference_code": "def count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) ", "test_imports": [], "test_list": ["assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3", "assert count_first_elements((2, 9, (5, 7), 11) ) == 2", "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def count_first_elements(tup, element):\n    \"\"\"\n    Find the number of elements that occur before the tuple element in the given tuple.\n    \n    Args:\n        tup: A tuple to search in\n        element: The element to find in the tuple\n    \n    Returns:\n        The count of elements before the first occurrence of the element.\n        Returns -1 if the element is not found in the tuple.\n    \"\"\"\n    try:\n        index = tup.index(element)\n        return index\n    except ValueError:\n        return -1"}
{"benchmark": "mbpp", "task_id": "280", "prompt": "Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).", "reference_code": "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos", "test_imports": [], "test_list": ["assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)", "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)", "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def sequential_search(array, element):\n    for index, item in enumerate(array):\n        if item == element:\n            return (True, index)\n    return (False, -1)"}
{"benchmark": "mbpp", "task_id": "281", "prompt": "Write a python function to check if the elements of a given list are unique or not.", "reference_code": "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True", "test_imports": [], "test_list": ["assert all_unique([1,2,3]) == True", "assert all_unique([1,2,1,2]) == False", "assert all_unique([1,2,3,4,5]) == True"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def all_unique(lst):\n    \"\"\"\n    Check if all elements in a list are unique.\n    \n    Args:\n        lst: A list to check for uniqueness\n        \n    Returns:\n        True if all elements are unique, False otherwise\n    \"\"\"\n    return len(lst) == len(set(lst))"}
{"benchmark": "mbpp", "task_id": "282", "prompt": "Write a function to subtract two lists element-wise.", "reference_code": "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)", "test_imports": [], "test_list": ["assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]", "assert sub_list([1,2],[3,4])==[-2,-2]", "assert sub_list([90,120],[50,70])==[40,50]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def sub_list(list1, list2):\n    \"\"\"\n    Subtract two lists element-wise.\n    \n    Args:\n        list1: First list of numbers\n        list2: Second list of numbers\n    \n    Returns:\n        A new list where each element is the difference of corresponding elements\n        from list1 and list2 (list1[i] - list2[i])\n    \"\"\"\n    return [a - b for a, b in zip(list1, list2)]"}
{"benchmark": "mbpp", "task_id": "284", "prompt": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.", "reference_code": "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element", "test_imports": [], "test_list": ["assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False", "assert check_element([1,2,3,4],7)==False", "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def check_element(lst, element):\n    \"\"\"\n    Check whether all items in the list are equal to the given element.\n    \n    Args:\n        lst: A list to check\n        element: The element to compare against\n        \n    Returns:\n        True if all items in the list equal the element, False otherwise\n    \"\"\"\n    return all(item == element for item in lst)"}
{"benchmark": "mbpp", "task_id": "283", "prompt": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.", "reference_code": "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True", "test_imports": [], "test_list": ["assert validate(1234) == True", "assert validate(51241) == False", "assert validate(321) == True"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def validate(n: int) -> bool:\n    \"\"\"\n    Check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \n    Args:\n        n: An integer to validate\n        \n    Returns:\n        True if for each digit d in n, the frequency of d is <= d, False otherwise\n    \"\"\"\n    # Convert to string to work with digits, handle negative numbers by taking absolute value\n    digits_str = str(abs(n))\n    \n    # Count frequency of each digit\n    digit_freq = {}\n    for digit_char in digits_str:\n        digit = int(digit_char)\n        digit_freq[digit] = digit_freq.get(digit, 0) + 1\n    \n    # Check if frequency of each digit is <= the digit itself\n    for digit, freq in digit_freq.items():\n        if freq > digit:\n            return False\n    \n    return True"}
{"benchmark": "mbpp", "task_id": "285", "prompt": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.", "reference_code": "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False", "test_imports": [], "test_list": ["assert text_match_two_three(\"ac\")==(False)", "assert text_match_two_three(\"dc\")==(False)", "assert text_match_two_three(\"abbbba\")==(True)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "import re\n\ndef text_match_two_three(text):\n    \"\"\"\n    Check whether a string contains the 'a' character followed by two or three 'b' characters.\n    \n    Args:\n        text: A string to check\n        \n    Returns:\n        True if the pattern 'a' followed by 2 or 3 'b's is found, False otherwise\n    \"\"\"\n    return bool(re.search(r'ab{2,3}', text))"}
{"benchmark": "mbpp", "task_id": "290", "prompt": "Write a function to find the list of maximum length in a list of lists.", "reference_code": "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)", "test_imports": [], "test_list": ["assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])", "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])", "assert max_length([[5], [15,20,25]])==(3, [15,20,25])"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def max_length(lists):\n    \"\"\"\n    Find the list of maximum length in a list of lists.\n    \n    Args:\n        lists: A list of lists\n        \n    Returns:\n        The list with the maximum length. If there are multiple lists\n        with the same maximum length, returns the first one.\n    \"\"\"\n    if not lists:\n        return None\n    \n    return max(lists, key=len)"}
{"benchmark": "mbpp", "task_id": "287", "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.", "reference_code": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)", "test_imports": [], "test_list": ["assert square_Sum(2) == 20", "assert square_Sum(3) == 56", "assert square_Sum(4) == 120"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def square_Sum(n):\n    \"\"\"\n    Returns the sum of squares of first n even natural numbers.\n    \n    For example:\n    - n=1: 2^2 = 4\n    - n=2: 2^2 + 4^2 = 4 + 16 = 20\n    - n=3: 2^2 + 4^2 + 6^2 = 4 + 16 + 36 = 56\n    \"\"\"\n    total = 0\n    for i in range(1, n + 1):\n        even_num = 2 * i\n        total += even_num ** 2\n    return total"}
{"benchmark": "mbpp", "task_id": "286", "prompt": "Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.", "reference_code": "def max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far", "test_imports": [], "test_list": ["assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30", "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59", "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def max_sub_array_sum_repeated(arr, k):\n    \"\"\"\n    Find the largest sum of a contiguous subarray in an array repeated k times.\n    \n    Args:\n        arr: List of integers\n        k: Number of times to repeat the array\n        \n    Returns:\n        The maximum subarray sum in the repeated array\n    \"\"\"\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    total_sum = sum(arr)\n    \n    # If total sum is negative, we can only take elements from one copy\n    if total_sum <= 0:\n        # Use Kadane's algorithm on single array\n        max_sum = arr[0]\n        current_sum = arr[0]\n        for i in range(1, n):\n            current_sum = max(arr[i], current_sum + arr[i])\n            max_sum = max(max_sum, current_sum)\n        return max_sum\n    \n    # If total sum is positive, we might want to take multiple complete copies\n    # plus some prefix and suffix from partial copies\n    \n    # Use Kadane's algorithm on array repeated min(2, k) times\n    # This handles the case where we take parts from beginning and end\n    repeat_count = min(2, k)\n    extended_arr = arr * repeat_count\n    \n    max_sum = extended_arr[0]\n    current_sum = extended_arr[0]\n    \n    for i in range(1, len(extended_arr)):\n        current_sum = max(extended_arr[i], current_sum + extended_arr[i])\n        max_sum = max(max_sum, current_sum)\n    \n    # If k > 2 and total_sum > 0, we can add (k-2) complete arrays\n    if k > 2 and total_sum > 0:\n        max_sum += (k - 2) * total_sum\n    \n    return max_sum"}
{"benchmark": "mbpp", "task_id": "292", "prompt": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).", "reference_code": "def find(n,m):  \n    q = n//m \n    return (q)", "test_imports": [], "test_list": ["assert find(10,3) == 3", "assert find(4,2) == 2", "assert find(20,5) == 4"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def find(a, b):\n    \"\"\"\n    Find the quotient of two numbers rounded down to the nearest integer.\n    \n    Args:\n        a: The dividend (numerator)\n        b: The divisor (denominator)\n    \n    Returns:\n        The quotient rounded down to the nearest integer\n    \"\"\"\n    return a // b"}
{"benchmark": "mbpp", "task_id": "295", "prompt": "Write a function to return the sum of all divisors of a number.", "reference_code": "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)", "test_imports": [], "test_list": ["assert sum_div(8)==7", "assert sum_div(12)==16", "assert sum_div(7)==1"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def sum_div(n):\n    \"\"\"\n    Return the sum of all divisors of a number n.\n    \n    Args:\n        n: A positive integer\n        \n    Returns:\n        The sum of all divisors of n (including 1 and n itself)\n    \"\"\"\n    if n <= 0:\n        return 0\n    \n    divisor_sum = 0\n    \n    # Check divisors up to sqrt(n) for efficiency\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            divisor_sum += i\n            # Add the corresponding divisor if it's different\n            if i != n // i:\n                divisor_sum += n // i\n        i += 1\n    \n    return divisor_sum"}
{"benchmark": "mbpp", "task_id": "293", "prompt": "Write a function to find the third side of a right angled triangle.", "reference_code": "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s", "test_imports": [], "test_list": ["assert otherside_rightangle(7,8)==10.63014581273465", "assert otherside_rightangle(3,4)==5", "assert otherside_rightangle(7,15)==16.55294535724685"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def otherside_rightangle(a, b, is_hypotenuse_known=False):\n    \"\"\"\n    Find the third side of a right angled triangle.\n    \n    Args:\n        a: First known side\n        b: Second known side\n        is_hypotenuse_known: If True, a and b are hypotenuse and one leg.\n                            If False, a and b are the two legs.\n    \n    Returns:\n        The third side of the right angled triangle.\n    \"\"\"\n    if is_hypotenuse_known:\n        # a is hypotenuse, b is one leg, find the other leg\n        return (a**2 - b**2)**0.5\n    else:\n        # a and b are the two legs, find the hypotenuse\n        return (a**2 + b**2)**0.5"}
{"benchmark": "mbpp", "task_id": "291", "prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.", "reference_code": "def count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]", "test_imports": [], "test_list": ["assert count_no_of_ways(2, 4) == 16", "assert count_no_of_ways(3, 2) == 6", "assert count_no_of_ways(4, 4) == 228"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def count_no_of_ways(n: int, k: int) -> int:\n    \"\"\"\n    Find the number of ways to paint a fence with n posts and k colors\n    such that at most 2 adjacent posts have the same color.\n    \n    Args:\n        n: number of posts\n        k: number of colors\n    \n    Returns:\n        number of valid ways to paint the fence\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n    \n    # dp[i][0] = number of ways where post i has different color from post i-1\n    # dp[i][1] = number of ways where post i has same color as post i-1\n    \n    # For post 1: k ways (any color)\n    # For post 2: \n    #   - same as post 1: k ways\n    #   - different from post 1: k * (k-1) ways\n    \n    # Let's use a different approach:\n    # same[i] = ways where posts i-1 and i have same color\n    # diff[i] = ways where posts i-1 and i have different color\n    \n    same = k  # post 1 and 2 have same color\n    diff = k * (k - 1)  # post 1 and 2 have different color\n    \n    for i in range(3, n + 1):\n        # For post i:\n        # If we want same color as post i-1:\n        #   - post i-1 must be different from post i-2 (to avoid 3 same in a row)\n        #   - so new_same = diff\n        new_same = diff\n        \n        # If we want different color from post i-1:\n        #   - we can come from either same or diff state at i-1\n        #   - we have (k-1) choices for the color of post i\n        #   - so new_diff = (same + diff) * (k - 1)\n        new_diff = (same + diff) * (k - 1)\n        \n        same = new_same\n        diff = new_diff\n    \n    return same + diff"}
{"benchmark": "mbpp", "task_id": "296", "prompt": "Write a python function to count inversions in an array.", "reference_code": "def get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count ", "test_imports": [], "test_list": ["assert get_Inv_Count([1,20,6,4,5]) == 5", "assert get_Inv_Count([1,2,1]) == 1", "assert get_Inv_Count([1,2,5,6,1]) == 3"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def get_Inv_Count(arr):\n    \"\"\"\n    Count the number of inversions in an array.\n    An inversion is a pair of indices (i, j) where i < j but arr[i] > arr[j].\n    \n    Args:\n        arr: List of integers\n        \n    Returns:\n        Integer count of inversions\n    \"\"\"\n    def merge_count_inversions(arr):\n        \"\"\"\n        Helper function that merges two sorted subarrays and counts inversions.\n        Uses merge sort approach for O(n log n) time complexity.\n        \"\"\"\n        if len(arr) <= 1:\n            return arr, 0\n        \n        mid = len(arr) // 2\n        left, left_inv = merge_count_inversions(arr[:mid])\n        right, right_inv = merge_count_inversions(arr[mid:])\n        \n        merged = []\n        inv_count = left_inv + right_inv\n        i = j = 0\n        \n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                merged.append(left[i])\n                i += 1\n            else:\n                merged.append(right[j])\n                # All remaining elements in left are greater than right[j]\n                inv_count += len(left) - i\n                j += 1\n        \n        merged.extend(left[i:])\n        merged.extend(right[j:])\n        \n        return merged, inv_count\n    \n    if not arr:\n        return 0\n    \n    _, inversion_count = merge_count_inversions(arr)\n    return inversion_count"}
{"benchmark": "mbpp", "task_id": "297", "prompt": "Write a function to flatten a given nested list structure.", "reference_code": "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list ", "test_imports": [], "test_list": ["assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]", "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]", "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def flatten_list(nested_list):\n    \"\"\"\n    Flatten a nested list structure into a single-level list.\n    \n    Args:\n        nested_list: A list that may contain nested lists\n        \n    Returns:\n        A flattened list containing all elements from the nested structure\n    \"\"\"\n    result = []\n    \n    for item in nested_list:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    \n    return result"}
{"benchmark": "mbpp", "task_id": "294", "prompt": "Write a function to find the maximum value in a given heterogeneous list.", "reference_code": "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)", "test_imports": [], "test_list": ["assert max_val(['Python', 3, 2, 4, 5, 'version'])==5", "assert max_val(['Python', 15, 20, 25])==25", "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def max_val(lst):\n    \"\"\"\n    Find the maximum value in a heterogeneous list.\n    \n    Args:\n        lst: A list that may contain different types of values\n        \n    Returns:\n        The maximum value in the list\n        \n    Raises:\n        ValueError: If the list is empty\n        TypeError: If the list contains incomparable types\n    \"\"\"\n    if not lst:\n        raise ValueError(\"max_val() arg is an empty sequence\")\n    \n    return max(lst)"}
{"benchmark": "mbpp", "task_id": "299", "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.", "reference_code": "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])", "test_imports": [], "test_list": ["assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)", "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)", "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def max_aggregate(tuples_list):\n    \"\"\"\n    Calculate the maximum aggregate from a list of tuples.\n    \n    Args:\n        tuples_list: A list of tuples containing numeric values\n        \n    Returns:\n        The maximum sum of all elements across all tuples\n    \"\"\"\n    if not tuples_list:\n        return 0\n    \n    return max(sum(t) for t in tuples_list)"}
{"benchmark": "mbpp", "task_id": "305", "prompt": "Write a function to return two words from a list of words starting with letter 'p'.", "reference_code": "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()", "test_imports": [], "test_list": ["assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')", "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')", "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def start_withp(words):\n    \"\"\"\n    Return two words from a list of words that start with the letter 'p'.\n    \n    Args:\n        words: A list of words\n        \n    Returns:\n        A list of up to two words that start with 'p' (case-insensitive)\n    \"\"\"\n    p_words = [word for word in words if word.lower().startswith('p')]\n    return p_words[:2]"}
{"benchmark": "mbpp", "task_id": "304", "prompt": "Write a python function to find element at a given index after number of rotations.", "reference_code": "def find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] ", "test_imports": [], "test_list": ["assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3", "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3", "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def find_Element(arr, rotations, index):\n    \"\"\"\n    Find element at a given index after number of rotations.\n    \n    Args:\n        arr: List of elements\n        rotations: Number of right rotations to perform\n        index: Index to find element at\n    \n    Returns:\n        Element at the given index after rotations\n    \"\"\"\n    if not arr:\n        return None\n    \n    # Normalize rotations to be within array length\n    rotations = rotations % len(arr)\n    \n    # After right rotation by 'rotations' positions,\n    # element at index 'i' comes from index (i - rotations) % len(arr)\n    original_index = (index - rotations) % len(arr)\n    \n    return arr[original_index]"}
{"benchmark": "mbpp", "task_id": "301", "prompt": "Write a function to find the depth of a dictionary.", "reference_code": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0", "test_imports": [], "test_list": ["assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4", "assert dict_depth({'a':1, 'b': {'c':'python'}})==2", "assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def dict_depth(d):\n    \"\"\"\n    Find the maximum depth of a dictionary.\n    \n    The depth is defined as:\n    - 0 for an empty dictionary\n    - 1 for a dictionary with no nested dictionaries\n    - n for a dictionary where the deepest nested dictionary is at level n\n    \n    Args:\n        d: A dictionary to measure the depth of\n        \n    Returns:\n        The maximum depth of the dictionary\n    \"\"\"\n    if not isinstance(d, dict) or not d:\n        return 0\n    \n    max_depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            max_depth = max(max_depth, 1 + dict_depth(value))\n    \n    return max_depth + 1"}
{"benchmark": "mbpp", "task_id": "300", "prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.", "reference_code": "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res ", "test_imports": ["import math"], "test_list": ["assert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)", "assert math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001)", "assert math.isclose(count_binary_seq(3), 20.0, rel_tol=0.001)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def count_binary_seq(n: int) -> int:\n    \"\"\"\n    Find the count of all binary sequences of length 2n such that \n    the sum of first n bits equals the sum of last n bits.\n    \n    A binary sequence of length 2n has 2n positions, each containing 0 or 1.\n    We need to count sequences where sum(first n bits) == sum(last n bits).\n    \n    For a given sum k (0 to n), the number of ways to choose k positions \n    out of n to be 1 is C(n, k).\n    Since both halves must have the same sum k, the total count is:\n    sum of C(n, k)^2 for k from 0 to n.\n    \n    This is equivalent to C(2n, n) by Vandermonde's identity.\n    \"\"\"\n    from math import comb\n    \n    # For each possible sum k from 0 to n:\n    # - Ways to get sum k in first n bits: C(n, k)\n    # - Ways to get sum k in last n bits: C(n, k)\n    # - Total for this k: C(n, k) * C(n, k) = C(n, k)^2\n    # Sum over all k: sum(C(n, k)^2 for k in 0..n) = C(2n, n)\n    \n    return comb(2 * n, n)"}
{"benchmark": "mbpp", "task_id": "307", "prompt": "Write a function to get a colon of a tuple.", "reference_code": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon", "test_imports": [], "test_list": ["assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)", "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))", "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def colon_tuplex(tup, start, end):\n    \"\"\"\n    Get a slice of a tuple using start and end indices.\n    \n    Args:\n        tup: A tuple to slice\n        start: Starting index (inclusive)\n        end: Ending index (exclusive)\n    \n    Returns:\n        A tuple containing elements from start to end\n    \"\"\"\n    return tup[start:end]"}
{"benchmark": "mbpp", "task_id": "309", "prompt": "Write a python function to find the maximum of two numbers.", "reference_code": "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b ", "test_imports": [], "test_list": ["assert maximum(5,10) == 10", "assert maximum(-1,-2) == -1", "assert maximum(9,7) == 9"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def maximum(a, b):\n    \"\"\"\n    Find the maximum of two numbers.\n    \n    Args:\n        a: First number\n        b: Second number\n    \n    Returns:\n        The maximum of a and b\n    \"\"\"\n    return a if a > b else b"}
{"benchmark": "mbpp", "task_id": "310", "prompt": "Write a function to convert a given string to a tuple of characters.", "reference_code": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result", "test_imports": [], "test_list": ["assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')", "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')", "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def string_to_tuple(s):\n    \"\"\"Convert a given string to a tuple of characters.\"\"\"\n    return tuple(s)"}
{"benchmark": "mbpp", "task_id": "308", "prompt": "Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.", "reference_code": "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result", "test_imports": [], "test_list": ["assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]", "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]", "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def large_product(a, b, n):\n    \"\"\"\n    Find the n largest products from two lists by selecting one element from each list.\n    \n    Args:\n        a: First list of numbers\n        b: Second list of numbers\n        n: Number of largest products to find\n    \n    Returns:\n        A list of the n largest products in descending order\n    \"\"\"\n    if not a or not b or n <= 0:\n        return []\n    \n    # Create all possible products\n    products = []\n    for num_a in a:\n        for num_b in b:\n            products.append(num_a * num_b)\n    \n    # Sort in descending order and take the first n unique products\n    products.sort(reverse=True)\n    \n    # Remove duplicates while preserving order\n    seen = set()\n    result = []\n    for product in products:\n        if product not in seen:\n            seen.add(product)\n            result.append(product)\n            if len(result) == n:\n                break\n    \n    return result"}
{"benchmark": "mbpp", "task_id": "312", "prompt": "Write a function to find the volume of a cone.", "reference_code": "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume", "test_imports": ["import math"], "test_list": ["assert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)", "assert math.isclose(volume_cone(10,15), 1570.7963267948965, rel_tol=0.001)", "assert math.isclose(volume_cone(19,17), 6426.651371693521, rel_tol=0.001)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def volume_cone(radius, height):\n    \"\"\"\n    Calculate the volume of a cone.\n    \n    Args:\n        radius: The radius of the cone's base\n        height: The height of the cone\n    \n    Returns:\n        The volume of the cone\n    \"\"\"\n    import math\n    return (1/3) * math.pi * radius**2 * height"}
{"benchmark": "mbpp", "task_id": "306", "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .", "reference_code": "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]", "test_imports": [], "test_list": ["assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11", "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7", "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def max_sum_increasing_subseq(arr, k):\n    \"\"\"\n    Find the maximum sum of an increasing subsequence from the start until index i,\n    and also including the element at index k (where k > i).\n    \n    Args:\n        arr: List of integers\n        k: Index of the element that must be included in the subsequence\n    \n    Returns:\n        Maximum sum of increasing subsequence ending at or before index k,\n        with the element at index k included\n    \"\"\"\n    if not arr or k < 0 or k >= len(arr):\n        return 0\n    \n    n = len(arr)\n    \n    # dp[i] = maximum sum of increasing subsequence ending at index i\n    dp = [0] * n\n    dp[0] = arr[0]\n    \n    # Build dp array for all indices up to k\n    for i in range(1, k + 1):\n        # Start with just the current element\n        dp[i] = arr[i]\n        \n        # Try to extend from all previous elements that are smaller\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] + arr[i])\n    \n    # The answer is the maximum sum of increasing subsequence that includes arr[k]\n    # We need to find the maximum sum we can get by including arr[k]\n    result = arr[k]\n    for i in range(k):\n        if arr[i] < arr[k]:\n            result = max(result, dp[i] + arr[k])\n    \n    return result"}
{"benchmark": "mbpp", "task_id": "311", "prompt": "Write a python function to set the left most unset bit.", "reference_code": "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) ", "test_imports": [], "test_list": ["assert set_left_most_unset_bit(10) == 14", "assert set_left_most_unset_bit(12) == 14", "assert set_left_most_unset_bit(15) == 15"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def set_left_most_unset_bit(n: int) -> int:\n    \"\"\"\n    Set the left most unset bit in the binary representation of n.\n    \n    Args:\n        n: A non-negative integer\n        \n    Returns:\n        The integer with the left most unset bit set to 1\n    \"\"\"\n    if n == 0:\n        return 1\n    \n    # Find the position of the most significant bit\n    # by finding the highest power of 2 less than or equal to n\n    msb_pos = n.bit_length() - 1\n    \n    # Check each bit from the most significant bit downwards\n    for i in range(msb_pos, -1, -1):\n        # If bit at position i is unset (0), set it and return\n        if not (n & (1 << i)):\n            return n | (1 << i)\n    \n    # If all bits up to msb are set, set the bit at position msb_pos + 1\n    return n | (1 << (msb_pos + 1))"}
{"benchmark": "mbpp", "task_id": "388", "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.", "reference_code": "def highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res ", "test_imports": [], "test_list": ["assert highest_Power_of_2(10) == 8", "assert highest_Power_of_2(19) == 16", "assert highest_Power_of_2(32) == 32"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def highest_Power_of_2(n):\n    \"\"\"\n    Find the highest power of 2 that is less than or equal to n.\n    \n    Args:\n        n: A positive integer\n        \n    Returns:\n        The highest power of 2 that is <= n\n    \"\"\"\n    if n <= 0:\n        return 0\n    \n    # Find the position of the most significant bit\n    power = 0\n    while (1 << (power + 1)) <= n:\n        power += 1\n    \n    return 1 << power"}
{"benchmark": "mbpp", "task_id": "390", "prompt": "Write a function to apply a given format string to all of the elements in a list.", "reference_code": "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string", "test_imports": [], "test_list": ["assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']", "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']", "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def add_string(lst, fmt):\n    \"\"\"\n    Apply a given format string to all elements in a list.\n    \n    Args:\n        lst: A list of elements to format\n        fmt: A format string (e.g., \"Hello {}\")\n    \n    Returns:\n        A new list with the format string applied to each element\n    \"\"\"\n    return [fmt.format(item) for item in lst]"}
{"benchmark": "mbpp", "task_id": "389", "prompt": "Write a function to find the n'th lucas number.", "reference_code": "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ", "test_imports": [], "test_list": ["assert find_lucas(9) == 76", "assert find_lucas(4) == 7", "assert find_lucas(3) == 4"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def find_lucas(n: int) -> int:\n    \"\"\"\n    Find the n'th Lucas number.\n    \n    The Lucas sequence is defined as:\n    L(0) = 2\n    L(1) = 1\n    L(n) = L(n-1) + L(n-2) for n > 1\n    \n    Args:\n        n: The index of the Lucas number to find (0-indexed)\n    \n    Returns:\n        The n'th Lucas number\n    \"\"\"\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    \n    prev2 = 2  # L(0)\n    prev1 = 1  # L(1)\n    \n    for _ in range(2, n + 1):\n        current = prev1 + prev2\n        prev2 = prev1\n        prev1 = current\n    \n    return prev1"}
{"benchmark": "mbpp", "task_id": "392", "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).", "reference_code": "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]", "test_imports": [], "test_list": ["assert get_max_sum(60) == 106", "assert get_max_sum(10) == 12", "assert get_max_sum(2) == 2"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def get_max_sum(n):\n    \"\"\"\n    Find the maximum sum possible using the equation:\n    f(n) = max((f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    \n    Uses memoization to avoid recalculating values.\n    \"\"\"\n    memo = {}\n    \n    def f(num):\n        if num in memo:\n            return memo[num]\n        \n        if num == 0:\n            return 0\n        \n        # Calculate the sum of recursive calls with integer division\n        recursive_sum = f(num // 2) + f(num // 3) + f(num // 4) + f(num // 5)\n        \n        # Return the maximum of the recursive sum and n itself\n        result = max(recursive_sum, num)\n        \n        memo[num] = result\n        return result\n    \n    return f(n)"}
{"benchmark": "mbpp", "task_id": "393", "prompt": "Write a function to find the list with maximum length.", "reference_code": "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)", "test_imports": [], "test_list": ["assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])", "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])", "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def max_length_list(lists):\n    \"\"\"\n    Find the list with maximum length from a collection of lists.\n    \n    Args:\n        lists: An iterable of lists\n        \n    Returns:\n        The list with the maximum length. If there are multiple lists\n        with the same maximum length, returns the first one encountered.\n    \"\"\"\n    return max(lists, key=len)"}
{"benchmark": "mbpp", "task_id": "395", "prompt": "Write a python function to find the first non-repeated character in a given string.", "reference_code": "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None", "test_imports": [], "test_list": ["assert first_non_repeating_character(\"abcabc\") == None", "assert first_non_repeating_character(\"abc\") == \"a\"", "assert first_non_repeating_character(\"ababc\") == \"c\""], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def first_non_repeating_character(s: str) -> str:\n    \"\"\"\n    Find the first non-repeated character in a given string.\n    \n    Args:\n        s: Input string\n        \n    Returns:\n        The first non-repeated character, or empty string if none exists\n    \"\"\"\n    # Count occurrences of each character\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    # Find the first character with count 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    \n    # Return empty string if no non-repeated character found\n    return \"\""}
{"benchmark": "mbpp", "task_id": "394", "prompt": "Write a function to check if given tuple contains no duplicates.", "reference_code": "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res ", "test_imports": [], "test_list": ["assert check_distinct((1, 4, 5, 6, 1, 4)) == False", "assert check_distinct((1, 4, 5, 6)) == True", "assert check_distinct((2, 3, 4, 5, 6)) == True"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def check_distinct(t):\n    \"\"\"\n    Check if a tuple contains no duplicates.\n    \n    Args:\n        t: A tuple to check for duplicates\n        \n    Returns:\n        True if the tuple contains no duplicates, False otherwise\n    \"\"\"\n    return len(t) == len(set(t))"}
{"benchmark": "mbpp", "task_id": "396", "prompt": "Write a function to check whether the given string starts and ends with the same character or not.", "reference_code": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" ", "test_imports": [], "test_list": ["assert check_char(\"abba\") == \"Valid\"", "assert check_char(\"a\") == \"Valid\"", "assert check_char(\"abcd\") == \"Invalid\""], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def check_char(s):\n    \"\"\"\n    Check whether the given string starts and ends with the same character.\n    \n    Args:\n        s: A string to check\n        \n    Returns:\n        True if the string starts and ends with the same character, False otherwise.\n        Returns False for empty strings.\n    \"\"\"\n    if len(s) == 0:\n        return False\n    return s[0] == s[-1]"}
{"benchmark": "mbpp", "task_id": "391", "prompt": "Write a function to convert more than one list to nested dictionary.", "reference_code": "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result", "test_imports": [], "test_list": ["assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]", "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]", "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def convert_list_dictionary(*lists):\n    \"\"\"\n    Convert one or more lists to a nested dictionary.\n    \n    Each list is converted to a dictionary where consecutive elements\n    form key-value pairs. Multiple lists are nested within each other.\n    \n    Args:\n        *lists: Variable number of lists to convert\n        \n    Returns:\n        A nested dictionary structure\n    \"\"\"\n    if not lists:\n        return {}\n    \n    # Start with the last list and work backwards\n    result = {}\n    \n    # Process lists in reverse order to create nesting\n    for list_item in reversed(lists):\n        if not list_item:\n            continue\n            \n        # Convert current list to dictionary (pairs of elements)\n        current_dict = {}\n        for i in range(0, len(list_item) - 1, 2):\n            key = list_item[i]\n            value = list_item[i + 1]\n            current_dict[key] = value\n        \n        # If we have a previous result, nest it\n        if result:\n            # Merge the current dict with nested result\n            for key, value in current_dict.items():\n                if key in result:\n                    # If key exists, nest the previous result as value\n                    current_dict[key] = result\n                    break\n            else:\n                # If no key matched, nest result in the last key\n                if current_dict:\n                    last_key = list(current_dict.keys())[-1]\n                    current_dict[last_key] = result\n        \n        result = current_dict\n    \n    return result"}
{"benchmark": "mbpp", "task_id": "397", "prompt": "Write a function to find the median of three numbers.", "reference_code": "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median", "test_imports": [], "test_list": ["assert median_numbers(25,55,65)==55.0", "assert median_numbers(20,10,30)==20.0", "assert median_numbers(15,45,75)==45.0"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def median_numbers(a, b, c):\n    \"\"\"\n    Find the median of three numbers.\n    \n    Args:\n        a: First number\n        b: Second number\n        c: Third number\n    \n    Returns:\n        The median of the three numbers\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]"}
{"benchmark": "mbpp", "task_id": "398", "prompt": "Write a function to compute the sum of digits of each number of a given list.", "reference_code": "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())", "test_imports": [], "test_list": ["assert sum_of_digits([10,2,56])==14", "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19", "assert sum_of_digits([10,20,-4,5,-70])==19"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def sum_of_digits(numbers):\n    \"\"\"\n    Compute the sum of digits of each number in a given list.\n    \n    Args:\n        numbers: A list of integers\n        \n    Returns:\n        A list where each element is the sum of digits of the corresponding number\n    \"\"\"\n    result = []\n    for num in numbers:\n        # Handle negative numbers by taking absolute value\n        digit_sum = sum(int(digit) for digit in str(abs(num)))\n        result.append(digit_sum)\n    return result"}
{"benchmark": "mbpp", "task_id": "399", "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.", "reference_code": "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "test_imports": [], "test_list": ["assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)", "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)", "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def bitwise_xor(*tuples):\n    \"\"\"\n    Perform bitwise XOR operation across the given tuples.\n    \n    Args:\n        *tuples: Variable number of tuples containing integers\n        \n    Returns:\n        A tuple containing the bitwise XOR of corresponding elements\n    \"\"\"\n    if not tuples:\n        return ()\n    \n    # Get the length of the first tuple\n    length = len(tuples[0])\n    \n    # Perform XOR operation on corresponding elements\n    result = []\n    for i in range(length):\n        xor_value = tuples[0][i]\n        for j in range(1, len(tuples)):\n            xor_value ^= tuples[j][i]\n        result.append(xor_value)\n    \n    return tuple(result)"}
{"benchmark": "mbpp", "task_id": "400", "prompt": "Write a function to extract the number of unique tuples in the given list.", "reference_code": "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)", "test_imports": [], "test_list": ["assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3", "assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4", "assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def extract_freq(lst):\n    \"\"\"\n    Extract the number of unique tuples in the given list.\n    \n    Args:\n        lst: A list that may contain tuples and other elements\n        \n    Returns:\n        The count of unique tuples in the list\n    \"\"\"\n    unique_tuples = set()\n    \n    for item in lst:\n        if isinstance(item, tuple):\n            unique_tuples.add(item)\n    \n    return len(unique_tuples)"}
{"benchmark": "mbpp", "task_id": "401", "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.", "reference_code": "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ", "test_imports": [], "test_list": ["assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))", "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))", "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def add_nested_tuples(tuple1, tuple2):\n    \"\"\"\n    Perform index wise addition of tuple elements in two nested tuples.\n    \n    Args:\n        tuple1: First nested tuple\n        tuple2: Second nested tuple\n    \n    Returns:\n        A new nested tuple with element-wise addition\n    \"\"\"\n    result = []\n    \n    for t1, t2 in zip(tuple1, tuple2):\n        if isinstance(t1, tuple) and isinstance(t2, tuple):\n            # Recursively handle nested tuples\n            result.append(add_nested_tuples(t1, t2))\n        else:\n            # Add corresponding elements\n            result.append(t1 + t2)\n    \n    return tuple(result)"}
{"benchmark": "mbpp", "task_id": "406", "prompt": "Write a python function to find whether the parity of a given number is odd.", "reference_code": "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False", "test_imports": [], "test_list": ["assert find_Parity(12) == False", "assert find_Parity(7) == True", "assert find_Parity(10) == False"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def find_Parity(n):\n    \"\"\"\n    Determine whether the parity of a given number is odd.\n    \n    Args:\n        n: An integer\n        \n    Returns:\n        True if the number is odd, False if the number is even\n    \"\"\"\n    return n % 2 != 0"}
{"benchmark": "mbpp", "task_id": "407", "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.", "reference_code": "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False", "test_imports": [], "test_list": ["assert rearrange_bigger(12)==21", "assert rearrange_bigger(10)==False", "assert rearrange_bigger(102)==120"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def rearrange_bigger(num):\n    \"\"\"\n    Create the next bigger number by rearranging the digits of a given number.\n    \n    Args:\n        num: A positive integer\n        \n    Returns:\n        The next bigger number that can be formed by rearranging digits,\n        or -1 if no such number exists.\n    \"\"\"\n    # Convert number to list of digits\n    digits = list(str(num))\n    n = len(digits)\n    \n    # Step 1: Find the rightmost digit that is smaller than the digit to its right\n    # This is the pivot point\n    pivot_idx = -1\n    for i in range(n - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            pivot_idx = i\n            break\n    \n    # If no such digit exists, the number is the largest permutation\n    if pivot_idx == -1:\n        return -1\n    \n    # Step 2: Find the rightmost digit to the right of pivot that is larger than pivot\n    swap_idx = -1\n    for i in range(n - 1, pivot_idx, -1):\n        if digits[i] > digits[pivot_idx]:\n            swap_idx = i\n            break\n    \n    # Step 3: Swap the pivot with the found digit\n    digits[pivot_idx], digits[swap_idx] = digits[swap_idx], digits[pivot_idx]\n    \n    # Step 4: Reverse the digits to the right of pivot to get the smallest arrangement\n    digits[pivot_idx + 1:] = reversed(digits[pivot_idx + 1:])\n    \n    # Convert back to number\n    result = int(''.join(digits))\n    return result"}
{"benchmark": "mbpp", "task_id": "409", "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.", "reference_code": "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min", "test_imports": [], "test_list": ["assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8", "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30", "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def min_product_tuple(tuples_list):\n    \"\"\"\n    Find the minimum product from the pairs of tuples within a given list.\n    \n    Args:\n        tuples_list: A list of tuples, where each tuple contains two numbers\n        \n    Returns:\n        The minimum product of all pairs in the tuples\n    \"\"\"\n    if not tuples_list:\n        return None\n    \n    min_product = float('inf')\n    \n    for tup in tuples_list:\n        if len(tup) >= 2:\n            product = tup[0] * tup[1]\n            min_product = min(min_product, product)\n    \n    return min_product if min_product != float('inf') else None"}
{"benchmark": "mbpp", "task_id": "410", "prompt": "Write a function to find the minimum value in a given heterogeneous list.", "reference_code": "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val", "test_imports": [], "test_list": ["assert min_val(['Python', 3, 2, 4, 5, 'version'])==2", "assert min_val(['Python', 15, 20, 25])==15", "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def min_val(lst):\n    \"\"\"\n    Find the minimum value in a heterogeneous list.\n    \n    Args:\n        lst: A list that may contain different types of values\n        \n    Returns:\n        The minimum value in the list\n        \n    Raises:\n        ValueError: If the list is empty\n        TypeError: If the list contains incomparable types\n    \"\"\"\n    if not lst:\n        raise ValueError(\"min_val() arg is an empty sequence\")\n    \n    return min(lst)"}
{"benchmark": "mbpp", "task_id": "408", "prompt": "Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.", "reference_code": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs", "test_imports": [], "test_list": ["assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]", "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]", "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "import heapq\nfrom typing import List, Tuple\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n    Find k smallest pairs consisting of one element from nums1 and one from nums2.\n    \n    Args:\n        nums1: First sorted array\n        nums2: Second sorted array\n        k: Number of smallest pairs to find\n    \n    Returns:\n        List of k smallest pairs\n    \"\"\"\n    if not nums1 or not nums2 or k == 0:\n        return []\n    \n    # Min heap to store (sum, index1, index2)\n    # We use a min heap based on the sum of pairs\n    min_heap = []\n    result = []\n    visited = set()\n    \n    # Start with the smallest pair (nums1[0], nums2[0])\n    heapq.heappush(min_heap, (nums1[0] + nums2[0], 0, 0))\n    visited.add((0, 0))\n    \n    while min_heap and len(result) < k:\n        # Pop the pair with minimum sum\n        current_sum, i, j = heapq.heappop(min_heap)\n        result.append([nums1[i], nums2[j]])\n        \n        # Add next potential pairs\n        # Try incrementing index in nums1\n        if i + 1 < len(nums1) and (i + 1, j) not in visited:\n            heapq.heappush(min_heap, (nums1[i + 1] + nums2[j], i + 1, j))\n            visited.add((i + 1, j))\n        \n        # Try incrementing index in nums2\n        if j + 1 < len(nums2) and (i, j + 1) not in visited:\n            heapq.heappush(min_heap, (nums1[i] + nums2[j + 1], i, j + 1))\n            visited.add((i, j + 1))\n    \n    return result"}
{"benchmark": "mbpp", "task_id": "404", "prompt": "Write a python function to find the minimum of two numbers.", "reference_code": "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b ", "test_imports": [], "test_list": ["assert minimum(1,2) == 1", "assert minimum(-5,-4) == -5", "assert minimum(0,0) == 0"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def minimum(a, b):\n    \"\"\"Find the minimum of two numbers.\"\"\"\n    return a if a < b else b"}
{"benchmark": "mbpp", "task_id": "412", "prompt": "Write a python function to remove odd numbers from a given list.", "reference_code": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l", "test_imports": [], "test_list": ["assert remove_odd([1,2,3]) == [2]", "assert remove_odd([2,4,6]) == [2,4,6]", "assert remove_odd([10,20,3]) == [10,20]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def remove_odd(numbers):\n    \"\"\"\n    Remove odd numbers from a given list.\n    \n    Args:\n        numbers: A list of integers\n        \n    Returns:\n        A new list with odd numbers removed (only even numbers remain)\n    \"\"\"\n    return [num for num in numbers if num % 2 == 0]"}
{"benchmark": "mbpp", "task_id": "405", "prompt": "Write a function to check whether an element exists within a tuple.", "reference_code": "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False", "test_imports": [], "test_list": ["assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True", "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False", "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def check_tuplex(tup, element):\n    \"\"\"\n    Check whether an element exists within a tuple.\n    \n    Args:\n        tup: A tuple to search in\n        element: The element to search for\n    \n    Returns:\n        True if element exists in tuple, False otherwise\n    \"\"\"\n    return element in tup"}
{"benchmark": "mbpp", "task_id": "411", "prompt": "Write a function to convert the given snake case string to camel case string.", "reference_code": "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))", "test_imports": [], "test_list": ["assert snake_to_camel('android_tv') == 'AndroidTv'", "assert snake_to_camel('google_pixel') == 'GooglePixel'", "assert snake_to_camel('apple_watch') == 'AppleWatch'"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def snake_to_camel(snake_str: str) -> str:\n    \"\"\"\n    Convert a snake_case string to camelCase.\n    \n    Args:\n        snake_str: A string in snake_case format\n        \n    Returns:\n        The string converted to camelCase format\n    \"\"\"\n    components = snake_str.split('_')\n    # Keep the first component as is, capitalize the rest\n    return components[0] + ''.join(x.capitalize() for x in components[1:])"}
{"benchmark": "mbpp", "task_id": "414", "prompt": "Write a python function to check whether any value in a sequence exists in a sequence or not.", "reference_code": "def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False", "test_imports": [], "test_list": ["assert overlapping([1,2,3,4,5],[6,7,8,9]) == False", "assert overlapping([1,2,3],[4,5,6]) == False", "assert overlapping([1,4,5],[1,4,5]) == True"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def overlapping(seq1, seq2):\n    \"\"\"\n    Check whether any value in seq1 exists in seq2.\n    \n    Args:\n        seq1: First sequence to check\n        seq2: Second sequence to check against\n    \n    Returns:\n        True if any element from seq1 exists in seq2, False otherwise\n    \"\"\"\n    seq2_set = set(seq2)\n    for item in seq1:\n        if item in seq2_set:\n            return True\n    return False"}
{"benchmark": "mbpp", "task_id": "413", "prompt": "Write a function to extract the nth element from a given list of tuples.", "reference_code": "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result", "test_imports": [], "test_list": ["assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']", "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]", "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def extract_nth_element(list_of_tuples, n):\n    \"\"\"\n    Extract the nth element from each tuple in a list of tuples.\n    \n    Args:\n        list_of_tuples: A list containing tuples\n        n: The index of the element to extract (0-based)\n    \n    Returns:\n        A list containing the nth element from each tuple\n    \"\"\"\n    return [tup[n] for tup in list_of_tuples]"}
{"benchmark": "mbpp", "task_id": "415", "prompt": "Write a python function to find a pair with highest product from a given array of integers.", "reference_code": "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    ", "test_imports": [], "test_list": ["assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)", "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)", "assert max_Product([1,2,3]) == (2,3)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def max_Product(arr):\n    \"\"\"\n    Find a pair with the highest product from a given array of integers.\n    \n    Args:\n        arr: A list of integers\n        \n    Returns:\n        A tuple containing the pair of integers with the highest product\n    \"\"\"\n    if len(arr) < 2:\n        return None\n    \n    # Sort the array\n    sorted_arr = sorted(arr)\n    \n    # The maximum product can be either:\n    # 1. Product of two largest positive numbers\n    # 2. Product of two smallest (most negative) numbers\n    \n    product_largest_two = sorted_arr[-1] * sorted_arr[-2]\n    product_smallest_two = sorted_arr[0] * sorted_arr[1]\n    \n    if product_largest_two >= product_smallest_two:\n        return (sorted_arr[-2], sorted_arr[-1])\n    else:\n        return (sorted_arr[0], sorted_arr[1])"}
{"benchmark": "mbpp", "task_id": "418", "prompt": "Write a python function to find the element of a list having maximum length.", "reference_code": "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList", "test_imports": [], "test_list": ["assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']", "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]", "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def Find_Max(lst):\n    \"\"\"\n    Find the element of a list having maximum length.\n    \n    Args:\n        lst: A list of elements (typically strings or other sequences)\n    \n    Returns:\n        The element with the maximum length\n    \"\"\"\n    if not lst:\n        return None\n    \n    return max(lst, key=len)"}
{"benchmark": "mbpp", "task_id": "417", "prompt": "Write a function to find common first element in given list of tuple.", "reference_code": "def group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] ", "test_imports": [], "test_list": ["assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]", "assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]", "assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def group_tuples(tuples_list):\n    \"\"\"\n    Find common first element in given list of tuples and group them together.\n    \n    Args:\n        tuples_list: A list of tuples\n        \n    Returns:\n        A dictionary where keys are the first elements and values are lists of tuples\n        that share the same first element, or a list of grouped tuples.\n    \"\"\"\n    if not tuples_list:\n        return {}\n    \n    groups = {}\n    \n    for tup in tuples_list:\n        if tup:  # Check if tuple is not empty\n            first_element = tup[0]\n            if first_element not in groups:\n                groups[first_element] = []\n            groups[first_element].append(tup)\n    \n    return groups"}
{"benchmark": "mbpp", "task_id": "419", "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.", "reference_code": "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum", "test_imports": [], "test_list": ["assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243", "assert round_and_sum([5,2,9,24.3,29])==345", "assert round_and_sum([25.0,56.7,89.2])==513"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def round_and_sum(numbers):\n    \"\"\"\n    Round every number in a list and return the total sum multiplied by the length of the list.\n    \n    Args:\n        numbers: A list of numbers to round and sum\n        \n    Returns:\n        The sum of rounded numbers multiplied by the length of the list\n    \"\"\"\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(numbers)\n    return result"}
{"benchmark": "mbpp", "task_id": "421", "prompt": "Write a function to concatenate each element of tuple by the delimiter.", "reference_code": "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) ", "test_imports": [], "test_list": ["assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'", "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'", "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def concatenate_tuple(t, delimiter=''):\n    \"\"\"\n    Concatenate each element of a tuple by the delimiter.\n    \n    Args:\n        t: A tuple of elements to concatenate\n        delimiter: The string to use as separator between elements (default: '')\n    \n    Returns:\n        A string with tuple elements joined by the delimiter\n    \"\"\"\n    return delimiter.join(str(element) for element in t)"}
{"benchmark": "mbpp", "task_id": "422", "prompt": "Write a python function to find the average of cubes of first n natural numbers.", "reference_code": "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) ", "test_imports": [], "test_list": ["assert find_Average_Of_Cube(2) == 4.5", "assert find_Average_Of_Cube(3) == 12", "assert find_Average_Of_Cube(1) == 1"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Find the average of cubes of first n natural numbers.\n    \n    Args:\n        n: A positive integer representing the count of natural numbers\n        \n    Returns:\n        The average of cubes of first n natural numbers\n    \"\"\"\n    if n <= 0:\n        return 0\n    \n    sum_of_cubes = sum(i**3 for i in range(1, n + 1))\n    average = sum_of_cubes / n\n    \n    return average"}
{"benchmark": "mbpp", "task_id": "420", "prompt": "Write a python function to find the cube sum of first n even natural numbers.", "reference_code": "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum", "test_imports": [], "test_list": ["assert cube_Sum(2) == 72", "assert cube_Sum(3) == 288", "assert cube_Sum(4) == 800"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def cube_Sum(n):\n    \"\"\"\n    Find the cube sum of first n even natural numbers.\n    \n    The first n even natural numbers are: 2, 4, 6, 8, ..., 2n\n    We need to calculate: 2^3 + 4^3 + 6^3 + ... + (2n)^3\n    \n    This can be simplified using the formula:\n    2^3 + 4^3 + 6^3 + ... + (2n)^3 = 8(1^3 + 2^3 + 3^3 + ... + n^3)\n                                    = 8 * [n(n+1)/2]^2\n    \"\"\"\n    if n <= 0:\n        return 0\n    \n    # Formula: sum of cubes of first n even numbers = 8 * [n(n+1)/2]^2\n    sum_of_first_n = n * (n + 1) // 2\n    result = 8 * sum_of_first_n * sum_of_first_n\n    \n    return result"}
{"benchmark": "mbpp", "task_id": "425", "prompt": "Write a function to count the number of sublists containing a particular element.", "reference_code": "def count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr", "test_imports": [], "test_list": ["assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3", "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3", "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def count_element_in_list(lst, element):\n    \"\"\"\n    Count the number of sublists containing a particular element.\n    \n    Args:\n        lst: A list of sublists\n        element: The element to search for\n    \n    Returns:\n        The number of sublists that contain the element\n    \"\"\"\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"}
{"benchmark": "mbpp", "task_id": "424", "prompt": "Write a function to extract only the rear index element of each string in the given tuple.", "reference_code": "def extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) ", "test_imports": [], "test_list": ["assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']", "assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']", "assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def extract_rear(strings_tuple):\n    \"\"\"\n    Extract the last character of each string in the given tuple.\n    \n    Args:\n        strings_tuple: A tuple of strings\n        \n    Returns:\n        A tuple containing the last character of each string\n    \"\"\"\n    return tuple(s[-1] for s in strings_tuple if s)"}
{"benchmark": "mbpp", "task_id": "426", "prompt": "Write a function to filter odd numbers.", "reference_code": "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums", "test_imports": [], "test_list": ["assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]", "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]", "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def filter_oddnumbers(numbers):\n    \"\"\"\n    Filter and return only the odd numbers from the input list.\n    \n    Args:\n        numbers: A list of integers\n        \n    Returns:\n        A list containing only the odd numbers from the input\n    \"\"\"\n    return [num for num in numbers if num % 2 != 0]"}
{"benchmark": "mbpp", "task_id": "427", "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.", "reference_code": "import re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)", "test_imports": [], "test_list": ["assert change_date_format(\"2026-01-02\") == '02-01-2026'", "assert change_date_format(\"2020-11-13\") == '13-11-2020'", "assert change_date_format(\"2021-04-26\") == '26-04-2021'"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def change_date_format(date_string):\n    \"\"\"\n    Convert a date from yyyy-mm-dd format to dd-mm-yyyy format.\n    \n    Args:\n        date_string: A string in yyyy-mm-dd format\n        \n    Returns:\n        A string in dd-mm-yyyy format\n    \"\"\"\n    parts = date_string.split('-')\n    yyyy, mm, dd = parts[0], parts[1], parts[2]\n    return f\"{dd}-{mm}-{yyyy}\""}
{"benchmark": "mbpp", "task_id": "429", "prompt": "Write a function to extract the elementwise and tuples from the given two tuples.", "reference_code": "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "test_imports": [], "test_list": ["assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)", "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)", "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def and_tuples(tuple1, tuple2):\n    \"\"\"\n    Extract the elementwise AND of two tuples.\n    \n    Args:\n        tuple1: First tuple of boolean or integer values\n        tuple2: Second tuple of boolean or integer values\n    \n    Returns:\n        A tuple containing the elementwise AND of the two input tuples\n    \"\"\"\n    return tuple(a and b for a, b in zip(tuple1, tuple2))"}
{"benchmark": "mbpp", "task_id": "431", "prompt": "Write a function that takes two lists and returns true if they have at least one common element.", "reference_code": "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result", "test_imports": [], "test_list": ["assert common_element([1,2,3,4,5], [5,6,7,8,9])==True", "assert common_element([1,2,3,4,5], [6,7,8,9])==None", "assert common_element(['a','b','c'], ['d','b','e'])==True"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def common_element(list1, list2):\n    \"\"\"\n    Returns True if list1 and list2 have at least one common element.\n    \n    Args:\n        list1: First list\n        list2: Second list\n    \n    Returns:\n        True if there is at least one common element, False otherwise\n    \"\"\"\n    return bool(set(list1) & set(list2))"}
{"benchmark": "mbpp", "task_id": "428", "prompt": "Write a function to sort the given array by using shell sort.", "reference_code": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list", "test_imports": [], "test_list": ["assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]", "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]", "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def shell_sort(arr):\n    \"\"\"\n    Sort an array using the shell sort algorithm.\n    \n    Args:\n        arr: List of comparable elements to be sorted\n        \n    Returns:\n        The sorted list (sorts in-place and returns the list)\n    \"\"\"\n    n = len(arr)\n    \n    # Start with a big gap, then reduce the gap\n    gap = n // 2\n    \n    # Do a gapped insertion sort for this gap size.\n    # The first gap elements arr[0..gap-1] are already in gapped order\n    # keep adding one more element until the entire array is gap sorted\n    while gap > 0:\n        # Do a gapped insertion sort for this gap size.\n        # The first gap elements arr[0..gap-1] are already in gapped order\n        # keep adding one more element until the entire array is gap sorted\n        for i in range(gap, n):\n            # add arr[i] to the elements that have been gap sorted\n            # save arr[i] in temp and make a hole at position i\n            temp = arr[i]\n            \n            # shift earlier gap-sorted elements up until the correct\n            # location for arr[i] is found\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            \n            # put temp (the original arr[i]) in its correct location\n            arr[j] = temp\n        \n        # Reduce the gap for the next element\n        gap //= 2\n    \n    return arr"}
{"benchmark": "mbpp", "task_id": "433", "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.", "reference_code": "def check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]", "test_imports": [], "test_list": ["assert check_greater([1, 2, 3, 4, 5], 4) == False", "assert check_greater([2, 3, 4, 5, 6], 8) == True", "assert check_greater([9, 7, 4, 8, 6, 1], 11) == True"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def check_greater(number, array):\n    \"\"\"\n    Check whether the entered number is greater than all elements of the given array.\n    \n    Args:\n        number: The number to compare\n        array: The array of elements to compare against\n    \n    Returns:\n        True if the number is greater than all elements in the array, False otherwise\n    \"\"\"\n    if not array:\n        return True\n    \n    return all(number > element for element in array)"}
{"benchmark": "mbpp", "task_id": "430", "prompt": "Write a function to find the directrix of a parabola.", "reference_code": "def parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix", "test_imports": [], "test_list": ["assert parabola_directrix(5,3,2)==-198", "assert parabola_directrix(9,8,4)==-2336", "assert parabola_directrix(2,4,6)==-130"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Find the directrix of a parabola given in the form y = ax^2 + bx + c.\n    \n    The parabola can be written in vertex form: y = a(x - h)^2 + k\n    where the vertex is (h, k) and the focus is at (h, k + 1/(4a)).\n    The directrix is a horizontal line: y = k - 1/(4a)\n    \n    Args:\n        a: coefficient of x^2\n        b: coefficient of x\n        c: constant term\n    \n    Returns:\n        A string representing the directrix equation in the form \"y = value\"\n    \"\"\"\n    # Convert to vertex form y = a(x - h)^2 + k\n    # From y = ax^2 + bx + c\n    # h = -b / (2a)\n    # k = c - b^2 / (4a)\n    \n    h = -b / (2 * a)\n    k = c - (b ** 2) / (4 * a)\n    \n    # The directrix is y = k - 1/(4a)\n    directrix_y = k - 1 / (4 * a)\n    \n    return f\"y = {directrix_y}\""}
{"benchmark": "mbpp", "task_id": "432", "prompt": "Write a function to find the median length of a trapezium.", "reference_code": "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median", "test_imports": [], "test_list": ["assert median_trapezium(15,25,35)==20", "assert median_trapezium(10,20,30)==15", "assert median_trapezium(6,9,4)==7.5"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def median_trapezium(base1: float, base2: float) -> float:\n    \"\"\"\n    Find the median length of a trapezium.\n    \n    The median (or midsegment) of a trapezium is the line segment\n    connecting the midpoints of the two non-parallel sides.\n    Its length is the average of the two parallel bases.\n    \n    Args:\n        base1: Length of the first parallel side\n        base2: Length of the second parallel side\n    \n    Returns:\n        The median length of the trapezium\n    \"\"\"\n    return (base1 + base2) / 2"}
{"benchmark": "mbpp", "task_id": "434", "prompt": "Write a function that matches a string that has an a followed by one or more b's.", "reference_code": "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n", "test_imports": [], "test_list": ["assert text_match_one(\"ac\")==False", "assert text_match_one(\"dc\")==False", "assert text_match_one(\"abba\")==True"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "import re\n\ndef text_match_one(text):\n    \"\"\"\n    Matches a string that has an 'a' followed by one or more 'b's.\n    \n    Args:\n        text: The string to match against\n        \n    Returns:\n        A match object if the pattern is found, None otherwise\n    \"\"\"\n    pattern = r'ab+'\n    return re.search(pattern, text)"}
{"benchmark": "mbpp", "task_id": "435", "prompt": "Write a python function to find the last digit of a given number.", "reference_code": "def last_Digit(n) :\n    return (n % 10) ", "test_imports": [], "test_list": ["assert last_Digit(123) == 3", "assert last_Digit(25) == 5", "assert last_Digit(30) == 0"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def last_Digit(n):\n    \"\"\"\n    Find the last digit of a given number.\n    \n    Args:\n        n: An integer (can be positive, negative, or zero)\n    \n    Returns:\n        The last digit of the number as an integer\n    \"\"\"\n    return abs(n) % 10"}
{"benchmark": "mbpp", "task_id": "436", "prompt": "Write a python function to return the negative numbers in a list.", "reference_code": "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out ", "test_imports": [], "test_list": ["assert neg_nos([-1,4,5,-6]) == [-1,-6]", "assert neg_nos([-1,-2,3,4]) == [-1,-2]", "assert neg_nos([-7,-6,8,9]) == [-7,-6]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def neg_nos(numbers):\n    \"\"\"Return a list of negative numbers from the input list.\"\"\"\n    return [num for num in numbers if num < 0]"}
{"benchmark": "mbpp", "task_id": "437", "prompt": "Write a function to remove odd characters in a string.", "reference_code": "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2", "test_imports": [], "test_list": ["assert remove_odd(\"python\")==(\"yhn\")", "assert remove_odd(\"program\")==(\"rga\")", "assert remove_odd(\"language\")==(\"agae\")"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def remove_odd(s):\n    \"\"\"\n    Remove characters at odd indices (1, 3, 5, ...) from the string.\n    Keep characters at even indices (0, 2, 4, ...).\n    \"\"\"\n    return s[::2]"}
{"benchmark": "mbpp", "task_id": "438", "prompt": "Write a function to count bidirectional tuple pairs.", "reference_code": "def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res", "test_imports": [], "test_list": ["assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3", "assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 2", "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == 4"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def count_bidirectional(pairs):\n    \"\"\"\n    Count bidirectional tuple pairs.\n    \n    A bidirectional pair is when both (a, b) and (b, a) exist in the list.\n    \n    Args:\n        pairs: A list of tuples\n        \n    Returns:\n        The count of bidirectional pairs\n    \"\"\"\n    pair_set = set(pairs)\n    count = 0\n    \n    for pair in pairs:\n        a, b = pair\n        # Check if the reverse pair exists\n        if (b, a) in pair_set:\n            count += 1\n    \n    # Since we count both (a, b) and (b, a), divide by 2 to get unique bidirectional pairs\n    return count // 2"}
{"benchmark": "mbpp", "task_id": "439", "prompt": "Write a function to join a list of multiple integers into a single integer.", "reference_code": "def multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x", "test_imports": [], "test_list": ["assert multiple_to_single([11, 33, 50])==113350", "assert multiple_to_single([-1,2,3,4,5,6])==-123456", "assert multiple_to_single([10,15,20,25])==10152025"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def multiple_to_single(numbers):\n    \"\"\"\n    Join a list of multiple integers into a single integer.\n    \n    Args:\n        numbers: A list of integers\n        \n    Returns:\n        A single integer formed by concatenating all the numbers\n    \"\"\"\n    return int(''.join(str(abs(num)) for num in numbers))"}
{"benchmark": "mbpp", "task_id": "441", "prompt": "Write a function to find the surface area of a cube of a given size.", "reference_code": "def surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea", "test_imports": [], "test_list": ["assert surfacearea_cube(5)==150", "assert surfacearea_cube(3)==54", "assert surfacearea_cube(10)==600"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def surfacearea_cube(size):\n    \"\"\"\n    Calculate the surface area of a cube given its side length.\n    \n    A cube has 6 faces, each with area = size * size\n    Total surface area = 6 * size * size\n    \n    Args:\n        size: The length of one side of the cube\n        \n    Returns:\n        The surface area of the cube\n    \"\"\"\n    return 6 * size * size"}
{"benchmark": "mbpp", "task_id": "440", "prompt": "Write a function to find the first adverb and their positions in a given sentence.", "reference_code": "import re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))", "test_imports": [], "test_list": ["assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')", "assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')", "assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def find_adverb_position(sentence):\n    \"\"\"\n    Find the first adverb and its position in a given sentence.\n    \n    Args:\n        sentence: A string containing a sentence\n        \n    Returns:\n        A tuple containing (adverb, start_position, end_position) or None if no adverb found\n    \"\"\"\n    # Common adverb endings\n    adverb_endings = ('ly', 'ward', 'wards')\n    \n    # Split sentence into words while tracking positions\n    words = sentence.split()\n    current_pos = 0\n    \n    for word in words:\n        # Find the position of this word in the original sentence\n        word_start = sentence.find(word, current_pos)\n        word_end = word_start + len(word)\n        \n        # Remove punctuation from the end of the word for checking\n        clean_word = word.rstrip('.,!?;:\\'\"')\n        \n        # Check if word ends with common adverb endings\n        if clean_word.lower().endswith(adverb_endings):\n            return (clean_word, word_start, word_end)\n        \n        current_pos = word_end\n    \n    return None"}
{"benchmark": "mbpp", "task_id": "442", "prompt": "Write a function to find the ration of positive numbers in an array of integers.", "reference_code": "from array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)", "test_imports": [], "test_list": ["assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54", "assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69", "assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def positive_count(arr):\n    \"\"\"\n    Find the ratio of positive numbers in an array of integers.\n    \n    Args:\n        arr: A list of integers\n        \n    Returns:\n        The ratio of positive numbers to total numbers as a float.\n        Returns 0 if the array is empty.\n    \"\"\"\n    if not arr or len(arr) == 0:\n        return 0\n    \n    positive_numbers = sum(1 for num in arr if num > 0)\n    ratio = positive_numbers / len(arr)\n    \n    return ratio"}
{"benchmark": "mbpp", "task_id": "443", "prompt": "Write a python function to find the largest negative number from the given list.", "reference_code": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max", "test_imports": [], "test_list": ["assert largest_neg([1,2,3,-4,-6]) == -6", "assert largest_neg([1,2,3,-8,-9]) == -9", "assert largest_neg([1,2,3,4,-1]) == -1"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def largest_neg(numbers):\n    \"\"\"\n    Find the largest negative number from the given list.\n    \n    Args:\n        numbers: A list of numbers\n        \n    Returns:\n        The largest negative number (closest to zero among negatives),\n        or None if no negative numbers exist\n    \"\"\"\n    negative_numbers = [num for num in numbers if num < 0]\n    \n    if not negative_numbers:\n        return None\n    \n    return max(negative_numbers)"}
{"benchmark": "mbpp", "task_id": "444", "prompt": "Write a function to trim each tuple by k in the given tuple list.", "reference_code": "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) ", "test_imports": [], "test_list": ["assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'", "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'", "assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def trim_tuple(tuple_list, k):\n    \"\"\"\n    Trim each tuple in the list by removing k elements from both ends.\n    \n    Args:\n        tuple_list: A list of tuples\n        k: Number of elements to remove from each end of each tuple\n    \n    Returns:\n        A list of trimmed tuples\n    \"\"\"\n    return [t[k:-k] if len(t) > 2*k else () for t in tuple_list]"}
{"benchmark": "mbpp", "task_id": "445", "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.", "reference_code": "def index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ", "test_imports": [], "test_list": ["assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))", "assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))", "assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def index_multiplication(tuple1, tuple2):\n    \"\"\"\n    Perform index wise multiplication of tuple elements in the given two tuples.\n    \n    Args:\n        tuple1: First tuple\n        tuple2: Second tuple\n    \n    Returns:\n        A tuple containing the element-wise products of the two input tuples.\n        If tuples have different lengths, only multiply up to the length of the shorter tuple.\n    \"\"\"\n    return tuple(a * b for a, b in zip(tuple1, tuple2))"}
{"benchmark": "mbpp", "task_id": "446", "prompt": "Write a python function to count the occurence of all elements of list in a tuple.", "reference_code": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  ", "test_imports": [], "test_list": ["assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3", "assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6", "assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def count_Occurrence(lst, tpl):\n    \"\"\"\n    Count the occurrence of all elements of list in a tuple.\n    \n    Args:\n        lst: A list of elements to count\n        tpl: A tuple to search in\n    \n    Returns:\n        A dictionary with elements from the list as keys and their counts in the tuple as values\n    \"\"\"\n    result = {}\n    for element in lst:\n        result[element] = tpl.count(element)\n    return result"}
{"benchmark": "mbpp", "task_id": "447", "prompt": "Write a function to find cubes of individual elements in a list.", "reference_code": "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums", "test_imports": [], "test_list": ["assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]", "assert cube_nums([10,20,30])==([1000, 8000, 27000])", "assert cube_nums([12,15])==([1728, 3375])"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def cube_nums(numbers):\n    \"\"\"\n    Find cubes of individual elements in a list.\n    \n    Args:\n        numbers: A list of numbers\n        \n    Returns:\n        A list containing the cube of each element\n    \"\"\"\n    return [num ** 3 for num in numbers]"}
{"benchmark": "mbpp", "task_id": "450", "prompt": "Write a function to extract specified size of strings from a given list of string values.", "reference_code": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result", "test_imports": [], "test_list": ["assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']", "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']", "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def extract_string(strings, size):\n    \"\"\"\n    Extract strings of a specified size from a given list of string values.\n    \n    Args:\n        strings: A list of string values\n        size: The desired length of strings to extract\n    \n    Returns:\n        A list of strings that have exactly the specified size\n    \"\"\"\n    return [s for s in strings if len(s) == size]"}
{"benchmark": "mbpp", "task_id": "448", "prompt": "Write a function to calculate the sum of perrin numbers.", "reference_code": "def cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum", "test_imports": [], "test_list": ["assert cal_sum(9) == 49", "assert cal_sum(10) == 66", "assert cal_sum(11) == 88"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of the first n Perrin numbers.\n    \n    The Perrin sequence is defined as:\n    P(0) = 3\n    P(1) = 0\n    P(2) = 2\n    P(n) = P(n-2) + P(n-3) for n > 2\n    \n    Args:\n        n: The number of Perrin numbers to sum\n        \n    Returns:\n        The sum of the first n Perrin numbers\n    \"\"\"\n    if n <= 0:\n        return 0\n    \n    # Initialize the first three Perrin numbers\n    perrin = [3, 0, 2]\n    \n    # If n is 1, 2, or 3, return the sum of the first n numbers\n    if n == 1:\n        return 3\n    elif n == 2:\n        return 3 + 0\n    elif n == 3:\n        return 3 + 0 + 2\n    \n    # Calculate remaining Perrin numbers up to n\n    for i in range(3, n):\n        next_perrin = perrin[i - 2] + perrin[i - 3]\n        perrin.append(next_perrin)\n    \n    # Return the sum of all Perrin numbers\n    return sum(perrin)"}
{"benchmark": "mbpp", "task_id": "451", "prompt": "Write a function to remove all whitespaces from the given string.", "reference_code": "import re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))", "test_imports": [], "test_list": ["assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'", "assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'", "assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def remove_whitespaces(s):\n    \"\"\"Remove all whitespaces from the given string.\"\"\"\n    return ''.join(s.split())"}
{"benchmark": "mbpp", "task_id": "453", "prompt": "Write a python function to find the sum of even factors of a number.", "reference_code": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res", "test_imports": [], "test_list": ["assert sumofFactors(18) == 26", "assert sumofFactors(30) == 48", "assert sumofFactors(6) == 8"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def sumofFactors(n):\n    \"\"\"\n    Find the sum of even factors of a number.\n    \n    Args:\n        n: A positive integer\n        \n    Returns:\n        The sum of all even factors of n\n    \"\"\"\n    if n <= 0:\n        return 0\n    \n    even_sum = 0\n    \n    # Find all factors by checking up to sqrt(n)\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            # i is a factor\n            if i % 2 == 0:\n                even_sum += i\n            \n            # n // i is also a factor (if different from i)\n            if i != n // i:\n                other_factor = n // i\n                if other_factor % 2 == 0:\n                    even_sum += other_factor\n        \n        i += 1\n    \n    return even_sum"}
{"benchmark": "mbpp", "task_id": "454", "prompt": "Write a function that matches a word containing 'z'.", "reference_code": "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False", "test_imports": [], "test_list": ["assert text_match_wordz(\"pythonz.\")==True", "assert text_match_wordz(\"xyz.\")==True", "assert text_match_wordz(\"  lang  .\")==False"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "import re\n\ndef text_match_wordz(text):\n    \"\"\"\n    Matches a word containing 'z' in the given text.\n    Returns True if a word containing 'z' is found, False otherwise.\n    \"\"\"\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text, re.IGNORECASE))"}
{"benchmark": "mbpp", "task_id": "455", "prompt": "Write a function to check whether the given month number contains 31 days or not.", "reference_code": "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False", "test_imports": [], "test_list": ["assert check_monthnumb_number(5)==True", "assert check_monthnumb_number(2)==False", "assert check_monthnumb_number(6)==False"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def check_monthnumb_number(month):\n    \"\"\"\n    Check whether the given month number contains 31 days or not.\n    \n    Args:\n        month: An integer representing the month number (1-12)\n    \n    Returns:\n        True if the month has 31 days, False otherwise\n    \"\"\"\n    months_with_31_days = {1, 3, 5, 7, 8, 10, 12}\n    return month in months_with_31_days"}
{"benchmark": "mbpp", "task_id": "457", "prompt": "Write a python function to find the sublist having minimum length.", "reference_code": "def Find_Min(lst): \n    return min(lst, key=len) ", "test_imports": [], "test_list": ["assert Find_Min([[1],[1,2],[1,2,3]]) == [1]", "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]", "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def Find_Min(lists):\n    \"\"\"\n    Find the sublist with minimum length from a list of lists.\n    \n    Args:\n        lists: A list of sublists\n        \n    Returns:\n        The sublist with the minimum length, or None if the input is empty\n    \"\"\"\n    if not lists:\n        return None\n    \n    return min(lists, key=len)"}
{"benchmark": "mbpp", "task_id": "458", "prompt": "Write a function to find the area of a rectangle.", "reference_code": "def rectangle_area(l,b):\n  area=l*b\n  return area", "test_imports": [], "test_list": ["assert rectangle_area(10,20)==200", "assert rectangle_area(10,5)==50", "assert rectangle_area(4,2)==8"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def rectangle_area(length, width):\n    \"\"\"\n    Calculate the area of a rectangle.\n    \n    Args:\n        length: The length of the rectangle\n        width: The width of the rectangle\n    \n    Returns:\n        The area of the rectangle (length * width)\n    \"\"\"\n    return length * width"}
{"benchmark": "mbpp", "task_id": "460", "prompt": "Write a python function to get the first element of each sublist.", "reference_code": "def Extract(lst): \n    return [item[0] for item in lst] ", "test_imports": [], "test_list": ["assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]", "assert Extract([[1,2,3],[4, 5]]) == [1,4]", "assert Extract([[9,8,1],[1,2]]) == [9,1]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def Extract(lists):\n    \"\"\"\n    Get the first element of each sublist.\n    \n    Args:\n        lists: A list of sublists\n        \n    Returns:\n        A list containing the first element of each sublist\n    \"\"\"\n    return [sublist[0] for sublist in lists]"}
{"benchmark": "mbpp", "task_id": "456", "prompt": "Write a function to reverse each string in a given list of string values.", "reference_code": "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result", "test_imports": [], "test_list": ["assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']", "assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']", "assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def reverse_string_list(strings):\n    \"\"\"\n    Reverse each string in a given list of string values.\n    \n    Args:\n        strings: A list of strings\n        \n    Returns:\n        A list with each string reversed\n    \"\"\"\n    return [s[::-1] for s in strings]"}
{"benchmark": "mbpp", "task_id": "461", "prompt": "Write a python function to count the upper case characters in a given string.", "reference_code": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr", "test_imports": [], "test_list": ["assert upper_ctr('PYthon') == 1", "assert upper_ctr('BigData') == 1", "assert upper_ctr('program') == 0"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def upper_ctr(s):\n    \"\"\"Count the number of uppercase characters in a given string.\"\"\"\n    return sum(1 for c in s if c.isupper())"}
{"benchmark": "mbpp", "task_id": "459", "prompt": "Write a function to remove uppercase substrings from a given string.", "reference_code": "import re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)", "test_imports": [], "test_list": ["assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'", "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'", "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def remove_uppercase(s: str) -> str:\n    \"\"\"\n    Remove all uppercase substrings from a given string.\n    \n    An uppercase substring is a contiguous sequence of uppercase letters.\n    \n    Args:\n        s: The input string\n        \n    Returns:\n        The string with all uppercase substrings removed\n    \"\"\"\n    result = []\n    i = 0\n    \n    while i < len(s):\n        if s[i].isupper():\n            # Skip all consecutive uppercase letters\n            while i < len(s) and s[i].isupper():\n                i += 1\n        else:\n            # Keep non-uppercase characters\n            result.append(s[i])\n            i += 1\n    \n    return ''.join(result)"}
{"benchmark": "mbpp", "task_id": "462", "prompt": "Write a function to find all possible combinations of the elements of a given list.", "reference_code": "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result", "test_imports": [], "test_list": ["assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]", "assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]", "assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "from itertools import combinations\n\ndef combinations_list(lst):\n    \"\"\"\n    Find all possible combinations of the elements of a given list.\n    \n    Args:\n        lst: A list of elements\n        \n    Returns:\n        A list of all possible combinations (as tuples) of all lengths from 0 to len(lst)\n    \"\"\"\n    result = []\n    for r in range(len(lst) + 1):\n        result.extend(combinations(lst, r))\n    return result"}
{"benchmark": "mbpp", "task_id": "465", "prompt": "Write a function to drop empty items from a given dictionary.", "reference_code": "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1", "test_imports": [], "test_list": ["assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}", "assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}", "assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def drop_empty(d):\n    \"\"\"\n    Remove empty items from a dictionary.\n    \n    Args:\n        d: A dictionary that may contain empty values\n        \n    Returns:\n        A new dictionary with empty values removed\n    \"\"\"\n    return {k: v for k, v in d.items() if v}"}
{"benchmark": "mbpp", "task_id": "468", "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.", "reference_code": "def max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)", "test_imports": [], "test_list": ["assert max_product([3, 100, 4, 5, 150, 6]) == 3000", "assert max_product([4, 42, 55, 68, 80]) == 50265600", "assert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def max_product(arr):\n    \"\"\"\n    Find the maximum product formed by multiplying numbers of an increasing subsequence.\n    \n    Args:\n        arr: List of integers\n        \n    Returns:\n        The maximum product of any increasing subsequence\n    \"\"\"\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    \n    # dp[i] = maximum product of increasing subsequence ending at index i\n    dp = arr[:]\n    \n    for i in range(n):\n        for j in range(i):\n            # If arr[j] < arr[i], we can extend the subsequence ending at j\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    \n    return max(dp)"}
{"benchmark": "mbpp", "task_id": "463", "prompt": "Write a function to find the maximum product subarray of the given array.", "reference_code": "def max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far", "test_imports": [], "test_list": ["assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112", "assert max_subarray_product([6, -3, -10, 0, 2]) == 180", "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def max_subarray_product(nums):\n    \"\"\"\n    Find the maximum product of any contiguous subarray.\n    \n    Args:\n        nums: List of integers\n        \n    Returns:\n        The maximum product of any contiguous subarray\n    \"\"\"\n    if not nums:\n        return 0\n    \n    # Track both max and min products ending at current position\n    # We need to track min because a negative number can flip min to max\n    max_product = nums[0]\n    min_product = nums[0]\n    result = nums[0]\n    \n    for i in range(1, len(nums)):\n        current = nums[i]\n        \n        # Calculate new max and min products\n        # We need to consider:\n        # 1. Starting fresh from current number\n        # 2. Extending max_product by multiplying with current\n        # 3. Extending min_product by multiplying with current (useful if current is negative)\n        new_max = max(current, max_product * current, min_product * current)\n        new_min = min(current, max_product * current, min_product * current)\n        \n        max_product = new_max\n        min_product = new_min\n        result = max(result, max_product)\n    \n    return result"}
{"benchmark": "mbpp", "task_id": "470", "prompt": "Write a function to find the pairwise addition of the neighboring elements of the given tuple.", "reference_code": "def add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ", "test_imports": [], "test_list": ["assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)", "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)", "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def add_pairwise(t):\n    \"\"\"\n    Find the pairwise addition of neighboring elements of the given tuple.\n    \n    Args:\n        t: A tuple of numbers\n        \n    Returns:\n        A tuple containing the sum of each pair of neighboring elements\n    \"\"\"\n    if len(t) < 2:\n        return ()\n    \n    return tuple(t[i] + t[i + 1] for i in range(len(t) - 1))"}
{"benchmark": "mbpp", "task_id": "472", "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.", "reference_code": "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) ", "test_imports": [], "test_list": ["assert check_Consecutive([1,2,3,4,5]) == True", "assert check_Consecutive([1,2,3,5,6]) == False", "assert check_Consecutive([1,2,1]) == False"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def check_Consecutive(lst):\n    \"\"\"\n    Check whether the given list contains consecutive numbers or not.\n    \n    Args:\n        lst: A list of numbers\n        \n    Returns:\n        True if the list contains consecutive numbers, False otherwise\n    \"\"\"\n    if not lst or len(lst) == 0:\n        return False\n    \n    if len(lst) == 1:\n        return True\n    \n    sorted_lst = sorted(lst)\n    \n    for i in range(len(sorted_lst) - 1):\n        if sorted_lst[i + 1] - sorted_lst[i] != 1:\n            return False\n    \n    return True"}
{"benchmark": "mbpp", "task_id": "475", "prompt": "Write a function to sort a dictionary by value.", "reference_code": "from collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter", "test_imports": [], "test_list": ["assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]", "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]", "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def sort_counter(d):\n    \"\"\"\n    Sort a dictionary by its values in descending order.\n    \n    Args:\n        d: A dictionary to sort\n        \n    Returns:\n        A dictionary sorted by values in descending order\n    \"\"\"\n    return dict(sorted(d.items(), key=lambda item: item[1], reverse=True))"}
{"benchmark": "mbpp", "task_id": "474", "prompt": "Write a function to replace characters in a string.", "reference_code": "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2", "test_imports": [], "test_list": ["assert replace_char(\"polygon\",'y','l')==(\"pollgon\")", "assert replace_char(\"character\",'c','a')==(\"aharaater\")", "assert replace_char(\"python\",'l','a')==(\"python\")"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def replace_char(string: str, char: str, replacement: str) -> str:\n    \"\"\"\n    Replace all occurrences of a character in a string with a replacement string.\n    \n    Args:\n        string: The input string\n        char: The character to replace\n        replacement: The string to replace it with\n    \n    Returns:\n        The string with all occurrences of char replaced by replacement\n    \"\"\"\n    return string.replace(char, replacement)"}
{"benchmark": "mbpp", "task_id": "477", "prompt": "Write a python function to convert the given string to lower case.", "reference_code": "def is_lower(string):\n  return (string.lower())", "test_imports": [], "test_list": ["assert is_lower(\"InValid\") == \"invalid\"", "assert is_lower(\"TruE\") == \"true\"", "assert is_lower(\"SenTenCE\") == \"sentence\""], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def is_lower(s):\n    \"\"\"\n    Convert the given string to lower case.\n    \n    Args:\n        s: A string to convert to lower case\n        \n    Returns:\n        The string converted to lower case\n    \"\"\"\n    return s.lower()"}
{"benchmark": "mbpp", "task_id": "478", "prompt": "Write a function to remove lowercase substrings from a given string.", "reference_code": "import re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)", "test_imports": [], "test_list": ["assert remove_lowercase(\"PYTHon\")==('PYTH')", "assert remove_lowercase(\"FInD\")==('FID')", "assert remove_lowercase(\"STRinG\")==('STRG')"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def remove_lowercase(s: str) -> str:\n    \"\"\"\n    Remove all lowercase substrings from a given string.\n    \n    A lowercase substring is a contiguous sequence of lowercase letters.\n    This function removes all such substrings and returns the result.\n    \n    Args:\n        s: The input string\n        \n    Returns:\n        The string with all lowercase substrings removed\n    \"\"\"\n    result = []\n    i = 0\n    \n    while i < len(s):\n        # If current character is lowercase, skip the entire lowercase substring\n        if s[i].islower():\n            while i < len(s) and s[i].islower():\n                i += 1\n        else:\n            # Keep non-lowercase characters\n            result.append(s[i])\n            i += 1\n    \n    return ''.join(result)"}
{"benchmark": "mbpp", "task_id": "471", "prompt": "Write a python function to find the product of the array multiplication modulo n.", "reference_code": "def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n ", "test_imports": [], "test_list": ["assert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9", "assert find_remainder([1,1,1],1) == 0", "assert find_remainder([1,2,1],2) == 0"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def find_remainder(arr, n):\n    \"\"\"\n    Find the product of all elements in the array modulo n.\n    \n    Args:\n        arr: List of integers\n        n: The modulo value\n    \n    Returns:\n        The product of all elements modulo n\n    \"\"\"\n    if n == 0:\n        return 0\n    \n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    \n    return product"}
{"benchmark": "mbpp", "task_id": "464", "prompt": "Write a function to check if all values are same in a dictionary.", "reference_code": "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result", "test_imports": [], "test_list": ["assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False", "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True", "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def check_value(d):\n    \"\"\"\n    Check if all values in a dictionary are the same.\n    \n    Args:\n        d: A dictionary to check\n        \n    Returns:\n        True if all values are the same, False otherwise.\n        Returns True for empty dictionaries.\n    \"\"\"\n    if not d:\n        return True\n    \n    values = list(d.values())\n    first_value = values[0]\n    \n    return all(value == first_value for value in values)"}
{"benchmark": "mbpp", "task_id": "473", "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.", "reference_code": "def tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)", "test_imports": [], "test_list": ["assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}", "assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}", "assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def tuple_intersection(tuple_list):\n    \"\"\"\n    Find the intersection of elements in the given tuple list irrespective of their order.\n    \n    Args:\n        tuple_list: A list of tuples\n        \n    Returns:\n        A tuple containing elements that appear in all tuples, irrespective of order\n    \"\"\"\n    if not tuple_list:\n        return ()\n    \n    # Convert each tuple to a set to handle order-independence\n    sets = [set(t) for t in tuple_list]\n    \n    # Find intersection of all sets\n    intersection = sets[0]\n    for s in sets[1:]:\n        intersection = intersection.intersection(s)\n    \n    # Return as tuple, sorted for consistent output\n    return tuple(sorted(intersection))"}
{"benchmark": "mbpp", "task_id": "476", "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.", "reference_code": "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum", "test_imports": [], "test_list": ["assert big_sum([1,2,3]) == 4", "assert big_sum([-1,2,3,4]) == 3", "assert big_sum([2,3,6]) == 8"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def big_sum(arr):\n    \"\"\"\n    Find the sum of the largest and smallest value in a given array.\n    \n    Args:\n        arr: A list of numbers\n        \n    Returns:\n        The sum of the maximum and minimum values in the array\n    \"\"\"\n    if not arr:\n        return 0\n    \n    return max(arr) + min(arr)"}
{"benchmark": "mbpp", "task_id": "479", "prompt": "Write a python function to find the first digit of a given number.", "reference_code": "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) ", "test_imports": [], "test_list": ["assert first_Digit(123) == 1", "assert first_Digit(456) == 4", "assert first_Digit(12) == 1"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def first_Digit(n):\n    \"\"\"\n    Find the first digit of a given number.\n    \n    Args:\n        n: An integer (can be positive, negative, or zero)\n    \n    Returns:\n        The first digit of the number as an integer\n    \"\"\"\n    # Convert to string and remove negative sign if present\n    num_str = str(abs(n))\n    \n    # Return the first character as an integer\n    return int(num_str[0])"}
{"benchmark": "mbpp", "task_id": "452", "prompt": "Write a function that gives loss amount on a sale if the given amount has loss else return 0.", "reference_code": "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0", "test_imports": [], "test_list": ["assert loss_amount(1500,1200)==0", "assert loss_amount(100,200)==100", "assert loss_amount(2000,5000)==3000"], "model_name": "anthropic/claude-haiku-4.5", "generated_code": "def loss_amount(cost_price, selling_price):\n    \"\"\"\n    Calculate the loss amount on a sale.\n    \n    Args:\n        cost_price: The original cost price of the item\n        selling_price: The price at which the item is sold\n    \n    Returns:\n        The loss amount if selling_price < cost_price, otherwise 0\n    \"\"\"\n    if selling_price < cost_price:\n        return cost_price - selling_price\n    return 0"}
