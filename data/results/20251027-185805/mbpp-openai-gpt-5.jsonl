{"benchmark": "mbpp", "task_id": "70", "prompt": "Write a function to find whether all the given tuples have equal length or not.", "reference_code": "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1", "test_imports": [], "test_list": ["assert get_equal([(11, 22, 33), (44, 55, 66)]) == True", "assert get_equal([(1, 2, 3), (4, 5, 6, 7)]) == False", "assert get_equal([(1, 2), (3, 4)]) == True"], "model_name": "openai/gpt-5", "generated_code": "def get_equal(tuples_iterable):\n    \"\"\"\n    Determine whether all given tuples have the same length.\n\n    Args:\n        tuples_iterable: An iterable of tuples.\n\n    Returns:\n        True if all tuples have equal length or the iterable is empty/singleton, False otherwise.\n    \"\"\"\n    it = iter(tuples_iterable)\n    try:\n        first = next(it)\n    except StopIteration:\n        # Empty iterable: considered equal by default\n        return True\n\n    target_len = len(first)\n    for t in it:\n        if len(t) != target_len:\n            return False\n    return True"}
{"benchmark": "mbpp", "task_id": "18", "prompt": "Write a function to remove characters from the first string which are present in the second string.", "reference_code": "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) ", "test_imports": [], "test_list": ["assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'", "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'", "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'"], "model_name": "openai/gpt-5", "generated_code": "from typing import Iterable\n\ndef remove_dirty_chars(first: str, second: str) -> str:\n    \"\"\"\n    Remove all characters from 'first' that are present in 'second'.\n    \n    Args:\n        first: The source string from which characters will be removed.\n        second: The string containing characters to remove from 'first'.\n    \n    Returns:\n        A new string consisting of characters from 'first' not present in 'second'.\n    \"\"\"\n    if not first:\n        return \"\"\n    if not second:\n        return first\n    to_remove = set(second)\n    return \"\".join(ch for ch in first if ch not in to_remove)"}
{"benchmark": "mbpp", "task_id": "83", "prompt": "Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.", "reference_code": "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)", "test_imports": [], "test_list": ["assert get_Char(\"abc\") == \"f\"", "assert get_Char(\"gfg\") == \"t\"", "assert get_Char(\"ab\") == \"c\""], "model_name": "openai/gpt-5", "generated_code": "def get_Char(s):\n    \"\"\"\n    Returns a lowercase character computed by:\n    (sum of ASCII values of all characters in the input string) modulo 26,\n    mapped to 'a'..'z'.\n    \"\"\"\n    if s is None:\n        total = 0\n    else:\n        s = str(s)\n        total = sum(ord(c) for c in s)\n    return chr(ord('a') + (total % 26))"}
{"benchmark": "mbpp", "task_id": "17", "prompt": "Write a function that returns the perimeter of a square given its side length as input.", "reference_code": "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter", "test_imports": [], "test_list": ["assert square_perimeter(10)==40", "assert square_perimeter(5)==20", "assert square_perimeter(4)==16"], "model_name": "openai/gpt-5", "generated_code": "def square_perimeter(side_length):\n    \"\"\"\n    Return the perimeter of a square given its side length.\n\n    Parameters:\n        side_length (int or float): The length of one side of the square.\n\n    Returns:\n        int or float: The perimeter of the square.\n    \"\"\"\n    return 4 * side_length"}
{"benchmark": "mbpp", "task_id": "19", "prompt": "Write a function to find whether a given array of integers contains any duplicate element.", "reference_code": "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     ", "test_imports": [], "test_list": ["assert test_duplicate(([1,2,3,4,5]))==False", "assert test_duplicate(([1,2,3,4, 4]))==True", "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"], "model_name": "openai/gpt-5", "generated_code": "from typing import Iterable\n\ndef test_duplicate(arr: Iterable[int]) -> bool:\n    \"\"\"\n    Determine whether the given iterable of integers contains any duplicate element.\n\n    Args:\n        arr: An iterable of integers.\n\n    Returns:\n        True if any duplicate exists, False otherwise.\n    \"\"\"\n    seen = set()\n    for x in arr:\n        if x in seen:\n            return True\n        seen.add(x)\n    return False"}
{"benchmark": "mbpp", "task_id": "62", "prompt": "Write a python function to find smallest number in a list.", "reference_code": "def smallest_num(xs):\n  return min(xs)\n", "test_imports": [], "test_list": ["assert smallest_num([10, 20, 1, 45, 99]) == 1", "assert smallest_num([1, 2, 3]) == 1", "assert smallest_num([45, 46, 50, 60]) == 45"], "model_name": "openai/gpt-5", "generated_code": "def smallest_num(nums):\n    \"\"\"\n    Return the smallest number in a list.\n    If the list is empty, return None.\n    \"\"\"\n    if not nums:\n        return None\n    smallest = nums[0]\n    for value in nums[1:]:\n        if value < smallest:\n            smallest = value\n    return smallest"}
{"benchmark": "mbpp", "task_id": "69", "prompt": "Write a function to check whether a list contains the given sublist or not.", "reference_code": "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set", "test_imports": [], "test_list": ["assert is_sublist([2,4,3,5,7],[3,7])==False", "assert is_sublist([2,4,3,5,7],[4,3])==True", "assert is_sublist([2,4,3,5,7],[1,6])==False"], "model_name": "openai/gpt-5", "generated_code": "def is_sublist(lst, sublst):\n    \"\"\"\n    Check whether 'lst' contains 'sublst' as a contiguous subsequence.\n\n    Args:\n        lst (list): The list to search within.\n        sublst (list): The sublist to search for.\n\n    Returns:\n        bool: True if 'sublst' appears in 'lst' contiguously, False otherwise.\n    \"\"\"\n    # An empty sublist is always considered to be contained\n    if sublst == []:\n        return True\n\n    n, m = len(lst), len(sublst)\n    if m > n:\n        return False\n\n    # Slide a window of length m across lst\n    # Compare slices for equality\n    for i in range(n - m + 1):\n        if lst[i:i + m] == sublst:\n            return True\n    return False"}
{"benchmark": "mbpp", "task_id": "84", "prompt": "Write a function to find the nth number in the newman conway sequence.", "reference_code": "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))", "test_imports": [], "test_list": ["assert sequence(10) == 6", "assert sequence(2) == 1", "assert sequence(3) == 2"], "model_name": "openai/gpt-5", "generated_code": "def sequence(n: int) -> int:\n    \"\"\"\n    Compute the nth number in the Newman-Conway sequence.\n\n    Definition:\n    P(1) = 1, P(2) = 1\n    For n > 2: P(n) = P(P(n-1)) + P(n - P(n-1))\n\n    For convenience, if n <= 0, returns 0.\n    \"\"\"\n    if n <= 0:\n        return 0\n    if n == 1 or n == 2:\n        return 1\n\n    # dp[0] is a sentinel to simplify indexing; sequence defined from index 1\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    dp[2] = 1\n\n    for i in range(3, n + 1):\n        prev = dp[i - 1]\n        dp[i] = dp[prev] + dp[i - prev]\n\n    return dp[n]"}
{"benchmark": "mbpp", "task_id": "58", "prompt": "Write a python function to check whether the given two integers have opposite sign or not.", "reference_code": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); ", "test_imports": [], "test_list": ["assert opposite_Signs(1,-2) == True", "assert opposite_Signs(3,2) == False", "assert opposite_Signs(-10,-10) == False", "assert opposite_Signs(-2,2) == True"], "model_name": "openai/gpt-5", "generated_code": "def opposite_Signs(x, y):\n    \"\"\"\n    Check whether two integers have opposite signs.\n    Returns True if one is positive and the other is negative (zero is not considered).\n    \"\"\"\n    if x == 0 or y == 0:\n        return False\n    return (x ^ y) < 0"}
{"benchmark": "mbpp", "task_id": "14", "prompt": "Write a python function to find the volume of a triangular prism.", "reference_code": "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) ", "test_imports": [], "test_list": ["assert find_Volume(10,8,6) == 240", "assert find_Volume(3,2,2) == 6", "assert find_Volume(1,2,1) == 1"], "model_name": "openai/gpt-5", "generated_code": "def find_Volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    - base: the base length of the triangular face\n    - height: the height of the triangular face\n    - length: the length (or depth) of the prism\n\n    Returns:\n    - The volume as 0.5 * base * height * length\n    \"\"\"\n    return 0.5 * base * height * length"}
{"benchmark": "mbpp", "task_id": "82", "prompt": "Write a function to find the volume of a sphere.", "reference_code": "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume", "test_imports": ["import math"], "test_list": ["assert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)", "assert math.isclose(volume_sphere(25), 65449.84694978735, rel_tol=0.001)", "assert math.isclose(volume_sphere(20), 33510.32163829113, rel_tol=0.001)"], "model_name": "openai/gpt-5", "generated_code": "from math import pi\n\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere given its radius.\n\n    Parameters:\n        radius (int | float): The radius of the sphere. Must be non-negative.\n\n    Returns:\n        float: The volume of the sphere.\n\n    Raises:\n        TypeError: If radius is not a real number.\n        ValueError: If radius is negative.\n    \"\"\"\n    try:\n        r = float(radius)\n    except (TypeError, ValueError):\n        raise TypeError(\"radius must be a real number\")\n    if r < 0:\n        raise ValueError(\"radius must be non-negative\")\n    return (4.0 / 3.0) * pi * (r ** 3)"}
{"benchmark": "mbpp", "task_id": "57", "prompt": "Write a python function to find the largest number that can be formed with the given list of digits.", "reference_code": "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ", "test_imports": [], "test_list": ["assert find_Max_Num([1,2,3]) == 321", "assert find_Max_Num([4,5,6,1]) == 6541", "assert find_Max_Num([1,2,3,9]) == 9321"], "model_name": "openai/gpt-5", "generated_code": "from typing import Iterable, List, Union\n\ndef find_Max_Num(digits: Iterable[Union[int, str]]) -> int:\n    \"\"\"\n    Find the largest number that can be formed using all digits from the given iterable.\n    Accepts integers 0-9 or single-character strings '0'-'9'.\n    \n    Returns:\n        int: The largest possible integer formed. If the input is empty, returns 0.\n    \"\"\"\n    if digits is None:\n        return 0\n\n    # Convert all elements to integers and validate they are digits 0-9\n    processed: List[int] = []\n    for d in digits:\n        # Convert string digits to int, keep ints as-is\n        if isinstance(d, str):\n            d = d.strip()\n            if len(d) != 1 or not d.isdigit():\n                raise ValueError(\"All elements must be single-digit integers or strings '0'-'9'.\")\n            val = int(d)\n        elif isinstance(d, int):\n            val = d\n        else:\n            raise ValueError(\"All elements must be integers or digit strings.\")\n        if not (0 <= val <= 9):\n            raise ValueError(\"All elements must be digits between 0 and 9.\")\n        processed.append(val)\n\n    if not processed:\n        return 0\n\n    # Sort digits in descending order to form the largest number\n    processed.sort(reverse=True)\n    # Convert to int to normalize leading zeros case (e.g., [0,0] -> 0)\n    return int(\"\".join(str(x) for x in processed))"}
{"benchmark": "mbpp", "task_id": "64", "prompt": "Write a function to sort a list of tuples using the second value of each tuple.", "reference_code": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks", "test_imports": [], "test_list": ["assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]", "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])", "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"], "model_name": "openai/gpt-5", "generated_code": "def subject_marks(tuples_list):\n    \"\"\"\n    Sort a list of tuples by the second value of each tuple in ascending order.\n\n    Args:\n        tuples_list (list[tuple]): List of tuples where each tuple has at least two elements.\n\n    Returns:\n        list[tuple]: A new list sorted by the second element of each tuple.\n    \"\"\"\n    return sorted(tuples_list, key=lambda x: x[1])"}
{"benchmark": "mbpp", "task_id": "72", "prompt": "Write a python function to check whether the given number can be represented as the difference of two squares or not.", "reference_code": "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False", "test_imports": [], "test_list": ["assert dif_Square(5) == True", "assert dif_Square(10) == False", "assert dif_Square(15) == True"], "model_name": "openai/gpt-5", "generated_code": "def dif_Square(n):\n    \"\"\"\n    Check whether the given integer can be represented as the difference of two squares.\n    \n    For any integer n, it can be expressed as a^2 - b^2 iff n % 4 != 2.\n    This holds for negative integers and zero as well.\n    \n    Parameters:\n        n (int): The integer to check.\n        \n    Returns:\n        bool: True if representable as a difference of two squares, False otherwise.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    return n % 4 != 2"}
{"benchmark": "mbpp", "task_id": "16", "prompt": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.", "reference_code": "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False", "test_imports": [], "test_list": ["assert text_lowercase_underscore(\"aab_cbbbc\")==(True)", "assert text_lowercase_underscore(\"aab_Abbbc\")==(False)", "assert text_lowercase_underscore(\"Aaab_abbbc\")==(False)"], "model_name": "openai/gpt-5", "generated_code": "import re\n\n# Precompiled regex: one or more lowercase letters, an underscore, then one or more lowercase letters\n_LOWERCASE_UNDERSCORE_PATTERN = re.compile(r'^[a-z]+_[a-z]+$')\n\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Returns True if the input string consists of two sequences of lowercase letters\n    joined by a single underscore (e.g., 'hello_world'), otherwise False.\n    \"\"\"\n    if not isinstance(text, str):\n        return False\n    return _LOWERCASE_UNDERSCORE_PATTERN.fullmatch(text) is not None"}
{"benchmark": "mbpp", "task_id": "95", "prompt": "Write a python function to find the length of the smallest list in a list of lists.", "reference_code": "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength ", "test_imports": [], "test_list": ["assert Find_Min_Length([[1],[1,2]]) == 1", "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2", "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"], "model_name": "openai/gpt-5", "generated_code": "def Find_Min_Length(lists):\n    \"\"\"\n    Returns the length of the smallest list in the given list of lists.\n    If the input list is empty or contains no sized elements, returns 0.\n    \"\"\"\n    min_len = None\n    for item in lists:\n        try:\n            current_len = len(item)\n        except TypeError:\n            # Ignore items that don't have a length\n            continue\n        if min_len is None or current_len < min_len:\n            min_len = current_len\n    return min_len if min_len is not None else 0"}
{"benchmark": "mbpp", "task_id": "61", "prompt": "Write a python function to count the number of substrings with the sum of digits equal to their length.", "reference_code": "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count", "test_imports": [], "test_list": ["assert count_Substrings('112112') == 6", "assert count_Substrings('111') == 6", "assert count_Substrings('1101112') == 12"], "model_name": "openai/gpt-5", "generated_code": "def count_Substrings(s):\n    \"\"\"\n    Count the number of substrings where the sum of digits equals the length of the substring.\n    Works for a string of digits or an iterable of digit-like elements.\n    \"\"\"\n    # Initialize prefix sum and count map: sum 0 occurs once before processing any element\n    prefix_sum = 0\n    counts = {0: 1}\n    result = 0\n\n    # Helper to get digit value from element\n    def to_digit(x):\n        if isinstance(x, int):\n            return x\n        # assume string-like; take first character if string of length 1 (as in normal string iteration)\n        return ord(x) - 48  # faster than int(x) for single digit char '0'-'9'\n\n    for ch in s:\n        d = to_digit(ch)\n        prefix_sum += d - 1\n        result += counts.get(prefix_sum, 0)\n        counts[prefix_sum] = counts.get(prefix_sum, 0) + 1\n\n    return result"}
{"benchmark": "mbpp", "task_id": "59", "prompt": "Write a function to find the nth octagonal number.", "reference_code": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n ", "test_imports": [], "test_list": ["assert is_octagonal(5) == 65", "assert is_octagonal(10) == 280", "assert is_octagonal(15) == 645"], "model_name": "openai/gpt-5", "generated_code": "def is_octagonal(n: int) -> int:\n    \"\"\"\n    Return the nth octagonal number.\n\n    The nth octagonal number is given by the formula:\n    O(n) = n * (3n - 2)\n\n    Parameters:\n        n (int): The position (0-indexed allowed; typically positive integer).\n\n    Returns:\n        int: The nth octagonal number.\n\n    Raises:\n        TypeError: If n is not an integer.\n        ValueError: If n is negative.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    return n * (3 * n - 2)"}
{"benchmark": "mbpp", "task_id": "80", "prompt": "Write a function to find the nth tetrahedral number.", "reference_code": "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6", "test_imports": [], "test_list": ["assert tetrahedral_number(5) == 35", "assert tetrahedral_number(6) == 56", "assert tetrahedral_number(7) == 84"], "model_name": "openai/gpt-5", "generated_code": "def tetrahedral_number(n: int) -> int:\n    \"\"\"\n    Compute the nth tetrahedral number.\n\n    The nth tetrahedral number counts objects in a tetrahedron with n objects\n    on a side and is given by the formula:\n        T(n) = n * (n + 1) * (n + 2) // 6\n\n    Parameters:\n        n (int): The index (n >= 0).\n\n    Returns:\n        int: The nth tetrahedral number.\n\n    Raises:\n        TypeError: If n is not an integer (or integer-like float).\n        ValueError: If n is negative.\n    \"\"\"\n    if not isinstance(n, int):\n        if isinstance(n, float) and n.is_integer():\n            n = int(n)\n        else:\n            raise TypeError(\"n must be an integer\")\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    return n * (n + 1) * (n + 2) // 6"}
{"benchmark": "mbpp", "task_id": "96", "prompt": "Write a python function to find the number of divisors of a given integer.", "reference_code": "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x", "test_imports": [], "test_list": ["assert divisor(15) == 4", "assert divisor(12) == 6", "assert divisor(9) == 3"], "model_name": "openai/gpt-5", "generated_code": "from math import isqrt\n\ndef divisor(n):\n    \"\"\"\n    Return the number of positive divisors of the integer n.\n    For n == 0, returns 0 since zero has infinitely many divisors.\n    Negative numbers are treated by their absolute value.\n    \"\"\"\n    n = int(n)\n    if n == 0:\n        return 0\n    n = abs(n)\n    total = 0\n    root = isqrt(n)\n    for d in range(1, root + 1):\n        if n % d == 0:\n            total += 1 if d == n // d else 2\n    return total"}
{"benchmark": "mbpp", "task_id": "67", "prompt": "Write a function to find the number of ways to partition a set of Bell numbers.", "reference_code": "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] ", "test_imports": [], "test_list": ["assert bell_number(2)==2", "assert bell_number(10)==115975", "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"], "model_name": "openai/gpt-5", "generated_code": "from typing import List\n\ndef bell_number(n: int) -> int:\n    \"\"\"\n    Compute the nth Bell number, which counts the number of ways\n    to partition a set of n distinct elements into non-empty, unlabeled subsets.\n\n    Parameters:\n        n (int): The size of the set (must be a non-negative integer).\n\n    Returns:\n        int: The nth Bell number.\n\n    Raises:\n        TypeError: If n is not an integer.\n        ValueError: If n is negative.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n\n    if n == 0:\n        return 1\n\n    # Build Bell triangle where bell[i][0] = bell[i-1][i-1]\n    # and bell[i][j] = bell[i][j-1] + bell[i-1][j-1]\n    bell: List[List[int]] = [[0] * (i + 1) for i in range(n + 1)]\n    bell[0][0] = 1\n\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i][j - 1] + bell[i - 1][j - 1]\n\n    return bell[n][0]"}
{"benchmark": "mbpp", "task_id": "79", "prompt": "Write a python function to check whether the length of the word is odd or not.", "reference_code": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False", "test_imports": [], "test_list": ["assert word_len(\"Hadoop\") == False", "assert word_len(\"great\") == True", "assert word_len(\"structure\") == True"], "model_name": "openai/gpt-5", "generated_code": "def word_len(word):\n    \"\"\"\n    Check whether the length of the given word is odd.\n\n    Args:\n        word: A string whose length is to be checked.\n\n    Returns:\n        bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(word) % 2 == 1"}
{"benchmark": "mbpp", "task_id": "68", "prompt": "Write a python function to check whether the given array is monotonic or not.", "reference_code": "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ", "test_imports": [], "test_list": ["assert is_Monotonic([6, 5, 4, 4]) == True", "assert is_Monotonic([1, 2, 2, 3]) == True", "assert is_Monotonic([1, 3, 2]) == False"], "model_name": "openai/gpt-5", "generated_code": "def is_Monotonic(arr):\n    \"\"\"\n    Determine whether the given array is monotonic (entirely non-decreasing or non-increasing).\n    \n    Args:\n        arr (Sequence): A sequence of comparable elements.\n        \n    Returns:\n        bool: True if the array is monotonic, False otherwise.\n    \"\"\"\n    if arr is None:\n        return False\n    n = len(arr)\n    if n <= 2:\n        return True\n\n    increasing = None  # None until a direction is determined\n\n    for i in range(n - 1):\n        if arr[i] < arr[i + 1]:\n            if increasing is False:\n                return False\n            increasing = True\n        elif arr[i] > arr[i + 1]:\n            if increasing is True:\n                return False\n            increasing = False\n        # if equal, continue without changing direction\n\n    return True"}
{"benchmark": "mbpp", "task_id": "98", "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.", "reference_code": "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) ", "test_imports": ["import math"], "test_list": ["assert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)", "assert math.isclose(multiply_num((-10,-20,-30)), -2000.0, rel_tol=0.001)", "assert math.isclose(multiply_num((19,15,18)), 1710.0, rel_tol=0.001)"], "model_name": "openai/gpt-5", "generated_code": "from typing import Iterable, Union\n\nNumber = Union[int, float]\n\ndef multiply_num(numbers: Iterable[Number]) -> Number:\n    \"\"\"\n    Multiply all numbers in a list and divide by the length of the list.\n    Returns 0 if the list is empty.\n    \"\"\"\n    # Convert to list in case an iterable is passed\n    nums = list(numbers)\n    n = len(nums)\n    if n == 0:\n        return 0  # Avoid division by zero; conventionally return 0 for empty input\n\n    product = 1\n    for x in nums:\n        product *= x\n    return product / n"}
{"benchmark": "mbpp", "task_id": "63", "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.", "reference_code": "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) ", "test_imports": [], "test_list": ["assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7", "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15", "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"], "model_name": "openai/gpt-5", "generated_code": "from typing import Iterable, Tuple, Union\n\nNumber = Union[int, float]\n\ndef max_difference(pairs: Iterable[Tuple[Number, Number]]) -> Number:\n    \"\"\"\n    Find the maximum absolute difference between elements of each pair in the given iterable of 2-item tuples.\n    If no valid pairs are found, returns 0.\n    \"\"\"\n    max_diff = None\n    for pair in pairs:\n        # Ensure it's a 2-length iterable\n        try:\n            a, b = pair  # type: ignore\n        except Exception:\n            continue\n        try:\n            diff = abs(a - b)  # type: ignore\n        except Exception:\n            # Skip if subtraction isn't supported\n            continue\n        if max_diff is None or diff > max_diff:\n            max_diff = diff\n    return max_diff if max_diff is not None else 0"}
{"benchmark": "mbpp", "task_id": "99", "prompt": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.", "reference_code": "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") ", "test_imports": [], "test_list": ["assert decimal_to_binary(8) == '1000'", "assert decimal_to_binary(18) == '10010'", "assert decimal_to_binary(7) == '111'"], "model_name": "openai/gpt-5", "generated_code": "def decimal_to_binary(n):\n    \"\"\"\n    Convert a given integer in decimal (base-10) to its binary representation as a string\n    with no leading zeros. For zero, returns '0'. For negative numbers, returns the binary\n    of the absolute value prefixed with '-'.\n\n    Parameters:\n    n (int): The decimal integer to convert.\n\n    Returns:\n    str: The binary representation without leading zeros.\n    \"\"\"\n    # Handle boolean separately since bool is a subclass of int\n    if isinstance(n, bool):\n        n = int(n)\n    elif not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n\n    if n == 0:\n        return '0'\n\n    sign = ''\n    if n < 0:\n        sign = '-'\n        n = -n\n\n    bits = []\n    while n > 0:\n        bits.append('1' if (n & 1) else '0')\n        n >>= 1\n\n    return sign + ''.join(reversed(bits))"}
{"benchmark": "mbpp", "task_id": "71", "prompt": "Write a function to sort a list of elements.", "reference_code": "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums", "test_imports": [], "test_list": ["assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]", "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]", "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"], "model_name": "openai/gpt-5", "generated_code": "from typing import List, Iterable, TypeVar\n\nT = TypeVar(\"T\")\n\n\ndef comb_sort(some_list: Iterable[T]) -> List[T]:\n    \"\"\"\n    Sorts the given iterable using the comb sort algorithm and returns a new sorted list.\n    The original input is not modified (if it's a list).\n    \"\"\"\n    a = list(some_list)\n    n = len(a)\n    gap = n\n    shrink = 1.3\n    swapped = True\n\n    while gap > 1 or swapped:\n        # Update the gap for this pass\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n\n        swapped = False\n        # Compare and swap elements with current gap\n        for i in range(0, n - gap):\n            j = i + gap\n            if a[i] > a[j]:\n                a[i], a[j] = a[j], a[i]\n                swapped = True\n\n    return a"}
{"benchmark": "mbpp", "task_id": "56", "prompt": "Write a python function to check if a given number is one less than twice its reverse.", "reference_code": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ", "test_imports": [], "test_list": ["assert check(70) == False", "assert check(23) == False", "assert check(73) == True"], "model_name": "openai/gpt-5", "generated_code": "def check(n):\n    \"\"\"\n    Check if a given non-negative integer n is one less than twice its reverse.\n    Returns True if n == 2 * reverse(n) - 1, else False.\n    \"\"\"\n    if not isinstance(n, int):\n        return False\n    if n < 0:\n        return False\n\n    rev = 0\n    temp = n\n    while temp > 0:\n        rev = rev * 10 + (temp % 10)\n        temp //= 10\n\n    return n == (2 * rev - 1)"}
{"benchmark": "mbpp", "task_id": "11", "prompt": "Write a python function to remove first and last occurrence of a given character from the string.", "reference_code": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ", "test_imports": [], "test_list": ["assert remove_Occ(\"hello\",\"l\") == \"heo\"", "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"", "assert remove_Occ(\"PHP\",\"P\") == \"H\""], "model_name": "openai/gpt-5", "generated_code": "def remove_Occ(s, ch):\n    \"\"\"\n    Remove the first and last occurrence of the given character (or substring) 'ch' from string 's'.\n    If 'ch' occurs only once, remove that single occurrence.\n    If 'ch' does not occur or 'ch' is empty, return the original string.\n    \"\"\"\n    if not isinstance(s, str) or not isinstance(ch, str):\n        raise TypeError(\"Both s and ch must be strings.\")\n    if ch == \"\":\n        return s\n\n    first = s.find(ch)\n    if first == -1:\n        return s\n\n    last = s.rfind(ch)\n    len_ch = len(ch)\n\n    if first == last:\n        # Only one occurrence\n        return s[:first] + s[first + len_ch :]\n    else:\n        # Remove both first and last occurrences\n        return s[:first] + s[first + len_ch : last] + s[last + len_ch :]"}
{"benchmark": "mbpp", "task_id": "66", "prompt": "Write a python function to count the number of positive numbers in a list.", "reference_code": "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count ", "test_imports": [], "test_list": ["assert pos_count([1,-2,3,-4]) == 2", "assert pos_count([3,4,5,-1]) == 3", "assert pos_count([1,2,3,4]) == 4"], "model_name": "openai/gpt-5", "generated_code": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers (> 0) in the given list or iterable.\n    - Zero is not considered positive.\n    - Booleans are not counted.\n    - Non-numeric items that cannot be compared to 0 are ignored.\n    \"\"\"\n    count = 0\n    for x in lst:\n        # Exclude boolean values (since bool is a subclass of int)\n        if isinstance(x, bool):\n            continue\n        try:\n            if x > 0:\n                count += 1\n        except Exception:\n            # Ignore elements that cannot be compared to 0\n            continue\n    return count"}
{"benchmark": "mbpp", "task_id": "20", "prompt": "Write a function to check if the given number is woodball or not.", "reference_code": "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False", "test_imports": [], "test_list": ["assert is_woodall(383) == True", "assert is_woodall(254) == False", "assert is_woodall(200) == False"], "model_name": "openai/gpt-5", "generated_code": "def is_woodall(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a Woodall number.\n    A Woodall number has the form k*2^k - 1 for some integer k >= 1.\n    \"\"\"\n    if not isinstance(n, int):\n        # Attempt safe coercion for numeric types that are integral in value\n        try:\n            if int(n) != n:\n                return False\n            n = int(n)\n        except Exception:\n            return False\n\n    if n < 1:\n        return False\n\n    k = 1\n    pow2 = 2  # 2^1\n    while True:\n        val = k * pow2 - 1\n        if val == n:\n            return True\n        if val > n:\n            return False\n        k += 1\n        pow2 <<= 1  # multiply by 2"}
{"benchmark": "mbpp", "task_id": "101", "prompt": "Write a function to find the kth element in the given array using 1-based indexing.", "reference_code": "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]", "test_imports": [], "test_list": ["assert kth_element([12,3,5,7,19], 2) == 3", "assert kth_element([17,24,8,23], 3) == 8", "assert kth_element([16,21,25,36,4], 4) == 36"], "model_name": "openai/gpt-5", "generated_code": "from typing import Any, Sequence, Optional\n\ndef kth_element(arr: Sequence[Any], k: int) -> Optional[Any]:\n    \"\"\"\n    Return the k-th element of the given array using 1-based indexing.\n    If k is out of bounds or invalid, return None.\n    \"\"\"\n    if arr is None:\n        return None\n    if not isinstance(k, int):\n        return None\n    if k < 1 or k > len(arr):\n        return None\n    return arr[k - 1]"}
{"benchmark": "mbpp", "task_id": "87", "prompt": "Write a function to merge three dictionaries into a single dictionary.", "reference_code": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict", "test_imports": [], "test_list": ["assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}", "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}", "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"], "model_name": "openai/gpt-5", "generated_code": "from collections.abc import Mapping\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \n    Later dictionaries override keys from earlier ones.\n    Accepts Mapping objects or iterables of (key, value) pairs.\n    \n    Parameters:\n        dict1, dict2, dict3: Mappings or iterables of key-value pairs. None is ignored.\n    \n    Returns:\n        dict: A new dictionary containing merged key-value pairs.\n    \"\"\"\n    result = {}\n    for d in (dict1, dict2, dict3):\n        if d is None:\n            continue\n        if isinstance(d, Mapping):\n            result.update(d)\n        else:\n            try:\n                result.update(dict(d))\n            except Exception as exc:\n                raise TypeError(\n                    \"All inputs must be mappings or iterables of (key, value) pairs, or None.\"\n                ) from exc\n    return result"}
{"benchmark": "mbpp", "task_id": "105", "prompt": "Write a python function to count true booleans in the given list.", "reference_code": "def count(lst):   \n    return sum(lst) ", "test_imports": [], "test_list": ["assert count([True,False,True]) == 2", "assert count([False,False]) == 0", "assert count([True,True,True]) == 3"], "model_name": "openai/gpt-5", "generated_code": "def count(items):\n    \"\"\"\n    Count the number of True boolean values in the given iterable.\n\n    Only counts elements that are exactly the boolean True (not other truthy values).\n    \"\"\"\n    if items is None:\n        return 0\n    total = 0\n    for x in items:\n        if x is True:\n            total += 1\n    return total"}
{"benchmark": "mbpp", "task_id": "85", "prompt": "Write a function to find the surface area of a sphere.", "reference_code": "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea", "test_imports": ["import math"], "test_list": ["assert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)", "assert math.isclose(surfacearea_sphere(15), 2827.4333882308138, rel_tol=0.001)", "assert math.isclose(surfacearea_sphere(20), 5026.548245743669, rel_tol=0.001)"], "model_name": "openai/gpt-5", "generated_code": "import math\n\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere given its radius.\n\n    Parameters:\n    radius (float or int): The radius of the sphere.\n\n    Returns:\n    float: The surface area of the sphere.\n    \"\"\"\n    return 4.0 * math.pi * (radius ** 2)"}
{"benchmark": "mbpp", "task_id": "12", "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "reference_code": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result", "test_imports": [], "test_list": ["assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"], "model_name": "openai/gpt-5", "generated_code": "def sort_matrix(matrix):\n    \"\"\"\n    Sort a matrix (list of rows) in ascending order based on the sum of each row.\n    Returns a new list without modifying the input.\n    \"\"\"\n    if matrix is None:\n        return []\n    return sorted(matrix, key=lambda row: sum(row))"}
{"benchmark": "mbpp", "task_id": "118", "prompt": "Write a function to convert a string to a list of strings split on the space character.", "reference_code": "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst", "test_imports": [], "test_list": ["assert string_to_list(\"python programming\")==['python','programming']", "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']", "assert string_to_list(\"write a program\")==['write','a','program']"], "model_name": "openai/gpt-5", "generated_code": "def string_to_list(s):\n    \"\"\"\n    Convert a string to a list of strings split on the space character.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        list[str]: List of substrings split by the space character.\n    \"\"\"\n    return s.split(' ')"}
{"benchmark": "mbpp", "task_id": "128", "prompt": "Write a function to find words that are longer than n characters from a given list of words.", "reference_code": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t", "test_imports": [], "test_list": ["assert long_words(3,\"python is a programming language\")==['python','programming','language']", "assert long_words(2,\"writing a program\")==['writing','program']", "assert long_words(5,\"sorting list\")==['sorting']"], "model_name": "openai/gpt-5", "generated_code": "def long_words(words, n):\n    \"\"\"\n    Return a list of words from the input iterable that are longer than n characters.\n\n    Parameters:\n    - words: iterable of strings\n    - n: int, threshold length\n\n    Returns:\n    - list of strings with length > n\n    \"\"\"\n    if words is None:\n        return []\n    try:\n        return [w for w in words if isinstance(w, str) and len(w) > n]\n    except TypeError:\n        # If 'words' is not iterable, return empty list\n        return []"}
{"benchmark": "mbpp", "task_id": "93", "prompt": "Write a function to calculate the value of 'a' to the power 'b'.", "reference_code": "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)", "test_imports": [], "test_list": ["assert power(3,4) == 81", "assert power(2,3) == 8", "assert power(5,5) == 3125"], "model_name": "openai/gpt-5", "generated_code": "def power(a, b):\n    \"\"\"\n    Calculate and return a raised to the power of b.\n\n    Supports numeric types such as int, float, Decimal, Fraction, and complex.\n    \"\"\"\n    return pow(a, b)"}
{"benchmark": "mbpp", "task_id": "91", "prompt": "Write a function to check if a string is present as a substring in a given list of string values.", "reference_code": "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False", "test_imports": [], "test_list": ["assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True", "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False", "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"], "model_name": "openai/gpt-5", "generated_code": "def find_substring(string_list, substr):\n    \"\"\"\n    Check if 'substr' is present as a substring in any string within 'string_list'.\n\n    Args:\n        string_list (list): List of string values to search within.\n        substr (str): The substring to search for.\n\n    Returns:\n        bool: True if 'substr' is found in any element of 'string_list', otherwise False.\n    \"\"\"\n    if not string_list:\n        return False\n    return any(isinstance(item, str) and substr in item for item in string_list)"}
{"benchmark": "mbpp", "task_id": "94", "prompt": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.", "reference_code": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) ", "test_imports": [], "test_list": ["assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'", "assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'", "assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"], "model_name": "openai/gpt-5", "generated_code": "def index_minimum(tuples_list):\n    \"\"\"\n    Return the first element of the tuple that has the smallest second element.\n    If the list is empty or contains no tuples with at least two elements, return None.\n    \"\"\"\n    found = False\n    min_second = None\n    min_first = None\n\n    for t in tuples_list:\n        # Safely attempt to access first and second elements\n        try:\n            first = t[0]\n            second = t[1]\n        except Exception:\n            continue  # Skip invalid items\n\n        if not found:\n            min_second = second\n            min_first = first\n            found = True\n        else:\n            try:\n                if second < min_second:\n                    min_second = second\n                    min_first = first\n            except Exception:\n                # If values are incomparable, skip\n                continue\n\n    return min_first if found else None"}
{"benchmark": "mbpp", "task_id": "115", "prompt": "Write a function to check whether all dictionaries in a list are empty or not.", "reference_code": "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit", "test_imports": [], "test_list": ["assert empty_dit([{},{},{}])==True", "assert empty_dit([{1,2},{},{}])==False", "assert empty_dit({})==True"], "model_name": "openai/gpt-5", "generated_code": "def empty_dit(lst):\n    \"\"\"\n    Check whether all dictionaries in a list are empty.\n\n    Args:\n        lst (list): A list expected to contain dictionaries.\n\n    Returns:\n        bool: True if every element is a dictionary and is empty ({}), False otherwise.\n              For an empty list, returns True.\n    \"\"\"\n    return all(isinstance(d, dict) and not d for d in lst)"}
{"benchmark": "mbpp", "task_id": "65", "prompt": "Write a function to flatten a list and sum all of its elements.", "reference_code": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total", "test_imports": [], "test_list": ["assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21", "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106", "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"], "model_name": "openai/gpt-5", "generated_code": "def recursive_list_sum(data):\n    \"\"\"\n    Recursively flattens a nested list (or tuple) and returns the sum of all elements.\n    Assumes non-numeric elements are not present; will raise TypeError if encountered.\n    \"\"\"\n    if isinstance(data, (list, tuple)):\n        total = 0\n        for item in data:\n            total += recursive_list_sum(item)\n        return total\n    return data"}
{"benchmark": "mbpp", "task_id": "124", "prompt": "Write a function to get the angle of a complex number.", "reference_code": "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle", "test_imports": ["import math"], "test_list": ["assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)", "assert math.isclose(angle_complex(2,1j), 0.4636476090008061, rel_tol=0.001)", "assert math.isclose(angle_complex(0,2j), 1.5707963267948966, rel_tol=0.001)"], "model_name": "openai/gpt-5", "generated_code": "def angle_complex(z):\n    \"\"\"\n    Return the argument (phase) of a complex number in radians.\n\n    Parameters:\n        z: A value convertible to a complex number (e.g., complex, int, float, Decimal, Fraction).\n\n    Returns:\n        float: The angle in radians in the range [-pi, pi].\n\n    Raises:\n        TypeError: If the input cannot be converted to a complex number.\n    \"\"\"\n    import cmath\n    try:\n        c = complex(z)\n    except Exception as exc:\n        raise TypeError(\"angle_complex expects a value convertible to complex.\") from exc\n    return cmath.phase(c)"}
{"benchmark": "mbpp", "task_id": "104", "prompt": "Write a function to sort each sublist of strings in a given list of lists.", "reference_code": "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n", "test_imports": [], "test_list": ["assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]", "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]", "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"], "model_name": "openai/gpt-5", "generated_code": "from typing import List, Optional\n\n\ndef sort_sublists(list_of_lists: Optional[List[Optional[List[str]]]]) -> List[List[str]]:\n    \"\"\"\n    Sort each sublist of strings in ascending lexicographical order.\n    Returns a new list without modifying the input.\n\n    - If list_of_lists is None, returns an empty list.\n    - If a sublist is None, it is treated as an empty list.\n    \"\"\"\n    if list_of_lists is None:\n        return []\n    result: List[List[str]] = []\n    for sublist in list_of_lists:\n        if sublist is None:\n            result.append([])\n        else:\n            result.append(sorted(sublist))\n    return result"}
{"benchmark": "mbpp", "task_id": "131", "prompt": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).", "reference_code": "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string", "test_imports": [], "test_list": ["assert reverse_vowels(\"Python\") == \"Python\"", "assert reverse_vowels(\"USA\") == \"ASU\"", "assert reverse_vowels(\"ab\") == \"ab\""], "model_name": "openai/gpt-5", "generated_code": "def reverse_vowels(s: str) -> str:\n    \"\"\"\n    Reverse only the vowels in the given string. 'y' is not considered a vowel.\n    Vowels considered: a, e, i, o, u (both lowercase and uppercase).\n    \"\"\"\n    if not isinstance(s, str) or len(s) <= 1:\n        return s\n\n    vowels = set(\"aeiouAEIOU\")\n    chars = list(s)\n    i, j = 0, len(chars) - 1\n\n    while i < j:\n        while i < j and chars[i] not in vowels:\n            i += 1\n        while i < j and chars[j] not in vowels:\n            j -= 1\n        if i < j:\n            chars[i], chars[j] = chars[j], chars[i]\n            i += 1\n            j -= 1\n\n    return \"\".join(chars)"}
{"benchmark": "mbpp", "task_id": "89", "prompt": "Write a function to find the closest smaller number than n.", "reference_code": "def closest_num(N):\n  return (N - 1)", "test_imports": [], "test_list": ["assert closest_num(11) == 10", "assert closest_num(7) == 6", "assert closest_num(12) == 11"], "model_name": "openai/gpt-5", "generated_code": "def closest_num(n):\n    \"\"\"\n    Return the closest smaller number than n.\n    For numeric inputs, this is simply n - 1.\n    \"\"\"\n    try:\n        return n - 1\n    except Exception as e:\n        raise TypeError(\"closest_num expects a numeric value\") from e"}
{"benchmark": "mbpp", "task_id": "116", "prompt": "Write a function to convert a given tuple of positive integers into a single integer.", "reference_code": "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result", "test_imports": [], "test_list": ["assert tuple_to_int((1,2,3))==123", "assert tuple_to_int((4,5,6))==456", "assert tuple_to_int((5,6,7))==567"], "model_name": "openai/gpt-5", "generated_code": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a tuple of positive (or zero) integers into a single integer by concatenating\n    their decimal representations.\n\n    Examples:\n    - (1, 2, 3) -> 123\n    - (12, 3, 4) -> 1234\n    - () -> 0\n\n    Raises:\n    - TypeError: if input is not a tuple or elements are not integers.\n    - ValueError: if any integer is negative.\n    \"\"\"\n    if not isinstance(nums, tuple):\n        raise TypeError(\"Input must be a tuple of integers\")\n    if not nums:\n        return 0\n\n    parts = []\n    for n in nums:\n        if not isinstance(n, int):\n            raise TypeError(\"All elements must be integers\")\n        if n < 0:\n            raise ValueError(\"All integers must be non-negative\")\n        parts.append(str(n))\n\n    return int(\"\".join(parts)) if parts else 0"}
{"benchmark": "mbpp", "task_id": "88", "prompt": "Write a function to get the frequency of all the elements in a list, returned as a dictionary.", "reference_code": "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count", "test_imports": [], "test_list": ["assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})", "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})", "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})"], "model_name": "openai/gpt-5", "generated_code": "def freq_count(lst):\n    \"\"\"\n    Return a dictionary with the frequency count of each element in the given list.\n    If an element is unhashable (e.g., list, dict), its string representation is used as the key.\n\n    Parameters:\n        lst (list): The list of elements to count.\n\n    Returns:\n        dict: A dictionary mapping elements (or their string representations) to their counts.\n    \"\"\"\n    freq = {}\n    for item in lst:\n        try:\n            freq[item] = freq.get(item, 0) + 1\n        except TypeError:\n            # Fallback for unhashable elements: use their string representation as key\n            key = repr(item)\n            freq[key] = freq.get(key, 0) + 1\n    return freq"}
{"benchmark": "mbpp", "task_id": "102", "prompt": "Write a function to convert a snake case string to camel case string.", "reference_code": "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))", "test_imports": [], "test_list": ["assert snake_to_camel('python_program')=='PythonProgram'", "assert snake_to_camel('python_language')==('PythonLanguage')", "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"], "model_name": "openai/gpt-5", "generated_code": "def snake_to_camel(s: str) -> str:\n    \"\"\"\n    Convert a snake_case string to camelCase.\n\n    Rules:\n    - Consecutive underscores are treated as a single separator.\n    - Leading/trailing underscores are ignored.\n    - First token is fully lowercased.\n    - Subsequent tokens are capitalized (first letter upper, the rest lower).\n\n    Examples:\n    - \"hello_world\" -> \"helloWorld\"\n    - \"hello__world\" -> \"helloWorld\"\n    - \"_private_var\" -> \"privateVar\"\n    - \"HTTP_response_code\" -> \"httpResponseCode\"\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"snake_to_camel expects a string input\")\n\n    # Split by underscores and remove empty tokens (handles multiple/leading/trailing underscores)\n    tokens = [t for t in s.strip().split('_') if t != '']\n    if not tokens:\n        return \"\"\n\n    first = tokens[0].lower()\n    others = [(t[:1].upper() + t[1:].lower()) if t else '' for t in tokens[1:]]\n    return first + \"\".join(others)"}
{"benchmark": "mbpp", "task_id": "74", "prompt": "Write a function to check whether it follows the sequence given in the patterns array.", "reference_code": "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True", "test_imports": [], "test_list": ["assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True", "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False", "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False"], "model_name": "openai/gpt-5", "generated_code": ""}
{"benchmark": "mbpp", "task_id": "97", "prompt": "Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.", "reference_code": "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n", "test_imports": [], "test_list": ["assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}", "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}", "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"], "model_name": "openai/gpt-5", "generated_code": "from typing import Any, Dict, Iterable\n\ndef frequency_lists(list_of_lists: Iterable) -> Dict[Any, int]:\n    \"\"\"\n    Compute the frequency of each element in a flattened list of lists.\n    If the input contains non-iterable items at the top level, those are counted directly.\n\n    Args:\n        list_of_lists: An iterable expected to contain lists/tuples of elements.\n\n    Returns:\n        A dictionary mapping each element to its frequency count.\n    \"\"\"\n    counts: Dict[Any, int] = {}\n\n    if list_of_lists is None:\n        return counts\n\n    for sub in list_of_lists:\n        if isinstance(sub, (list, tuple)):\n            for item in sub:\n                counts[item] = counts.get(item, 0) + 1\n        else:\n            # In case the input is already flat or contains non-list items at the top level\n            counts[sub] = counts.get(sub, 0) + 1\n\n    return counts"}
{"benchmark": "mbpp", "task_id": "92", "prompt": "Write a function to check whether the given number is undulating or not.", "reference_code": "def is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True", "test_imports": [], "test_list": ["assert is_undulating(1212121) == True", "assert is_undulating(1991) == False", "assert is_undulating(121) == True"], "model_name": "openai/gpt-5", "generated_code": "def is_undulating(n):\n    \"\"\"\n    Check if a number is undulating.\n    An undulating number has at least 3 digits and alternates between two distinct digits: ABAB... (starting with A),\n    where A != B. Examples: 121, 2323, 10101. Non-examples: 11, 333, 1001.\n\n    Accepts integers or strings representing non-negative integers (optionally with a leading sign).\n    \"\"\"\n    # Convert input to string representation of its absolute value (if numeric-like)\n    s = str(n).strip()\n    if not s:\n        return False\n\n    # Handle optional sign\n    if s[0] in \"+-\":\n        s = s[1:]\n\n    # Ensure only digits remain\n    if not s.isdigit():\n        return False\n\n    # Must have at least 3 digits\n    if len(s) < 3:\n        return False\n\n    a, b = s[0], s[1]\n\n    # The two alternating digits must be different\n    if a == b:\n        return False\n\n    # Check the alternating pattern ABAB...\n    for i, ch in enumerate(s):\n        expected = a if (i % 2 == 0) else b\n        if ch != expected:\n            return False\n\n    return True"}
{"benchmark": "mbpp", "task_id": "127", "prompt": "Write a function to multiply two integers.", "reference_code": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)", "test_imports": [], "test_list": ["assert multiply_int(10,20)==200", "assert multiply_int(5,10)==50", "assert multiply_int(4,8)==32"], "model_name": "openai/gpt-5", "generated_code": "def multiply_int(a: int, b: int) -> int:\n    \"\"\"\n    Multiply two integers and return the product.\n\n    Parameters:\n    - a (int): First integer.\n    - b (int): Second integer.\n\n    Returns:\n    - int: The product of a and b.\n    \"\"\"\n    return a * b"}
{"benchmark": "mbpp", "task_id": "108", "prompt": "Write a function to merge three lists into a single sorted list.", "reference_code": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)", "test_imports": [], "test_list": ["assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]", "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]", "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"], "model_name": "openai/gpt-5", "generated_code": "def merge_sorted_list(list1, list2, list3):\n    \"\"\"\n    Merge three lists into a single sorted list.\n\n    Args:\n        list1 (list): First list.\n        list2 (list): Second list.\n        list3 (list): Third list.\n\n    Returns:\n        list: A new list containing all elements from the three lists, sorted in ascending order.\n    \"\"\"\n    return sorted(list1 + list2 + list3)"}
{"benchmark": "mbpp", "task_id": "77", "prompt": "Write a python function to find whether a number is divisible by 11.", "reference_code": "def is_Diff(n): \n    return (n % 11 == 0) ", "test_imports": [], "test_list": ["assert is_Diff (12345) == False", "assert is_Diff(1212112) == True", "assert is_Diff(1212) == False"], "model_name": "openai/gpt-5", "generated_code": "def is_Diff(n):\n    \"\"\"\n    Determine whether a number is divisible by 11.\n    Accepts an int or a string representation of an integer (optionally with a leading '+' or '-').\n    Returns True if divisible by 11, else False.\n    \"\"\"\n    # Convert input to string and normalize\n    if isinstance(n, int):\n        s = str(n)\n    elif isinstance(n, str):\n        s = n.strip()\n    else:\n        # Unsupported type\n        return False\n\n    # Handle sign\n    if s.startswith(('+', '-')):\n        s_digits = s[1:]\n    else:\n        s_digits = s\n\n    # Validate digits\n    if not s_digits or not s_digits.isdigit():\n        return False\n\n    # Rule: Alternating sum of digits is divisible by 11 iff the number is divisible by 11\n    total = 0\n    sign = 1  # +1 for first digit, then alternates\n    for ch in s_digits:\n        total += sign * (ord(ch) - 48)  # faster int conversion for single digit\n        sign = -sign\n\n    return total % 11 == 0"}
{"benchmark": "mbpp", "task_id": "132", "prompt": "Write a function to convert a tuple to a string.", "reference_code": "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str", "test_imports": [], "test_list": ["assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")", "assert tup_string(('p','y','t','h','o','n'))==(\"python\")", "assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"], "model_name": "openai/gpt-5", "generated_code": "def tup_string(tup):\n    \"\"\"\n    Convert a tuple to a string by concatenating the string representations\n    of its elements in order.\n\n    Examples:\n    - ('a', 'b', 'c') -> 'abc'\n    - (1, 2, 3) -> '123'\n    - () -> ''\n    \"\"\"\n    return \"\".join(str(item) for item in tup)"}
{"benchmark": "mbpp", "task_id": "126", "prompt": "Write a python function to find the sum of common divisors of two given numbers.", "reference_code": "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum", "test_imports": [], "test_list": ["assert sum(10,15) == 6", "assert sum(100,150) == 93", "assert sum(4,6) == 3"], "model_name": "openai/gpt-5", "generated_code": "def sum(a, b):\n    \"\"\"\n    Return the sum of common positive divisors of two given numbers.\n    \"\"\"\n    import math\n\n    try:\n        a_int = int(a)\n        b_int = int(b)\n    except Exception as e:\n        raise TypeError(\"Arguments must be integers\") from e\n\n    g = math.gcd(abs(a_int), abs(b_int))\n\n    if g <= 1:\n        # If gcd is 0, the sum is 0 (edge case); if gcd is 1, sum of divisors is 1.\n        return g\n\n    total = 0\n    i = 1\n    r = int(g ** 0.5)\n    while i <= r:\n        if g % i == 0:\n            total += i\n            j = g // i\n            if j != i:\n                total += j\n        i += 1\n    return total"}
{"benchmark": "mbpp", "task_id": "140", "prompt": "Write a function to flatten the list of lists into a single set of numbers.", "reference_code": "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) ", "test_imports": [], "test_list": ["assert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])", "assert set(extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)])) == set([1, 2, 3, 4, 7, 8])", "assert set(extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)])) == set([7, 8, 9, 10, 11, 12])"], "model_name": "openai/gpt-5", "generated_code": "from typing import Any, Set\n\ndef extract_singly(nested: Any) -> Set[float]:\n    \"\"\"\n    Flatten a (possibly nested) list/tuple/set of lists into a single set of numbers.\n    - Accepts nested lists/tuples/sets.\n    - Ignores non-numeric and bool values.\n    - Returns a set of ints/floats found.\n    \"\"\"\n    result: Set[float] = set()\n\n    def _flatten(item: Any) -> None:\n        if isinstance(item, (list, tuple, set)):\n            for sub in item:\n                _flatten(sub)\n        else:\n            # Exclude booleans (as they are subclasses of int)\n            if isinstance(item, bool):\n                return\n            if isinstance(item, (int, float)):\n                result.add(item)\n\n    _flatten(nested)\n    return result"}
{"benchmark": "mbpp", "task_id": "142", "prompt": "Write a function to count number items that are identical in the same position of three given lists.", "reference_code": "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result", "test_imports": [], "test_list": ["assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3", "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4", "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"], "model_name": "openai/gpt-5", "generated_code": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Count the number of positions where the corresponding elements of three lists are identical.\n    \n    Args:\n        list1: First list.\n        list2: Second list.\n        list3: Third list.\n        \n    Returns:\n        int: Number of indices i such that list1[i] == list2[i] == list3[i].\n             Comparison is made up to the shortest list length.\n    \"\"\"\n    count = 0\n    for x, y, z in zip(list1, list2, list3):\n        if x == y == z:\n            count += 1\n    return count"}
{"benchmark": "mbpp", "task_id": "141", "prompt": "Write a function to sort a list of elements.", "reference_code": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums", "test_imports": [], "test_list": ["assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]", "assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]", "assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"], "model_name": "openai/gpt-5", "generated_code": "from typing import Iterable, List, TypeVar\n\nT = TypeVar(\"T\")\n\ndef pancake_sort(items: Iterable[T]) -> List[T]:\n    \"\"\"\n    Sorts the given iterable using the Pancake Sort algorithm and returns a new sorted list.\n    The original iterable is not modified.\n\n    Args:\n        items: An iterable of comparable elements.\n\n    Returns:\n        A new list containing the sorted elements in non-decreasing order.\n    \"\"\"\n    arr = list(items)  # Work on a copy to avoid modifying the original input\n\n    def flip(a: List[T], k: int) -> None:\n        # Reverse the first k elements in-place\n        i, j = 0, k - 1\n        while i < j:\n            a[i], a[j] = a[j], a[i]\n            i += 1\n            j -= 1\n\n    n = len(arr)\n    # Perform pancake sort\n    for curr_size in range(n, 1, -1):\n        # Find index of the maximum element in arr[0:curr_size]\n        max_idx = 0\n        for i in range(1, curr_size):\n            if arr[i] > arr[max_idx]:\n                max_idx = i\n\n        # Move max element to end of current subarray if it's not already there\n        if max_idx != curr_size - 1:\n            # Bring max element to front if it's not already at position 0\n            if max_idx != 0:\n                flip(arr, max_idx + 1)\n            # Move it to its correct position at curr_size - 1\n            flip(arr, curr_size)\n\n    return arr"}
{"benchmark": "mbpp", "task_id": "135", "prompt": "Write a function to find the nth hexagonal number.", "reference_code": "def hexagonal_num(n): \n\treturn n*(2*n - 1) ", "test_imports": [], "test_list": ["assert hexagonal_num(10) == 190", "assert hexagonal_num(5) == 45", "assert hexagonal_num(7) == 91"], "model_name": "openai/gpt-5", "generated_code": "def hexagonal_num(n: int) -> int:\n    \"\"\"\n    Compute the nth hexagonal number.\n\n    The nth hexagonal number is given by the formula:\n        H_n = n * (2n - 1)\n\n    Parameters:\n        n (int): The index (n >= 0).\n\n    Returns:\n        int: The nth hexagonal number.\n\n    Raises:\n        TypeError: If n is not an integer.\n        ValueError: If n is negative.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    return n * (2 * n - 1)"}
{"benchmark": "mbpp", "task_id": "137", "prompt": "Write a function to find the ratio of zeroes to non-zeroes in an array of integers.", "reference_code": "from array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)", "test_imports": ["import math"], "test_list": ["assert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)", "assert math.isclose(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.00, rel_tol=0.001)", "assert math.isclose(zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.00, rel_tol=0.001)"], "model_name": "openai/gpt-5", "generated_code": "from typing import Iterable, Union\n\ndef zero_count(arr: Iterable[int]) -> float:\n    \"\"\"\n    Compute the ratio of zeroes to non-zeroes in an iterable of integers.\n    \n    - Returns zeros / nonzeros as a float.\n    - If there are no non-zero elements:\n        - returns float('inf') if there is at least one zero,\n        - returns 0.0 if the iterable is empty (no zeros and no non-zeros).\n    \"\"\"\n    zeros = 0\n    nonzeros = 0\n    for x in arr:\n        if x == 0:\n            zeros += 1\n        else:\n            nonzeros += 1\n\n    if nonzeros == 0:\n        return float('inf') if zeros > 0 else 0.0\n    return zeros / nonzeros"}
{"benchmark": "mbpp", "task_id": "119", "prompt": "Write a python function to find the element that appears only once in a sorted array.", "reference_code": "def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)", "test_imports": [], "test_list": ["assert search([1,1,2,2,3]) == 3", "assert search([1,1,3,3,4,4,5,5,7,7,8]) == 8", "assert search([1,2,2,3,3,4,4]) == 1"], "model_name": "openai/gpt-5", "generated_code": "def search(arr, n=None):\n    \"\"\"\n    Find the element that appears only once in a sorted array where every other element appears exactly twice.\n    Supports being called as search(arr) or search(arr, n).\n    \"\"\"\n    if n is None:\n        n = len(arr)\n    if n == 0:\n        return None\n    l, r = 0, n - 1\n    while l < r:\n        mid = (l + r) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if mid + 1 < n and arr[mid] == arr[mid + 1]:\n            l = mid + 2\n        else:\n            r = mid\n    return arr[l]"}
{"benchmark": "mbpp", "task_id": "86", "prompt": "Write a function to find nth centered hexagonal number.", "reference_code": "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1", "test_imports": [], "test_list": ["assert centered_hexagonal_number(10) == 271", "assert centered_hexagonal_number(2) == 7", "assert centered_hexagonal_number(9) == 217"], "model_name": "openai/gpt-5", "generated_code": "from operator import index as _index\n\ndef centered_hexagonal_number(n):\n    \"\"\"\n    Compute the n-th centered hexagonal number.\n\n    Uses the formula: H(n) = 3*n*(n - 1) + 1\n    This yields the sequence: 1, 7, 19, 37, 61, ... for n = 1, 2, 3, ...\n\n    Accepts any integer-like value (supports objects with __index__).\n    Raises:\n        TypeError: if n is not an integer.\n        ValueError: if n is negative.\n    \"\"\"\n    try:\n        n = _index(n)\n    except TypeError:\n        raise TypeError(\"n must be an integer\") from None\n\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n\n    return 3 * n * (n - 1) + 1"}
{"benchmark": "mbpp", "task_id": "90", "prompt": "Write a python function to find the length of the longest word.", "reference_code": "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max", "test_imports": [], "test_list": ["assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7", "assert len_log([\"a\",\"ab\",\"abc\"]) == 3", "assert len_log([\"small\",\"big\",\"tall\"]) == 5"], "model_name": "openai/gpt-5", "generated_code": "import re\nfrom collections.abc import Iterable\n\ndef len_log(text):\n    \"\"\"\n    Return the length of the longest word.\n    - If 'text' is a string, words are sequences of alphabetic characters (A-Z, a-z).\n    - If 'text' is an iterable of items, words are extracted from each item's string form.\n    - Returns 0 if no words are found.\n    \"\"\"\n    word_pattern = re.compile(r\"[A-Za-z]+\")\n    \n    if isinstance(text, str):\n        words = word_pattern.findall(text)\n        return max((len(w) for w in words), default=0)\n    \n    # If it's an iterable (but not a string), aggregate words from its elements\n    if isinstance(text, Iterable):\n        max_len = 0\n        for item in text:\n            for w in word_pattern.findall(str(item)):\n                lw = len(w)\n                if lw > max_len:\n                    max_len = lw\n        return max_len\n    \n    # Fallback: treat as string\n    words = word_pattern.findall(str(text))\n    return max((len(w) for w in words), default=0)"}
{"benchmark": "mbpp", "task_id": "133", "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers.", "reference_code": "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)", "test_imports": [], "test_list": ["assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32", "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52", "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"], "model_name": "openai/gpt-5", "generated_code": "from numbers import Real\n\ndef sum_negativenum(numbers):\n    \"\"\"\n    Calculate the sum of negative numbers in the given iterable.\n    Non-numeric values and booleans are ignored. If input is None or non-iterable, returns 0.\n    \"\"\"\n    try:\n        return sum(x for x in numbers if isinstance(x, Real) and not isinstance(x, bool) and x < 0)\n    except TypeError:\n        # Handles cases where 'numbers' is None or not iterable\n        return 0"}
{"benchmark": "mbpp", "task_id": "145", "prompt": "Write a python function to find the maximum difference between any two elements in a given array.", "reference_code": "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) ", "test_imports": [], "test_list": ["assert max_Abs_Diff((2,1,5,3)) == 4", "assert max_Abs_Diff((9,3,2,5,1)) == 8", "assert max_Abs_Diff((3,2,1)) == 2"], "model_name": "openai/gpt-5", "generated_code": "def max_Abs_Diff(arr):\n    \"\"\"\n    Return the maximum absolute difference between any two elements in the given array.\n    If the array has fewer than 2 elements, returns 0.\n    \"\"\"\n    it = iter(arr)\n    try:\n        first = next(it)\n    except StopIteration:\n        return 0\n\n    min_v = first\n    max_v = first\n\n    for x in it:\n        if x < min_v:\n            min_v = x\n        elif x > max_v:\n            max_v = x\n\n    return abs(max_v - min_v)"}
{"benchmark": "mbpp", "task_id": "163", "prompt": "Write a function to calculate the area of a regular polygon given the length and number of its sides.", "reference_code": "from math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area", "test_imports": ["import math"], "test_list": ["assert math.isclose(area_polygon(4, 20), 400., rel_tol=0.001)", "assert math.isclose(area_polygon(10, 15), 1731.197, rel_tol=0.001)", "assert math.isclose(area_polygon(9, 7), 302.909, rel_tol=0.001)"], "model_name": "openai/gpt-5", "generated_code": "import math\nfrom typing import Union\n\ndef area_polygon(length: Union[int, float], sides: int) -> float:\n    \"\"\"\n    Calculate the area of a regular polygon.\n\n    Parameters:\n        length (int | float): Length of each side (must be > 0).\n        sides (int): Number of sides of the polygon (must be >= 3).\n\n    Returns:\n        float: The area of the regular polygon. Returns 0.0 for invalid inputs.\n    \"\"\"\n    # Basic validation\n    if not isinstance(sides, int) or sides < 3:\n        return 0.0\n    try:\n        s = float(length)\n    except (TypeError, ValueError):\n        return 0.0\n    if s <= 0:\n        return 0.0\n\n    # Area formula: (n * s^2) / (4 * tan(pi / n))\n    angle = math.pi / sides\n    tan_value = math.tan(angle)\n    if tan_value == 0:\n        return 0.0  # Avoid division by zero in pathological cases\n\n    return (sides * s * s) / (4.0 * tan_value)"}
{"benchmark": "mbpp", "task_id": "106", "prompt": "Write a function to append the given list to the given tuples.", "reference_code": "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) ", "test_imports": [], "test_list": ["assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)", "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)", "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"], "model_name": "openai/gpt-5", "generated_code": "from collections.abc import Iterable\n\ndef add_lists(lst, tuples_input):\n    \"\"\"\n    Append the given list to the given tuple(s).\n\n    - If tuples_input is a tuple, return a new tuple with elements of lst appended.\n      Example: add_lists([1,2], (3,4)) -> (3,4,1,2)\n\n    - If tuples_input is a list (or other iterable) of tuples, return a list of tuples\n      where each tuple has elements of lst appended.\n      Example: add_lists([1,2], [(3,4), (5,)]) -> [(3,4,1,2), (5,1,2)]\n    \"\"\"\n    append_tuple = tuple(lst)\n\n    if isinstance(tuples_input, tuple):\n        return tuples_input + append_tuple\n\n    # Handle iterables (like list) of tuples\n    if isinstance(tuples_input, Iterable) and not isinstance(tuples_input, (str, bytes)):\n        # Ensure all elements are tuples; if not, raise TypeError for clarity\n        try:\n            result = []\n            for item in tuples_input:\n                if not isinstance(item, tuple):\n                    raise TypeError(\"All elements in the iterable must be tuples.\")\n                result.append(item + append_tuple)\n            return result\n        except TypeError:\n            # tuples_input is not iterable of tuples; fall through to error\n            pass\n\n    raise TypeError(\"Second argument must be a tuple or an iterable of tuples.\")"}
{"benchmark": "mbpp", "task_id": "139", "prompt": "Write a function to find the circumference of a circle.", "reference_code": "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter", "test_imports": ["import math"], "test_list": ["assert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)", "assert math.isclose(circle_circumference(5), 31.415000000000003, rel_tol=0.001)", "assert math.isclose(circle_circumference(4), 25.132, rel_tol=0.001)"], "model_name": "openai/gpt-5", "generated_code": "import math\n\ndef circle_circumference(radius):\n    \"\"\"\n    Compute the circumference of a circle given its radius.\n\n    Formula:\n        circumference = 2 * pi * radius\n\n    Parameters:\n        radius (int | float): The non-negative radius of the circle.\n\n    Returns:\n        float: The circumference of the circle.\n\n    Raises:\n        TypeError: If radius cannot be interpreted as a real number.\n        ValueError: If radius is negative.\n    \"\"\"\n    try:\n        r = float(radius)\n    except (TypeError, ValueError):\n        raise TypeError(\"radius must be a real number\") from None\n    if r < 0:\n        raise ValueError(\"radius must be non-negative\")\n    return 2 * math.pi * r"}
{"benchmark": "mbpp", "task_id": "172", "prompt": "Write a function to count the number of occurence of the string 'std' in a given string.", "reference_code": "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count", "test_imports": [], "test_list": ["assert count_occurance(\"letstdlenstdporstd\") == 3", "assert count_occurance(\"truststdsolensporsd\") == 1", "assert count_occurance(\"makestdsostdworthit\") == 2", "assert count_occurance(\"stds\") == 1", "assert count_occurance(\"\") == 0"], "model_name": "openai/gpt-5", "generated_code": "def count_occurance(s: str) -> int:\n    \"\"\"\n    Count the number of occurrences of the substring 'std' in the given string.\n\n    Parameters:\n        s (str): The input string.\n\n    Returns:\n        int: The number of times 'std' appears in s (non-overlapping).\n    \"\"\"\n    return s.count('std')"}
{"benchmark": "mbpp", "task_id": "222", "prompt": "Write a function to check if all the elements in tuple have same data type or not.", "reference_code": "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) ", "test_imports": [], "test_list": ["assert check_type((5, 6, 7, 3, 5, 6) ) == True", "assert check_type((1, 2, \"4\") ) == False", "assert check_type((3, 2, 1, 4, 5) ) == True"], "model_name": "openai/gpt-5", "generated_code": "def check_type(tup):\n    \"\"\"\n    Check if all elements in the given tuple have the same data type.\n\n    Args:\n        tup (tuple): The tuple to check.\n\n    Returns:\n        bool: True if all elements share the exact same type, False otherwise.\n              For empty or single-element tuples, returns True.\n    \"\"\"\n    if not isinstance(tup, tuple):\n        raise TypeError(\"Input must be a tuple\")\n    return len({type(x) for x in tup}) <= 1"}
{"benchmark": "mbpp", "task_id": "103", "prompt": "Write a function to find the Eulerian number a(n, m).", "reference_code": "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))", "test_imports": [], "test_list": ["assert eulerian_num(3, 1) == 4", "assert eulerian_num(4, 1) == 11", "assert eulerian_num(5, 3) == 26"], "model_name": "openai/gpt-5", "generated_code": "def eulerian_num(n, m):\n    \"\"\"\n    Compute the Eulerian number A(n, m), the number of permutations of {1..n}\n    with exactly m ascents (equivalently, m descents for complementary indexing).\n    \n    Conventions:\n    - A(0, 0) = 1\n    - A(n, m) = 0 if m < 0 or m >= n for n > 0\n    \n    Recurrence:\n    A(n, m) = (n - m) * A(n - 1, m - 1) + (m + 1) * A(n - 1, m)\n    \"\"\"\n    # Handle invalid or trivial cases\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1 if m == 0 else 0\n    if m < 0 or m >= n:\n        return 0\n\n    # Dynamic programming over n, building rows of the Eulerian triangle\n    prev = [1]  # Row for n = 0: [A(0,0)]\n    for i in range(1, n + 1):\n        curr = [0] * i  # Row has length i (indices 0..i-1)\n        for k in range(i):\n            left = prev[k - 1] if k - 1 >= 0 else 0\n            right = prev[k] if k < len(prev) else 0\n            curr[k] = (i - k) * left + (k + 1) * right\n        prev = curr\n\n    return prev[m]"}
{"benchmark": "mbpp", "task_id": "161", "prompt": "Write a function to remove all elements from a given list present in another list.", "reference_code": "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result", "test_imports": [], "test_list": ["assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]", "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]", "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]"], "model_name": "openai/gpt-5", "generated_code": "from typing import List, Any\n\ndef remove_elements(source_list: List[Any], removal_list: List[Any]) -> List[Any]:\n    \"\"\"\n    Return a new list with all elements from source_list that are not present in removal_list.\n    Preserves the order of elements from source_list.\n    \"\"\"\n    return [item for item in source_list if item not in removal_list]"}
{"benchmark": "mbpp", "task_id": "143", "prompt": "Write a function to find number of lists present in the given tuple.", "reference_code": "def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) ", "test_imports": [], "test_list": ["assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2", "assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3", "assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"], "model_name": "openai/gpt-5", "generated_code": "def find_lists(tup):\n    \"\"\"\n    Return the number of list objects present at the top level of the given tuple.\n\n    Parameters:\n    tup (tuple): The tuple to inspect.\n\n    Returns:\n    int: Count of elements in the tuple that are instances of list.\n    \"\"\"\n    return sum(1 for item in tup if isinstance(item, list))"}
{"benchmark": "mbpp", "task_id": "109", "prompt": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.", "reference_code": "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count ", "test_imports": [], "test_list": ["assert odd_Equivalent(\"011001\",6) == 3", "assert odd_Equivalent(\"11011\",5) == 4", "assert odd_Equivalent(\"1010\",4) == 2"], "model_name": "openai/gpt-5", "generated_code": "def odd_Equivalent(s, n):\n    \"\"\"\n    Returns the number of rotations (performed n times, cyclically) of the binary\n    string s that yield an odd decimal value. A binary number is odd iff its LSB is 1.\n    For each left rotation by 1, the LSB becomes the next character of s, cycling.\n    \"\"\"\n    if not s or n <= 0:\n        return 0\n\n    l = len(s)\n    ones = s.count('1')\n    q, r = divmod(n, l)\n    return q * ones + s[:r].count('1')"}
{"benchmark": "mbpp", "task_id": "168", "prompt": "Write a function to count the number of occurrences of a number in a given list.", "reference_code": "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count ", "test_imports": [], "test_list": ["assert frequency([1,2,3], 4) == 0", "assert frequency([1,2,2,3,3,3,4], 3) == 3", "assert frequency([0,1,2,3,1,2], 1) == 2"], "model_name": "openai/gpt-5", "generated_code": "def frequency(seq, value):\n    \"\"\"\n    Count the number of occurrences of 'value' in the iterable 'seq'.\n\n    Parameters:\n        seq: An iterable (e.g., list, tuple) to search within.\n        value: The item to count occurrences of.\n\n    Returns:\n        int: The count of 'value' in 'seq'.\n    \"\"\"\n    if seq is None:\n        return 0\n    # Use built-in count if available (e.g., for lists, tuples)\n    try:\n        return seq.count(value)\n    except AttributeError:\n        # Fallback for general iterables\n        count = 0\n        for item in seq:\n            if item == value:\n                count += 1\n        return count"}
{"benchmark": "mbpp", "task_id": "226", "prompt": "Write a python function to remove the characters which have odd index values of a given string.", "reference_code": "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result", "test_imports": [], "test_list": ["assert odd_values_string('abcdef') == 'ace'", "assert odd_values_string('python') == 'pto'", "assert odd_values_string('data') == 'dt'", "assert odd_values_string('lambs') == 'lms'"], "model_name": "openai/gpt-5", "generated_code": "def odd_values_string(s):\n    \"\"\"\n    Return a new string with characters at odd indices removed (i.e., keep even-indexed characters).\n    \n    Parameters:\n    s (str): The input string.\n    \n    Returns:\n    str: A string containing characters from even indices of the input.\n    \"\"\"\n    return s[::2]"}
{"benchmark": "mbpp", "task_id": "120", "prompt": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.", "reference_code": "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max", "test_imports": [], "test_list": ["assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36", "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200", "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484"], "model_name": "openai/gpt-5", "generated_code": "from typing import List, Tuple, Union\n\nNumber = Union[int, float]\n\ndef max_product_tuple(pairs: List[Tuple[Number, Number]]) -> Number:\n    \"\"\"\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \n    Args:\n        pairs: A list of tuples, each containing exactly two numeric elements.\n    \n    Returns:\n        The maximum absolute product among all tuple pairs. Returns 0 if the list is empty\n        or no valid pairs are found.\n    \"\"\"\n    max_val = None\n    for t in pairs:\n        if not isinstance(t, tuple) or len(t) < 2:\n            continue\n        a, b = t[0], t[1]\n        try:\n            prod = abs(a * b)\n        except Exception:\n            # Skip tuples with non-multipliable elements\n            continue\n        if max_val is None or prod > max_val:\n            max_val = prod\n    return max_val if max_val is not None else 0"}
{"benchmark": "mbpp", "task_id": "227", "prompt": "Write a function to find minimum of three numbers.", "reference_code": "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest ", "test_imports": [], "test_list": ["assert min_of_three(10,20,0)==0", "assert min_of_three(19,15,18)==15", "assert min_of_three(-10,-20,-30)==-30"], "model_name": "openai/gpt-5", "generated_code": "def min_of_three(a, b, c):\n    \"\"\"\n    Return the minimum of three comparable values.\n    \"\"\"\n    return min(a, b, c)"}
{"benchmark": "mbpp", "task_id": "230", "prompt": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.", "reference_code": "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2", "test_imports": [], "test_list": ["assert replace_blank(\"hello people\",'@')==(\"hello@people\")", "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")", "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"], "model_name": "openai/gpt-5", "generated_code": "def replace_blank(string, character):\n    \"\"\"\n    Replace blank spaces in the input string with the provided character.\n\n    Parameters:\n    - string (str): The original string.\n    - character: The character or string to replace spaces with.\n\n    Returns:\n    - str: The modified string with spaces replaced.\n    \"\"\"\n    return string.replace(' ', str(character))"}
{"benchmark": "mbpp", "task_id": "166", "prompt": "Write a function that counts the number of pairs of integers in a list that xor to an even number.", "reference_code": "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count", "test_imports": [], "test_list": ["assert find_even_pair([5, 4, 7, 2, 1]) == 4", "assert find_even_pair([7, 2, 8, 1, 0, 5, 11]) == 9", "assert find_even_pair([1, 2, 3]) == 1"], "model_name": "openai/gpt-5", "generated_code": "def find_even_pair(list_of_integers):\n    \"\"\"\n    Count the number of pairs (i, j), i < j, such that list_of_integers[i] XOR list_of_integers[j] is even.\n    This occurs when both integers have the same parity (both even or both odd).\n    \"\"\"\n    evens = 0\n    odds = 0\n    for num in list_of_integers:\n        if num & 1:\n            odds += 1\n        else:\n            evens += 1\n    return evens * (evens - 1) // 2 + odds * (odds - 1) // 2"}
{"benchmark": "mbpp", "task_id": "129", "prompt": "Write a function to calculate whether the matrix is a magic square.", "reference_code": "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True", "test_imports": [], "test_list": ["assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True", "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True", "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"], "model_name": "openai/gpt-5", "generated_code": "from typing import List, Any\n\ndef magic_square_test(matrix: List[List[Any]]) -> bool:\n    \"\"\"\n    Determine whether the given matrix is a (normal) magic square.\n\n    Requirements for a normal magic square:\n    - Matrix must be non-empty and square (n x n).\n    - Contains exactly the integers 1..n^2, each exactly once.\n    - All row sums, column sums, and both diagonal sums are equal.\n    \"\"\"\n    # Basic shape checks\n    if not isinstance(matrix, list) or not matrix:\n        return False\n    n = len(matrix)\n    if any(not isinstance(row, list) or len(row) != n for row in matrix):\n        return False\n\n    # Flatten and validate contents are integers and exactly 1..n^2\n    flat = []\n    for row in matrix:\n        for val in row:\n            if not isinstance(val, int) or isinstance(val, bool):  # exclude bools (subclass of int)\n                return False\n            flat.append(val)\n\n    expected = set(range(1, n * n + 1))\n    if set(flat) != expected:\n        return False\n\n    # Target magic constant is sum of first row\n    target = sum(matrix[0])\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target:\n            return False\n\n    # Check columns\n    for c in range(n):\n        if sum(matrix[r][c] for r in range(n)) != target:\n            return False\n\n    # Check main diagonal\n    if sum(matrix[i][i] for i in range(n)) != target:\n        return False\n\n    # Check anti-diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != target:\n        return False\n\n    return True"}
{"benchmark": "mbpp", "task_id": "117", "prompt": "Write a function to convert all possible convertible elements in a list of lists to floats.", "reference_code": "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res", "test_imports": [], "test_list": ["assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]", "assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]", "assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]"], "model_name": "openai/gpt-5", "generated_code": "from typing import Any, List\n\ndef list_to_float(data: List[Any]) -> List[Any]:\n    \"\"\"\n    Convert all convertible elements in a list (and nested lists) to floats.\n    Non-convertible elements are left unchanged.\n    \"\"\"\n    if not isinstance(data, list):\n        # If input isn't a list, return it unchanged as the function expects a list of lists.\n        return data  # type: ignore[return-value]\n\n    result: List[Any] = []\n    for item in data:\n        if isinstance(item, list):\n            # Recursively process nested lists\n            result.append(list_to_float(item))\n        else:\n            try:\n                result.append(float(item))\n            except (TypeError, ValueError):\n                result.append(item)\n    return result"}
{"benchmark": "mbpp", "task_id": "171", "prompt": "Write a function to find the perimeter of a regular pentagon from the length of its sides.", "reference_code": "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter", "test_imports": [], "test_list": ["assert perimeter_pentagon(5) == 25", "assert perimeter_pentagon(10) == 50", "assert perimeter_pentagon(15) == 75"], "model_name": "openai/gpt-5", "generated_code": "def perimeter_pentagon(side):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon given the length of one side.\n\n    Parameters:\n        side: The length of one side of the pentagon (numeric or convertible to float).\n\n    Returns:\n        The perimeter as side * 5.\n\n    Raises:\n        TypeError: If the input cannot be used in a numeric multiplication.\n        ValueError: If the input is None.\n    \"\"\"\n    if side is None:\n        raise ValueError(\"side must not be None\")\n    try:\n        return 5 * side\n    except TypeError:\n        # Attempt to coerce to float if a non-numeric (e.g., string) is provided\n        return 5 * float(side)"}
{"benchmark": "mbpp", "task_id": "75", "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.", "reference_code": "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res", "test_imports": [], "test_list": ["assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]", "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]", "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]"], "model_name": "openai/gpt-5", "generated_code": "from typing import List, Tuple, Iterable, Any\n\n\ndef find_tuples(tuples_list: Iterable[Tuple[Any, ...]], k: int) -> List[Tuple[int, ...]]:\n    \"\"\"\n    Return a list of tuples from tuples_list where every element is an integer\n    divisible by k. If k is 0 or cannot be interpreted as an integer, returns\n    an empty list. Non-tuple items in tuples_list are ignored.\n    \"\"\"\n    # Normalize and validate k\n    try:\n        k = abs(int(k))\n    except Exception:\n        return []\n    if k == 0:\n        return []\n\n    result: List[Tuple[int, ...]] = []\n    if tuples_list is None:\n        return result\n\n    for t in tuples_list:\n        if not isinstance(t, tuple):\n            continue\n        all_divisible = True\n        for x in t:\n            if not isinstance(x, int):\n                all_divisible = False\n                break\n            if x % k != 0:\n                all_divisible = False\n                break\n        if all_divisible:\n            result.append(t)  # type: ignore[arg-type]\n    return result"}
{"benchmark": "mbpp", "task_id": "234", "prompt": "Write a function to find the volume of a cube given its side length.", "reference_code": "def volume_cube(l):\n  volume = l * l * l\n  return volume", "test_imports": [], "test_list": ["assert volume_cube(3)==27", "assert volume_cube(2)==8", "assert volume_cube(5)==125"], "model_name": "openai/gpt-5", "generated_code": "def volume_cube(side):\n    \"\"\"\n    Calculate the volume of a cube given the length of its side.\n\n    Parameters:\n        side (int | float): The length of the cube's side.\n\n    Returns:\n        int | float: The volume of the cube.\n\n    Raises:\n        TypeError: If side is not a number.\n    \"\"\"\n    try:\n        return side ** 3\n    except TypeError as e:\n        raise TypeError(\"side must be a number\") from e"}
{"benchmark": "mbpp", "task_id": "242", "prompt": "Write a function to count the total number of characters in a string.", "reference_code": "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total", "test_imports": [], "test_list": ["assert count_charac(\"python programming\")==18", "assert count_charac(\"language\")==8", "assert count_charac(\"words\")==5"], "model_name": "openai/gpt-5", "generated_code": "def count_charac(s):\n    \"\"\"\n    Count the total number of characters in the given string.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    int: The number of characters in the string.\n    \"\"\"\n    return len(s)"}
{"benchmark": "mbpp", "task_id": "233", "prompt": "Write a function to find the lateral surface area of a cylinder.", "reference_code": "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface", "test_imports": ["import math"], "test_list": ["assert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)", "assert math.isclose(lateralsuface_cylinder(4,5), 125.66000000000001, rel_tol=0.001)", "assert math.isclose(lateralsuface_cylinder(4,10), 251.32000000000002, rel_tol=0.001)"], "model_name": "openai/gpt-5", "generated_code": "import math\n\ndef lateralsuface_cylinder(r, h):\n    \"\"\"\n    Calculate the lateral (curved) surface area of a cylinder.\n\n    Parameters:\n    r (float): Radius of the cylinder.\n    h (float): Height of the cylinder.\n\n    Returns:\n    float: Lateral surface area, computed as 2 * pi * r * h.\n    \"\"\"\n    return 2 * math.pi * r * h"}
{"benchmark": "mbpp", "task_id": "237", "prompt": "Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.", "reference_code": "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) ", "test_imports": [], "test_list": ["assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}", "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}", "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"], "model_name": "openai/gpt-5", "generated_code": "def check_occurences(tuples_list):\n    \"\"\"\n    Takes a list of tuples and returns a dictionary mapping each unique tuple\n    to the number of times it occurs in the list.\n\n    Args:\n        tuples_list (list[tuple]): List containing tuple elements.\n\n    Returns:\n        dict: A dictionary with tuples as keys and their occurrence counts as values.\n    \"\"\"\n    counts = {}\n    for item in tuples_list:\n        counts[item] = counts.get(item, 0) + 1\n    return counts"}
{"benchmark": "mbpp", "task_id": "232", "prompt": "Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.", "reference_code": "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest", "test_imports": [], "test_list": ["assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])", "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5))==set([100,90,80,70,60])", "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3))==set([100,90,80])"], "model_name": "openai/gpt-5", "generated_code": "from heapq import nlargest\nfrom typing import List, Any\n\n\ndef larg_nnum(lst: List[Any], n: int) -> List[Any]:\n    \"\"\"\n    Return a list containing the n largest items from the given list.\n    The result is sorted in descending order.\n    If n <= 0 or lst is None, returns an empty list.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    if lst is None or n <= 0:\n        return []\n    return nlargest(n, lst)"}
{"benchmark": "mbpp", "task_id": "250", "prompt": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.", "reference_code": "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count ", "test_imports": [], "test_list": ["assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0", "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3", "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"], "model_name": "openai/gpt-5", "generated_code": "def count_X(tup, element):\n    \"\"\"\n    Count the occurrences of 'element' in the given tuple 'tup'.\n\n    Parameters:\n    - tup: tuple in which to count occurrences.\n    - element: the element to count.\n\n    Returns:\n    - int: number of times 'element' appears in 'tup'.\n    \"\"\"\n    return tup.count(element)"}
{"benchmark": "mbpp", "task_id": "111", "prompt": "Write a function to find the common elements in given nested lists.", "reference_code": "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result", "test_imports": [], "test_list": ["assert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])", "assert set(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))==set([5,23])", "assert set(common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]]))==set([4])"], "model_name": "openai/gpt-5", "generated_code": ""}
{"benchmark": "mbpp", "task_id": "257", "prompt": "Write a function that takes in two numbers and returns a tuple with the second number and then the first number.", "reference_code": "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)", "test_imports": [], "test_list": ["assert swap_numbers(10,20)==(20,10)", "assert swap_numbers(15,17)==(17,15)", "assert swap_numbers(100,200)==(200,100)"], "model_name": "openai/gpt-5", "generated_code": "def swap_numbers(a, b):\n    \"\"\"\n    Return a tuple with the second number first and the first number second.\n\n    Args:\n        a: First number.\n        b: Second number.\n\n    Returns:\n        tuple: (b, a)\n    \"\"\"\n    return (b, a)"}
{"benchmark": "mbpp", "task_id": "113", "prompt": "Write a function to check if a string represents an integer or not.", "reference_code": "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False", "test_imports": [], "test_list": ["assert check_integer(\"python\")==False", "assert check_integer(\"1\")==True", "assert check_integer(\"12345\")==True"], "model_name": "openai/gpt-5", "generated_code": "def check_integer(s):\n    \"\"\"\n    Check whether the input string represents an integer (base 10).\n    - Ignores leading/trailing whitespace.\n    - Allows optional leading '+' or '-' sign.\n    - Does not allow decimal points, exponents, or non-decimal numerals beyond Unicode decimal digits.\n    \"\"\"\n    if not isinstance(s, str):\n        return False\n    s = s.strip()\n    if not s:\n        return False\n    try:\n        int(s, 10)\n        return True\n    except Exception:\n        return False"}
{"benchmark": "mbpp", "task_id": "130", "prompt": "Write a function to find the item with maximum frequency in a given list.", "reference_code": "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]", "test_imports": [], "test_list": ["assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2", "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8", "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==20"], "model_name": "openai/gpt-5", "generated_code": "def max_occurrences(lst):\n    \"\"\"\n    Return the item with the maximum frequency in the given list.\n    If multiple items share the maximum frequency, return the one that appears first.\n    If the list is empty, return None.\n\n    Works with both hashable and unhashable elements by using equality comparison.\n    \"\"\"\n    if not lst:\n        return None\n\n    uniques = []\n    counts = []\n    first_idx = []\n\n    for idx, item in enumerate(lst):\n        found_index = None\n        for j, u in enumerate(uniques):\n            if item == u:\n                found_index = j\n                break\n        if found_index is None:\n            uniques.append(item)\n            counts.append(1)\n            first_idx.append(idx)\n        else:\n            counts[found_index] += 1\n\n    max_count = max(counts)\n    best_first_index = None\n    for i, c in enumerate(counts):\n        if c == max_count:\n            if best_first_index is None or first_idx[i] < best_first_index:\n                best_first_index = first_idx[i]\n\n    return lst[best_first_index] if best_first_index is not None else None"}
{"benchmark": "mbpp", "task_id": "238", "prompt": "Write a python function to count the number of non-empty substrings of a given string.", "reference_code": "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); ", "test_imports": [], "test_list": ["assert number_of_substrings(\"abc\") == 6", "assert number_of_substrings(\"abcd\") == 10", "assert number_of_substrings(\"abcde\") == 15"], "model_name": "openai/gpt-5", "generated_code": "from typing import Union\n\ndef number_of_substrings(s: str) -> int:\n    \"\"\"\n    Count the total number of non-empty substrings in the given string.\n\n    For a string of length n, the number of non-empty substrings is n*(n+1)//2.\n    \"\"\"\n    n = len(s)\n    return n * (n + 1) // 2"}
{"benchmark": "mbpp", "task_id": "165", "prompt": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).", "reference_code": "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars ", "test_imports": [], "test_list": ["assert count_char_position(\"xbcefg\") == 2", "assert count_char_position(\"ABcED\") == 3", "assert count_char_position(\"AbgdeF\") == 5"], "model_name": "openai/gpt-5", "generated_code": "def count_char_position(s: str) -> int:\n    \"\"\"\n    Count the number of characters in the string that are at the same position\n    as in the English alphabet (case-insensitive). Positions are 1-based.\n\n    Example:\n    \"abode\" -> a(1), b(2), d(4), e(5) match -> returns 4\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for i, ch in enumerate(s.lower(), start=1):\n        if 1 <= i <= 26 and ch == alphabet[i - 1]:\n            count += 1\n    return count"}
{"benchmark": "mbpp", "task_id": "248", "prompt": "Write a function that takes in an integer n and calculates the harmonic sum of n-1.", "reference_code": "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) ", "test_imports": ["import math"], "test_list": ["assert math.isclose(harmonic_sum(7), 2.5928571428571425, rel_tol=0.001)", "assert math.isclose(harmonic_sum(4), 2.083333333333333, rel_tol=0.001)", "assert math.isclose(harmonic_sum(19), 3.547739657143682, rel_tol=0.001)"], "model_name": "openai/gpt-5", "generated_code": "from typing import Union\n\ndef harmonic_sum(n: int) -> float:\n    \"\"\"\n    Calculate the harmonic sum of n-1:\n        H_{n-1} = 1 + 1/2 + ... + 1/(n-1)\n\n    Parameters:\n        n (int): The upper bound plus one for the harmonic series.\n\n    Returns:\n        float: The harmonic sum up to 1/(n-1). Returns 0.0 if n <= 1.\n    \"\"\"\n    if n <= 1:\n        return 0.0\n    return sum(1.0 / k for k in range(1, n))"}
{"benchmark": "mbpp", "task_id": "164", "prompt": "Write a function to determine if the sum of the divisors of two integers are the same.", "reference_code": "import math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); ", "test_imports": [], "test_list": ["assert are_equivalent(36, 57) == False", "assert are_equivalent(2, 4) == False", "assert are_equivalent(23, 47) == True"], "model_name": "openai/gpt-5", "generated_code": "from math import isqrt\n\ndef are_equivalent(a, b):\n    \"\"\"\n    Determine if two integers have the same sum of positive divisors.\n    Sum includes 1 and the number itself. Negative numbers are treated by absolute value.\n    For 0, the sum is defined as 0.\n    \"\"\"\n    def sum_of_divisors(n):\n        n = abs(int(n))\n        if n == 0:\n            return 0\n        total = 0\n        r = isqrt(n)\n        for d in range(1, r + 1):\n            if n % d == 0:\n                total += d\n                q = n // d\n                if q != d:\n                    total += q\n        return total\n\n    return sum_of_divisors(a) == sum_of_divisors(b)"}
{"benchmark": "mbpp", "task_id": "247", "prompt": "Write a function to find the length of the longest palindromic subsequence in the given string.", "reference_code": "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]", "test_imports": [], "test_list": ["assert lps(\"TENS FOR TENS\") == 5", "assert lps(\"CARDIO FOR CARDS\") == 7", "assert lps(\"PART OF THE JOURNEY IS PART\") == 9"], "model_name": "openai/gpt-5", "generated_code": "from typing import List\n\ndef lps(s: str) -> int:\n    \"\"\"\n    Return the length of the longest palindromic subsequence in string s.\n    Uses O(n^2) time and O(n) space dynamic programming.\n    \"\"\"\n    n = len(s)\n    if n == 0:\n        return 0\n    # dp[j] will hold the LPS length for substring s[i..j] for current i\n    dp: List[int] = [1] * n  # base: single characters are palindromes of length 1\n    for i in range(n - 2, -1, -1):\n        prev_diag = 0  # corresponds to dp[i+1][j-1] before updates; for j=i+1 it's 0\n        # dp[i] stays 1 (single character)\n        for j in range(i + 1, n):\n            temp = dp[j]  # dp[i+1][j] before update\n            if s[i] == s[j]:\n                dp[j] = prev_diag + 2\n            else:\n                # max between dp[i+1][j] (temp) and dp[i][j-1] (dp[j-1] after current i updates)\n                if dp[j - 1] > temp:\n                    dp[j] = dp[j - 1]\n                else:\n                    dp[j] = temp\n            prev_diag = temp\n    return dp[-1]"}
{"benchmark": "mbpp", "task_id": "167", "prompt": "Write a python function to find the smallest power of 2 greater than or equal to n.", "reference_code": "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; ", "test_imports": [], "test_list": ["assert next_power_of_2(0) == 1", "assert next_power_of_2(5) == 8", "assert next_power_of_2(17) == 32"], "model_name": "openai/gpt-5", "generated_code": "def next_power_of_2(n):\n    \"\"\"\n    Return the smallest power of 2 greater than or equal to n.\n\n    For n <= 1, returns 1.\n    Raises TypeError if n is not an integer.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n\n    if n <= 1:\n        return 1\n\n    # If n is already a power of 2, return n; otherwise return 1 << bit_length\n    return n if (n & (n - 1)) == 0 else 1 << n.bit_length()"}
{"benchmark": "mbpp", "task_id": "240", "prompt": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.", "reference_code": "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n", "test_imports": [], "test_list": ["assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]", "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]", "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"], "model_name": "openai/gpt-5", "generated_code": "def replace_list(lst1, lst2):\n    \"\"\"\n    Replace the last element of lst1 with the elements of lst2.\n\n    This modifies lst1 in place and returns it.\n    Examples:\n    - replace_list([1, 2, 3], [4, 5]) -> [1, 2, 4, 5]\n    - replace_list([], [1, 2]) -> [1, 2]\n    - replace_list([1, 2, 3], []) -> [1, 2]\n    \"\"\"\n    lst1[-1:] = lst2\n    return lst1"}
{"benchmark": "mbpp", "task_id": "223", "prompt": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)", "reference_code": "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1", "test_imports": [], "test_list": ["assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True", "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False", "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True", "assert is_majority([1, 1, 2, 2], 5, 1) == False"], "model_name": "openai/gpt-5", "generated_code": "def is_majority(arr, n, x):\n    \"\"\"\n    Determine if x is a majority element (> n/2 occurrences) in a sorted array arr of length n.\n    \"\"\"\n    m = min(n, len(arr))\n    if m == 0:\n        return False\n\n    # Find the first index where arr[i] >= x (lower bound)\n    l, r = 0, m\n    while l < r:\n        mid = (l + r) // 2\n        if arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid\n    i = l\n\n    # If x is not present\n    if i >= m or arr[i] != x:\n        return False\n\n    # Check if the element at i + n//2 is still x\n    j = i + n // 2\n    return j < m and arr[j] == x"}
{"benchmark": "mbpp", "task_id": "224", "prompt": "Write a python function to count the number of set bits (binary digits with value 1) in a given number.", "reference_code": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count ", "test_imports": [], "test_list": ["assert count_Set_Bits(2) == 1", "assert count_Set_Bits(4) == 1", "assert count_Set_Bits(6) == 2"], "model_name": "openai/gpt-5", "generated_code": "def count_Set_Bits(n):\n    \"\"\"\n    Count the number of set bits (1s) in the binary representation of a given number.\n    For negative numbers, counts bits in the absolute value.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    if n < 0:\n        n = -n\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count"}
{"benchmark": "mbpp", "task_id": "251", "prompt": "Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.", "reference_code": "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list", "test_imports": [], "test_list": ["assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']", "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']", "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad']"], "model_name": "openai/gpt-5", "generated_code": "def insert_element(lst, element):\n    \"\"\"\n    Insert the given element before each element of the input list and return the resulting list.\n    \n    Args:\n        lst (list): The original list.\n        element: The element to insert before each item in lst.\n    \n    Returns:\n        list: A new list with 'element' inserted before each original item.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result"}
{"benchmark": "mbpp", "task_id": "160", "prompt": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.", "reference_code": "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None", "test_imports": [], "test_list": ["assert find_solution(2, 3, 7) == (2, 1)", "assert find_solution(4, 2, 7) == None", "assert find_solution(1, 13, 17) == (4, 1)"], "model_name": "openai/gpt-5", "generated_code": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int, int]]:\n    \"\"\"\n    Returns integers (x, y) such that a*x + b*y = n, or None if no solution exists.\n    \"\"\"\n    # Special case: both coefficients zero\n    if a == 0 and b == 0:\n        return (0, 0) if n == 0 else None\n\n    # Extended Euclidean Algorithm to find x0, y0 such that a*x0 + b*y0 = gcd(a, b)\n    old_r, r = a, b\n    old_s, s = 1, 0\n    old_t, t = 0, 1\n\n    while r != 0:\n        q = old_r // r\n        old_r, r = r, old_r - q * r\n        old_s, s = s, old_s - q * s\n        old_t, t = t, old_t - q * t\n\n    g = old_r\n    x0 = old_s\n    y0 = old_t\n\n    # Ensure gcd is positive\n    if g < 0:\n        g = -g\n        x0 = -x0\n        y0 = -y0\n\n    # No solution if gcd does not divide n\n    if n % g != 0:\n        return None\n\n    k = n // g\n    return (x0 * k, y0 * k)"}
{"benchmark": "mbpp", "task_id": "125", "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.", "reference_code": "def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0", "test_imports": [], "test_list": ["assert find_length(\"11000010001\") == 6", "assert find_length(\"10111\") == 1", "assert find_length(\"11011101100101\") == 2"], "model_name": "openai/gpt-5", "generated_code": "def find_length(s):\n    \"\"\"\n    Find the maximum difference between the number of 0s and number of 1s\n    in any substring of the given binary string.\n    Returns:\n    - the maximum difference (count(0) - count(1)) for some substring\n    - -1 if no substring has more 0s than 1s\n    \"\"\"\n    max_ending_here = 0\n    max_so_far = float('-inf')\n\n    for ch in s:\n        val = 1 if ch == '0' else -1  # map 0 -> +1, 1 -> -1\n        max_ending_here = max(val, max_ending_here + val)\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n    return -1 if max_so_far <= 0 or max_so_far == float('-inf') else int(max_so_far)"}
{"benchmark": "mbpp", "task_id": "229", "prompt": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.", "reference_code": "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr", "test_imports": [], "test_list": ["assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]", "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]", "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"], "model_name": "openai/gpt-5", "generated_code": "def re_arrange_array(arr, n):\n    \"\"\"\n    Rearranges the first n elements of 'arr' so that all negative elements appear\n    before non-negative ones, preserving relative order within each group.\n    Returns the modified list.\n    \"\"\"\n    if arr is None:\n        return arr\n    n = max(0, min(n, len(arr)))\n    negatives = []\n    non_negatives = []\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            non_negatives.append(arr[i])\n    arr[:n] = negatives + non_negatives\n    return arr"}
{"benchmark": "mbpp", "task_id": "280", "prompt": "Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).", "reference_code": "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos", "test_imports": [], "test_list": ["assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)", "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)", "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"], "model_name": "openai/gpt-5", "generated_code": "def sequential_search(arr, elem):\n    \"\"\"\n    Perform a sequential (linear) search for elem in arr.\n\n    Args:\n        arr: A sequence (list, tuple, etc.) to search through.\n        elem: The element to find.\n\n    Returns:\n        A tuple (found: bool, index: int) where:\n            - found is True if elem is in arr, otherwise False.\n            - index is the position of the first occurrence of elem, or -1 if not found.\n    \"\"\"\n    for index, value in enumerate(arr):\n        if value == elem:\n            return True, index\n    return False, -1"}
{"benchmark": "mbpp", "task_id": "272", "prompt": "Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.", "reference_code": "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) ", "test_imports": [], "test_list": ["assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]", "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]", "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"], "model_name": "openai/gpt-5", "generated_code": "from typing import List, Tuple, Any\n\ndef rear_extract(tuples_list: List[Tuple[Any, ...]]) -> List[Any]:\n    \"\"\"\n    Return a list containing the last element of each tuple in the input list.\n\n    Args:\n        tuples_list: List of tuples.\n\n    Returns:\n        List of last elements from each tuple.\n\n    Note:\n        Assumes each tuple in the list is non-empty.\n    \"\"\"\n    return [t[-1] for t in tuples_list]"}
{"benchmark": "mbpp", "task_id": "138", "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.", "reference_code": "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True", "test_imports": [], "test_list": ["assert is_Sum_Of_Powers_Of_Two(10) == True", "assert is_Sum_Of_Powers_Of_Two(7) == False", "assert is_Sum_Of_Powers_Of_Two(14) == True"], "model_name": "openai/gpt-5", "generated_code": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Check if n can be represented as a sum of non-zero powers of 2 (i.e., 2^k where k >= 1).\n    This is equivalent to checking if n is a positive even integer.\n    \"\"\"\n    try:\n        return n > 0 and n % 2 == 0\n    except Exception:\n        return False"}
{"benchmark": "mbpp", "task_id": "266", "prompt": "Write a function to find the lateral surface area of a cube given its side length.", "reference_code": "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA", "test_imports": [], "test_list": ["assert lateralsurface_cube(5)==100", "assert lateralsurface_cube(9)==324", "assert lateralsurface_cube(10)==400"], "model_name": "openai/gpt-5", "generated_code": "def lateralsurface_cube(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n\n    Lateral surface area of a cube = 4 * a^2\n\n    Parameters:\n        side_length (int or float): The length of a side of the cube. Must be non-negative.\n\n    Returns:\n        int or float: The lateral surface area of the cube.\n\n    Raises:\n        ValueError: If side_length is negative.\n        TypeError: If side_length is not a number.\n    \"\"\"\n    if not isinstance(side_length, (int, float)):\n        raise TypeError(\"side_length must be a number\")\n    if side_length < 0:\n        raise ValueError(\"side_length must be non-negative\")\n    return 4 * (side_length ** 2)"}
{"benchmark": "mbpp", "task_id": "228", "prompt": "Write a python function to check whether all the bits are unset in the given range or not.", "reference_code": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False", "test_imports": [], "test_list": ["assert all_Bits_Set_In_The_Given_Range(4,1,2) == True", "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True", "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False"], "model_name": "openai/gpt-5", "generated_code": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Check whether all bits are UNSET (0) in the given range [l, r] (1-based indexing, LSB=1).\n    Returns True if all bits in the range are 0, otherwise False.\n\n    Parameters:\n    - n: non-negative integer\n    - l: left position (1-based, inclusive)\n    - r: right position (1-based, inclusive)\n\n    Example:\n    n = 8 (0b1000), l = 1, r = 3 -> True (bits 1..3 are 000)\n    \"\"\"\n    if not isinstance(n, int) or not isinstance(l, int) or not isinstance(r, int):\n        return False\n    if n < 0:\n        # For negative numbers, Python uses infinite sign extension; undefined for this context.\n        return False\n    if l <= 0 or r <= 0:\n        return False\n    if l > r:\n        l, r = r, l\n\n    width = r - l + 1\n    mask = ((1 << width) - 1) << (l - 1)\n    return (n & mask) == 0"}
{"benchmark": "mbpp", "task_id": "253", "prompt": "Write a python function that returns the number of integer elements in a given list.", "reference_code": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr", "test_imports": [], "test_list": ["assert count_integer([1,2,'abc',1.2]) == 2", "assert count_integer([1,2,3]) == 3", "assert count_integer([1,1.2,4,5.1]) == 2"], "model_name": "openai/gpt-5", "generated_code": "def count_integer(lst):\n    \"\"\"\n    Return the count of integer elements in the given list.\n    Booleans are excluded (since bool is a subclass of int in Python).\n    \"\"\"\n    count = 0\n    for x in lst:\n        if isinstance(x, int) and not isinstance(x, bool):\n            count += 1\n    return count"}
{"benchmark": "mbpp", "task_id": "276", "prompt": "Write a function that takes in the radius and height of a cylinder and returns the the volume.", "reference_code": "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume", "test_imports": ["import math"], "test_list": ["assert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)", "assert math.isclose(volume_cylinder(4,5), 251.32000000000002, rel_tol=0.001)", "assert math.isclose(volume_cylinder(4,10), 502.64000000000004, rel_tol=0.001)"], "model_name": "openai/gpt-5", "generated_code": "import math\n\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculate the volume of a cylinder given its radius and height.\n    \n    Parameters:\n        radius (float or int): The radius of the cylinder base.\n        height (float or int): The height of the cylinder.\n        \n    Returns:\n        float: The volume of the cylinder.\n    \"\"\"\n    return math.pi * (radius ** 2) * height"}
{"benchmark": "mbpp", "task_id": "256", "prompt": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.", "reference_code": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr", "test_imports": [], "test_list": ["assert count_Primes_nums(5) == 2", "assert count_Primes_nums(10) == 4", "assert count_Primes_nums(100) == 25"], "model_name": "openai/gpt-5", "generated_code": "def count_Primes_nums(n):\n    \"\"\"\n    Return the number of prime numbers less than the given non-negative number n.\n    If n is not an integer, it is truncated towards zero (via int()).\n    \"\"\"\n    # Normalize input to a non-negative integer\n    try:\n        n = int(n)\n    except Exception:\n        raise TypeError(\"Input must be a number.\")\n    if n <= 2:\n        return 0\n    if n < 0:\n        return 0\n\n    # Sieve of Eratosthenes\n    sieve = [True] * n\n    sieve[0] = sieve[1] = False\n\n    limit = int(n ** 0.5) + 1\n    for i in range(2, limit):\n        if sieve[i]:\n            step_start = i * i\n            sieve[step_start:n:i] = [False] * len(range(step_start, n, i))\n\n    return sum(sieve)"}
{"benchmark": "mbpp", "task_id": "170", "prompt": "Write a function to find the sum of numbers in a list within a range specified by two indices.", "reference_code": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   ", "test_imports": [], "test_list": ["assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29", "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16", "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38"], "model_name": "openai/gpt-5", "generated_code": "def sum_range_list(lst, start, end):\n    \"\"\"\n    Return the sum of elements in lst between two indices (inclusive).\n    Supports negative indices (Python-style) and clamps out-of-range values.\n    If start > end, the range is swapped to include all elements between them.\n    \"\"\"\n    n = len(lst)\n    if n == 0:\n        return 0\n\n    # Resolve negative indices to their positive equivalents\n    if start < 0:\n        start = n + start\n    if end < 0:\n        end = n + end\n\n    # Clamp indices to valid bounds\n    if start < 0:\n        start = 0\n    if end < 0:\n        end = 0\n    if start >= n:\n        start = n - 1\n    if end >= n:\n        end = n - 1\n\n    # Ensure start <= end for inclusive range\n    if start > end:\n        start, end = end, start\n\n    return sum(lst[start:end + 1])"}
{"benchmark": "mbpp", "task_id": "262", "prompt": "Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.", "reference_code": "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]", "test_imports": [], "test_list": ["assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])", "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])", "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"], "model_name": "openai/gpt-5", "generated_code": "def split_two_parts(lst, L):\n    \"\"\"\n    Split the given list into two parts where the first part has length L.\n\n    Args:\n        lst (list): The input list to split.\n        L (int): Desired length of the first part.\n\n    Returns:\n        tuple: A tuple (first_part, second_part) where:\n               - first_part is lst[:L] (bounded between 0 and len(lst))\n               - second_part is the remainder of the list.\n    \"\"\"\n    if not isinstance(L, int):\n        raise TypeError(\"L must be an integer\")\n    split_index = max(0, min(len(lst), L))\n    return lst[:split_index], lst[split_index:]"}
{"benchmark": "mbpp", "task_id": "270", "prompt": "Write a python function to find the sum of even numbers at even positions of a list.", "reference_code": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum", "test_imports": [], "test_list": ["assert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30", "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26", "assert sum_even_and_even_index([5, 6, 12, 1]) == 12"], "model_name": "openai/gpt-5", "generated_code": "from typing import Iterable, Any\n\ndef sum_even_and_even_index(lst):\n    \"\"\"\n    Returns the sum of even integers located at even indices (0-based) in the list.\n    Non-integer values and booleans are ignored.\n    \"\"\"\n    total = 0\n    for idx, val in enumerate(lst):\n        if idx % 2 == 0 and isinstance(val, int) and not isinstance(val, bool) and val % 2 == 0:\n            total += val\n    return total"}
{"benchmark": "mbpp", "task_id": "273", "prompt": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.", "reference_code": "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) ", "test_imports": [], "test_list": ["assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)", "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)", "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"], "model_name": "openai/gpt-5", "generated_code": "def substract_elements(tuple1, tuple2):\n    \"\"\"\n    Subtracts elements of the first tuple by the elements of the second tuple with the same index.\n    Returns a new tuple with the results.\n\n    Parameters:\n    - tuple1: tuple of numeric values\n    - tuple2: tuple of numeric values\n\n    Raises:\n    - TypeError: if either input is not a tuple\n    - ValueError: if the tuples do not have the same length\n    \"\"\"\n    if not isinstance(tuple1, tuple) or not isinstance(tuple2, tuple):\n        raise TypeError(\"Inputs must be tuples\")\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must have the same length\")\n\n    return tuple(a - b for a, b in zip(tuple1, tuple2))"}
{"benchmark": "mbpp", "task_id": "274", "prompt": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.", "reference_code": "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) ", "test_imports": [], "test_list": ["assert even_binomial_Coeff_Sum(4) == 8", "assert even_binomial_Coeff_Sum(6) == 32", "assert even_binomial_Coeff_Sum(2) == 2"], "model_name": "openai/gpt-5", "generated_code": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Return the sum of binomial coefficients C(n, k) for even k.\n    For n >= 1, the sum equals 2^(n-1). For n = 0, the sum is 1.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    if n == 0:\n        return 1\n    return 1 << (n - 1)"}
{"benchmark": "mbpp", "task_id": "255", "prompt": "Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.", "reference_code": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n", "test_imports": [], "test_list": ["assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]", "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]", "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"], "model_name": "openai/gpt-5", "generated_code": "from typing import List, Tuple, Any\n\ndef combinations_colors(lst: List[Any], n: int) -> List[Tuple[Any, ...]]:\n    \"\"\"\n    Generate all combinations with repetition (combinations with replacement)\n    of the elements in lst, of length n. Returns a list of tuples.\n\n    Example:\n        combinations_colors([1,2,3], 2) -> [(1,1),(1,2),(1,3),(2,2),(2,3),(3,3)]\n    \"\"\"\n    if n < 0:\n        return []\n    if n == 0:\n        return [()]\n\n    result: List[Tuple[Any, ...]] = []\n\n    def backtrack(start: int, k: int, path: List[Any]) -> None:\n        if k == 0:\n            result.append(tuple(path))\n            return\n        for i in range(start, len(lst)):\n            path.append(lst[i])\n            backtrack(i, k - 1, path)\n            path.pop()\n\n    if not lst and n > 0:\n        return []\n    backtrack(0, n, [])\n    return result"}
{"benchmark": "mbpp", "task_id": "244", "prompt": "Write a python function to find the next perfect square greater than a given number.", "reference_code": "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN ", "test_imports": [], "test_list": ["assert next_Perfect_Square(35) == 36", "assert next_Perfect_Square(6) == 9", "assert next_Perfect_Square(9) == 16"], "model_name": "openai/gpt-5", "generated_code": "from math import isqrt\n\ndef next_Perfect_Square(n):\n    \"\"\"\n    Return the smallest perfect square strictly greater than the given number n.\n    For negative n, the next perfect square is 0.\n    \"\"\"\n    if n < 0:\n        return 0\n    k = isqrt(n) + 1\n    return k * k"}
{"benchmark": "mbpp", "task_id": "261", "prompt": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.", "reference_code": "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "test_imports": [], "test_list": ["assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)", "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)", "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"], "model_name": "openai/gpt-5", "generated_code": "def division_elements(tuple1, tuple2):\n    \"\"\"\n    Perform element-wise division across two tuples.\n\n    Args:\n        tuple1 (tuple): First tuple of numeric values (numerators).\n        tuple2 (tuple): Second tuple of numeric values (denominators).\n\n    Returns:\n        tuple: A tuple containing the result of element-wise division.\n\n    Notes:\n        - The operation is performed up to the length of the shorter tuple.\n        - Standard Python division is used; division by zero will raise ZeroDivisionError.\n    \"\"\"\n    return tuple(a / b for a, b in zip(tuple1, tuple2))"}
{"benchmark": "mbpp", "task_id": "284", "prompt": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.", "reference_code": "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element", "test_imports": [], "test_list": ["assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False", "assert check_element([1,2,3,4],7)==False", "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"], "model_name": "openai/gpt-5", "generated_code": "def check_element(lst, element):\n    \"\"\"\n    Check whether all items in the list are equal to the given element.\n\n    Args:\n        lst (list): The list to check.\n        element: The element to compare against.\n\n    Returns:\n        bool: True if all items in the list are equal to element, False otherwise.\n              Returns True for an empty list.\n    \"\"\"\n    return all(item == element for item in lst)"}
{"benchmark": "mbpp", "task_id": "285", "prompt": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.", "reference_code": "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False", "test_imports": [], "test_list": ["assert text_match_two_three(\"ac\")==(False)", "assert text_match_two_three(\"dc\")==(False)", "assert text_match_two_three(\"abbbba\")==(True)"], "model_name": "openai/gpt-5", "generated_code": "import re\n\ndef text_match_two_three(text: str) -> bool:\n    \"\"\"\n    Check whether the input string contains 'a' followed by two or three 'b' characters.\n    Returns True if such a pattern exists anywhere in the string, otherwise False.\n    \"\"\"\n    return re.search(r\"ab{2,3}\", text) is not None"}
{"benchmark": "mbpp", "task_id": "265", "prompt": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.", "reference_code": "def list_split(S, step):\n    return [S[i::step] for i in range(step)]", "test_imports": [], "test_list": ["assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]", "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]", "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]"], "model_name": "openai/gpt-5", "generated_code": "from typing import List, Any\n\ndef list_split(lst: List[Any], n: int) -> List[List[Any]]:\n    \"\"\"\n    Split a list into sublists of length n (except possibly the last one).\n\n    Args:\n        lst: The list to split.\n        n: The chunk size; must be a positive integer.\n\n    Returns:\n        A list of lists where each inner list has up to n elements.\n\n    Raises:\n        TypeError: If n is not an integer.\n        ValueError: If n <= 0.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return [lst[i:i + n] for i in range(0, len(lst), n)]"}
{"benchmark": "mbpp", "task_id": "264", "prompt": "Write a function to calculate a dog's age in dog's years.", "reference_code": "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age", "test_imports": [], "test_list": ["assert dog_age(12)==61", "assert dog_age(15)==73", "assert dog_age(24)==109"], "model_name": "openai/gpt-5", "generated_code": "from typing import Union\n\ndef dog_age(human_years: Union[int, float]) -> Union[int, float]:\n    \"\"\"\n    Calculate a dog's age in dog years using the common 7x rule.\n    \n    Parameters:\n        human_years (int|float): The dog's age in human years. Must be non-negative.\n    \n    Returns:\n        int|float: The dog's age in dog years. Returns int if input is int, else float.\n    \n    Raises:\n        TypeError: If human_years is not a number (int or float) or is a boolean.\n        ValueError: If human_years is negative.\n    \"\"\"\n    if isinstance(human_years, bool) or not isinstance(human_years, (int, float)):\n        raise TypeError(\"human_years must be an int or float (non-boolean).\")\n    if human_years < 0:\n        raise ValueError(\"human_years must be non-negative.\")\n    return human_years * 7"}
{"benchmark": "mbpp", "task_id": "287", "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.", "reference_code": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)", "test_imports": [], "test_list": ["assert square_Sum(2) == 20", "assert square_Sum(3) == 56", "assert square_Sum(4) == 120"], "model_name": "openai/gpt-5", "generated_code": "def square_Sum(n: int) -> int:\n    \"\"\"\n    Return the sum of squares of the first n even natural numbers.\n    For n <= 0, returns 0.\n    Uses the formula: sum_{k=1..n} (2k)^2 = (2 * n * (n + 1) * (2n + 1)) // 3\n    \"\"\"\n    if n <= 0:\n        return 0\n    return (2 * n * (n + 1) * (2 * n + 1)) // 3"}
{"benchmark": "mbpp", "task_id": "267", "prompt": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.", "reference_code": "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) ", "test_imports": [], "test_list": ["assert square_Sum(2) == 10", "assert square_Sum(3) == 35", "assert square_Sum(4) == 84"], "model_name": "openai/gpt-5", "generated_code": "def square_Sum(n: int) -> int:\n    \"\"\"\n    Return the sum of the squares of the first n odd natural numbers.\n    Uses the closed-form formula: sum_{k=1..n} (2k-1)^2 = n(2n-1)(2n+1)/3 = n(4n^2 - 1)/3\n\n    For n <= 0, returns 0.\n    \"\"\"\n    if n <= 0:\n        return 0\n    return (n * (4 * n * n - 1)) // 3"}
{"benchmark": "mbpp", "task_id": "249", "prompt": "Write a function to find the intersection of two arrays.", "reference_code": "def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result", "test_imports": [], "test_list": ["assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]", "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]", "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"], "model_name": "openai/gpt-5", "generated_code": "from typing import List, Any, Iterable\n\n\ndef intersection_array(arr1: Iterable[Any], arr2: Iterable[Any]) -> List[Any]:\n    \"\"\"\n    Return the intersection of two arrays (iterables) as a list of unique elements,\n    preserving their first occurrence order from arr1.\n\n    - If an element appears multiple times in both arrays, it will appear once in the result.\n    - If either input is None, returns an empty list.\n    - Works with both hashable and unhashable elements (falls back to O(n*m) checks for unhashables).\n    \"\"\"\n    if arr1 is None or arr2 is None:\n        return []\n\n    # Convert to list to support multiple iterations.\n    list1 = list(arr1)\n    list2 = list(arr2)\n\n    result: List[Any] = []\n\n    # Try hash-based fast path if elements are hashable.\n    try:\n        set2 = set(list2)\n        seen = set()\n        for x in list1:\n            # Using try/except in case x itself is unhashable\n            try:\n                if x in set2 and x not in seen:\n                    result.append(x)\n                    seen.add(x)\n            except TypeError:\n                # Fallback for this element only if unhashable\n                if x in list2 and x not in result:\n                    result.append(x)\n    except TypeError:\n        # Fallback for collections with unhashable elements\n        for x in list1:\n            if x in list2 and x not in result:\n                result.append(x)\n\n    return result"}
{"benchmark": "mbpp", "task_id": "259", "prompt": "Write a function to maximize the given two tuples.", "reference_code": "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ", "test_imports": [], "test_list": ["assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))", "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))", "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"], "model_name": "openai/gpt-5", "generated_code": "from typing import Tuple, Iterable, Any\n\ndef maximize_elements(t1: Tuple[Any, ...], t2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    \"\"\"\n    Return a tuple containing the element-wise maximum of two tuples.\n    If tuples have different lengths, leftover elements from the longer tuple are appended unchanged.\n\n    Parameters:\n    - t1: First input tuple.\n    - t2: Second input tuple.\n\n    Returns:\n    - A tuple with the element-wise maxima for overlapping positions and remaining elements from the longer tuple.\n    \"\"\"\n    # Coerce to tuples to support any iterable-like inputs\n    t1 = tuple(t1)\n    t2 = tuple(t2)\n\n    # Element-wise maximum for overlapping indices\n    result = [max(a, b) for a, b in zip(t1, t2)]\n\n    # Append remaining elements from the longer tuple, if any\n    len1, len2 = len(t1), len(t2)\n    if len1 > len2:\n        result.extend(t1[len2:])\n    elif len2 > len1:\n        result.extend(t2[len1:])\n\n    return tuple(result)"}
{"benchmark": "mbpp", "task_id": "279", "prompt": "Write a function to find the nth decagonal number.", "reference_code": "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n ", "test_imports": [], "test_list": ["assert is_num_decagonal(3) == 27", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(10) == 370"], "model_name": "openai/gpt-5", "generated_code": "def is_num_decagonal(n):\n    \"\"\"\n    Return the nth decagonal number.\n\n    The nth decagonal number is given by the formula:\n    D_n = n * (4n - 3)\n\n    Parameters:\n    n (int): The position (1-indexed) in the sequence.\n\n    Returns:\n    int: The nth decagonal number.\n    \"\"\"\n    return n * (4 * n - 3)"}
{"benchmark": "mbpp", "task_id": "269", "prompt": "Write a function to find the ascii value of a character.", "reference_code": "def ascii_value(k):\n  ch=k\n  return ord(ch)", "test_imports": [], "test_list": ["assert ascii_value('A')==65", "assert ascii_value('R')==82", "assert ascii_value('S')==83"], "model_name": "openai/gpt-5", "generated_code": "def ascii_value(c):\n    \"\"\"\n    Return the ASCII (Unicode code point) integer value of the given character.\n\n    - If c is a string, returns ord of its first character.\n    - If c is bytes, returns the integer value of its first byte.\n    - Raises ValueError for empty inputs.\n    - Raises TypeError for unsupported types.\n    \"\"\"\n    if isinstance(c, bytes):\n        if not c:\n            raise ValueError(\"ascii_value expects a non-empty bytes object.\")\n        return c[0]\n    if isinstance(c, str):\n        if not c:\n            raise ValueError(\"ascii_value expects a non-empty string.\")\n        return ord(c[0])\n    raise TypeError(\"ascii_value expects a string or bytes input.\")"}
{"benchmark": "mbpp", "task_id": "277", "prompt": "Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.", "reference_code": "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result", "test_imports": [], "test_list": ["assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}", "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}", "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"], "model_name": "openai/gpt-5", "generated_code": "def dict_filter(d, n):\n    \"\"\"\n    Return a new dictionary containing only the items from d whose values are >= n.\n    If a value cannot be compared to n, that item is skipped.\n    \"\"\"\n    result = {}\n    for k, v in d.items():\n        try:\n            if v >= n:\n                result[k] = v\n        except TypeError:\n            # Skip items where the value is not comparable to n\n            continue\n    return result"}
{"benchmark": "mbpp", "task_id": "282", "prompt": "Write a function to subtract two lists element-wise.", "reference_code": "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)", "test_imports": [], "test_list": ["assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]", "assert sub_list([1,2],[3,4])==[-2,-2]", "assert sub_list([90,120],[50,70])==[40,50]"], "model_name": "openai/gpt-5", "generated_code": "from typing import Iterable, List, Any\n\ndef sub_list(list1, list2):\n    \"\"\"\n    Subtract two iterables element-wise and return a list of differences.\n\n    For each pair (x, y) from list1 and list2 at the same position,\n    computes x - y. If the iterables are of different lengths, pairs\n    are taken up to the length of the shorter one.\n\n    Parameters:\n        list1: Iterable of numbers.\n        list2: Iterable of numbers.\n\n    Returns:\n        List of element-wise differences.\n    \"\"\"\n    return [x - y for x, y in zip(list1, list2)]"}
{"benchmark": "mbpp", "task_id": "246", "prompt": "Write a function for computing square roots using the babylonian method.", "reference_code": "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;", "test_imports": ["import math"], "test_list": ["assert math.isclose(babylonian_squareroot(10), 3.162277660168379, rel_tol=0.001)", "assert math.isclose(babylonian_squareroot(2), 1.414213562373095, rel_tol=0.001)", "assert math.isclose(babylonian_squareroot(9), 3.0, rel_tol=0.001)"], "model_name": "openai/gpt-5", "generated_code": "from typing import Optional\nimport math\n\ndef babylonian_squareroot(value, tolerance: float = 1e-12, max_iterations: int = 1000, initial_guess: Optional[float] = None) -> float:\n    \"\"\"\n    Compute the square root of a non-negative number using the Babylonian (Heron's) method.\n\n    Parameters:\n    - value: The non-negative number to take the square root of. Must be real-convertible to float.\n    - tolerance: Positive convergence tolerance (absolute with a relative safeguard).\n    - max_iterations: Maximum number of iterations to run.\n    - initial_guess: Optional positive starting guess. If None, a robust guess is computed.\n\n    Returns:\n    - float approximation of sqrt(value).\n\n    Raises:\n    - TypeError: If value cannot be interpreted as a real number.\n    - ValueError: If value is negative, or tolerance/max_iterations are not positive.\n    \"\"\"\n    # Coerce input to float (handle bools too)\n    if isinstance(value, bool):\n        n = 1.0 if value else 0.0\n    else:\n        try:\n            n = float(value)\n        except (TypeError, ValueError) as exc:\n            raise TypeError(\"value must be a real number\") from exc\n\n    if n < 0.0:\n        raise ValueError(\"square root is not defined for negative numbers\")\n    if n == 0.0:\n        return 0.0\n\n    if tolerance <= 0.0:\n        raise ValueError(\"tolerance must be positive\")\n    if max_iterations <= 0:\n        raise ValueError(\"max_iterations must be positive\")\n\n    # Determine initial guess\n    if initial_guess is not None:\n        try:\n            x = float(initial_guess)\n        except (TypeError, ValueError) as exc:\n            raise TypeError(\"initial_guess must be a real number\") from exc\n        if x <= 0.0:\n            # Fallback to an internally computed guess\n            initial_guess = None\n        else:\n            # Proceed with provided positive guess\n            pass\n\n    if initial_guess is None:\n        # Robust initial guess using exponent scaling:\n        # If n = m * 2^e with m in [0.5, 1), then sqrt(n) ~ 2^{e/2}\n        m, e = math.frexp(n)\n        x = math.ldexp(1.0, e // 2)\n        # One quick refinement to get into the right ballpark\n        x = 0.5 * (x + n / x)\n\n    # Babylonian iterations\n    for _ in range(max_iterations):\n        new_x = 0.5 * (x + n / x)\n        # Converge when the update is small in both absolute and relative sense\n        if abs(new_x - x) <= max(tolerance, tolerance * abs(new_x)):\n            return new_x\n        x = new_x\n\n    # Return the last iterate if not converged within max_iterations\n    return x"}
{"benchmark": "mbpp", "task_id": "245", "prompt": "Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.", "reference_code": "def max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum", "test_imports": [], "test_list": ["assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194", "assert max_sum([80, 60, 30, 40, 20, 10]) == 210", "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30]) == 138"], "model_name": "openai/gpt-5", "generated_code": "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    \"\"\"\n    Returns the maximum sum of a bitonic subsequence in the array.\n    A bitonic subsequence first strictly increases, then strictly decreases.\n    Either increasing or decreasing part may be empty.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Maximum sum of increasing subsequence ending at i\n    lis_sum = [0] * n\n    for i in range(n):\n        best = 0\n        ai = arr[i]\n        for j in range(i):\n            if arr[j] < ai and lis_sum[j] > best:\n                best = lis_sum[j]\n        lis_sum[i] = ai + best\n\n    # Maximum sum of decreasing subsequence starting at i\n    lds_sum = [0] * n\n    for i in range(n - 1, -1, -1):\n        best = 0\n        ai = arr[i]\n        for k in range(i + 1, n):\n            if arr[k] < ai and lds_sum[k] > best:\n                best = lds_sum[k]\n        lds_sum[i] = ai + best\n\n    # Combine to get maximum bitonic sum with peak at i\n    ans = float(\"-inf\")\n    for i in range(n):\n        total = lis_sum[i] + lds_sum[i] - arr[i]\n        if total > ans:\n            ans = total\n\n    return ans"}
{"benchmark": "mbpp", "task_id": "290", "prompt": "Write a function to find the list of maximum length in a list of lists.", "reference_code": "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)", "test_imports": [], "test_list": ["assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])", "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])", "assert max_length([[5], [15,20,25]])==(3, [15,20,25])"], "model_name": "openai/gpt-5", "generated_code": "from typing import List, Sequence, Any\n\n\ndef max_length(list_of_lists: List[Sequence[Any]]) -> Sequence[Any]:\n    \"\"\"\n    Return the sublist with the maximum length from a list of lists.\n    If multiple sublists share the maximum length, the first encountered is returned.\n    If the input list is empty, returns an empty list.\n\n    Parameters:\n        list_of_lists (List[Sequence[Any]]): A list containing sublists (or sequences).\n\n    Returns:\n        Sequence[Any]: The sublist with the greatest length, or [] if input is empty.\n    \"\"\"\n    if not list_of_lists:\n        return []\n\n    max_item = list_of_lists[0]\n    try:\n        max_len = len(max_item)\n    except TypeError:\n        max_len = 0\n\n    for item in list_of_lists[1:]:\n        try:\n            current_len = len(item)\n        except TypeError:\n            current_len = 0\n        if current_len > max_len:\n            max_len = current_len\n            max_item = item\n\n    return max_item"}
{"benchmark": "mbpp", "task_id": "271", "prompt": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.", "reference_code": "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; ", "test_imports": [], "test_list": ["assert even_Power_Sum(2) == 1056", "assert even_Power_Sum(3) == 8832", "assert even_Power_Sum(1) == 32"], "model_name": "openai/gpt-5", "generated_code": "def even_Power_Sum(n: int) -> int:\n    \"\"\"\n    Compute the sum of the first n even natural numbers raised to the fifth power.\n    That is, sum_{k=1..n} (2k)^5.\n    \"\"\"\n    if n <= 0:\n        return 0\n    # sum_{k=1}^n k^5 = n^2 (n+1)^2 (2n^2 + 2n - 1) / 12\n    nn = n\n    term = nn * nn * (nn + 1) * (nn + 1) * (2 * nn * nn + 2 * nn - 1)\n    sum_k5 = term // 12  # exact division\n    return 32 * sum_k5"}
{"benchmark": "mbpp", "task_id": "283", "prompt": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.", "reference_code": "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True", "test_imports": [], "test_list": ["assert validate(1234) == True", "assert validate(51241) == False", "assert validate(321) == True"], "model_name": "openai/gpt-5", "generated_code": "from collections import Counter\n\ndef validate(n: int) -> bool:\n    \"\"\"\n    Check whether the frequency of each digit in the integer n is less than\n    or equal to the digit itself.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    s = str(abs(n))\n    counts = Counter(s)\n    return all(counts[d] <= int(d) for d in counts)"}
{"benchmark": "mbpp", "task_id": "300", "prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.", "reference_code": "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res ", "test_imports": ["import math"], "test_list": ["assert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)", "assert math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001)", "assert math.isclose(count_binary_seq(3), 20.0, rel_tol=0.001)"], "model_name": "openai/gpt-5", "generated_code": "from math import comb\n\ndef count_binary_seq(n):\n    \"\"\"\n    Return the count of binary sequences of length 2n such that the sum of the first n bits\n    equals the sum of the last n bits.\n\n    This count equals the central binomial coefficient C(2n, n).\n\n    Parameters:\n        n (int): Half the length of the binary sequence. Must be a non-negative integer.\n\n    Returns:\n        int: The number of such binary sequences.\n\n    Raises:\n        ValueError: If n is not a non-negative integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    return comb(2 * n, n)"}
{"benchmark": "mbpp", "task_id": "100", "prompt": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.", "reference_code": "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i", "test_imports": [], "test_list": ["assert next_smallest_palindrome(99)==101", "assert next_smallest_palindrome(1221)==1331", "assert next_smallest_palindrome(120)==121"], "model_name": "openai/gpt-5", "generated_code": ""}
{"benchmark": "mbpp", "task_id": "292", "prompt": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).", "reference_code": "def find(n,m):  \n    q = n//m \n    return (q)", "test_imports": [], "test_list": ["assert find(10,3) == 3", "assert find(4,2) == 2", "assert find(20,5) == 4"], "model_name": "openai/gpt-5", "generated_code": "import math\n\ndef find(a, b):\n    \"\"\"\n    Return the quotient of two numbers rounded down to the nearest integer.\n    Equivalent to floor(a / b). Raises ZeroDivisionError if b is zero.\n    \"\"\"\n    return math.floor(a / b)"}
{"benchmark": "mbpp", "task_id": "235", "prompt": "Write a python function to set all even bits of a given number.", "reference_code": "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) ", "test_imports": [], "test_list": ["assert even_bit_set_number(10) == 10", "assert even_bit_set_number(20) == 30", "assert even_bit_set_number(30) == 30"], "model_name": "openai/gpt-5", "generated_code": ""}
{"benchmark": "mbpp", "task_id": "296", "prompt": "Write a python function to count inversions in an array.", "reference_code": "def get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count ", "test_imports": [], "test_list": ["assert get_Inv_Count([1,20,6,4,5]) == 5", "assert get_Inv_Count([1,2,1]) == 1", "assert get_Inv_Count([1,2,5,6,1]) == 3"], "model_name": "openai/gpt-5", "generated_code": "def get_Inv_Count(arr):\n    \"\"\"\n    Count the number of inversions in the input array.\n    An inversion is a pair (i, j) such that i < j and arr[i] > arr[j].\n\n    Args:\n        arr: Iterable of comparable elements.\n\n    Returns:\n        int: Number of inversions.\n    \"\"\"\n    try:\n        a = list(arr)\n    except TypeError:\n        return 0\n\n    n = len(a)\n    if n < 2:\n        return 0\n\n    temp = [None] * n\n\n    def merge_sort(left, right):\n        # Sort a[left:right] and return inversion count\n        if right - left <= 1:\n            return 0\n\n        mid = (left + right) // 2\n        inv = merge_sort(left, mid)\n        inv += merge_sort(mid, right)\n\n        i, j, k = left, mid, left\n        while i < mid and j < right:\n            if a[i] <= a[j]:\n                temp[k] = a[i]\n                i += 1\n            else:\n                temp[k] = a[j]\n                j += 1\n                inv += (mid - i)  # All remaining in left part are greater than a[j]\n            k += 1\n\n        while i < mid:\n            temp[k] = a[i]\n            i += 1\n            k += 1\n\n        while j < right:\n            temp[k] = a[j]\n            j += 1\n            k += 1\n\n        a[left:right] = temp[left:right]\n        return inv\n\n    return merge_sort(0, n)"}
{"benchmark": "mbpp", "task_id": "295", "prompt": "Write a function to return the sum of all divisors of a number.", "reference_code": "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)", "test_imports": [], "test_list": ["assert sum_div(8)==7", "assert sum_div(12)==16", "assert sum_div(7)==1"], "model_name": "openai/gpt-5", "generated_code": "def sum_div(n):\n    \"\"\"\n    Return the sum of all positive divisors of an integer n (including 1 and n).\n    For n == 0, returns 0. For negative n, uses abs(n).\n    \"\"\"\n    try:\n        n = int(n)\n    except (TypeError, ValueError):\n        raise ValueError(\"Input must be an integer or integer-convertible value.\")\n    if n == 0:\n        return 0\n    n = abs(n)\n    total = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            total += i\n            j = n // i\n            if j != i:\n                total += j\n        i += 1\n    return total"}
{"benchmark": "mbpp", "task_id": "310", "prompt": "Write a function to convert a given string to a tuple of characters.", "reference_code": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result", "test_imports": [], "test_list": ["assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')", "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')", "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"], "model_name": "openai/gpt-5", "generated_code": "def string_to_tuple(s):\n    \"\"\"\n    Convert a given string to a tuple of its characters.\n\n    Parameters:\n        s (str): The input string.\n\n    Returns:\n        tuple: A tuple containing each character from the input string.\n\n    Raises:\n        TypeError: If s is not a string.\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    return tuple(s)"}
{"benchmark": "mbpp", "task_id": "294", "prompt": "Write a function to find the maximum value in a given heterogeneous list.", "reference_code": "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)", "test_imports": [], "test_list": ["assert max_val(['Python', 3, 2, 4, 5, 'version'])==5", "assert max_val(['Python', 15, 20, 25])==25", "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"], "model_name": "openai/gpt-5", "generated_code": "from collections.abc import Iterable\n\ndef max_val(data):\n    \"\"\"\n    Find the maximum numeric value in a heterogeneous (possibly nested) list-like structure.\n    Traverses nested lists/tuples/sets and dict values. Ignores non-numeric scalars and strings.\n    Returns None if no numeric values are found.\n    \"\"\"\n    # Use an explicit stack to avoid recursion limits\n    stack = [data]\n    found = False\n    current_max = None\n\n    while stack:\n        item = stack.pop()\n\n        # Handle numbers (exclude bool which is a subclass of int)\n        if isinstance(item, (int, float)) and not isinstance(item, bool):\n            if not found:\n                current_max = item\n                found = True\n            else:\n                if item > current_max or (item != item and current_max != current_max):\n                    # NaN handling is tricky; by default, keep current_max unless it's NaN\n                    # This condition keeps current_max if item is NaN; if both NaN, unchanged.\n                    pass\n                else:\n                    current_max = item if item > current_max else current_max\n            continue\n\n        # For dictionaries, traverse values\n        if isinstance(item, dict):\n            stack.extend(item.values())\n            continue\n\n        # For iterable containers, traverse (but skip strings/bytes)\n        if isinstance(item, (list, tuple, set)):\n            stack.extend(item)\n            continue\n\n        # Ignore strings, bytes, complex numbers, and other non-numeric scalars\n        # No action needed\n\n    return current_max if found else None"}
{"benchmark": "mbpp", "task_id": "312", "prompt": "Write a function to find the volume of a cone.", "reference_code": "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume", "test_imports": ["import math"], "test_list": ["assert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)", "assert math.isclose(volume_cone(10,15), 1570.7963267948965, rel_tol=0.001)", "assert math.isclose(volume_cone(19,17), 6426.651371693521, rel_tol=0.001)"], "model_name": "openai/gpt-5", "generated_code": "import math\n\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculate the volume of a right circular cone.\n\n    Parameters:\n    - radius (float or int): The radius of the cone's base.\n    - height (float or int): The height of the cone.\n\n    Returns:\n    - float: The volume of the cone computed as (1/3) * pi * r^2 * h.\n    \"\"\"\n    return (math.pi * (radius ** 2) * height) / 3.0"}
{"benchmark": "mbpp", "task_id": "396", "prompt": "Write a function to check whether the given string starts and ends with the same character or not.", "reference_code": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" ", "test_imports": [], "test_list": ["assert check_char(\"abba\") == \"Valid\"", "assert check_char(\"a\") == \"Valid\"", "assert check_char(\"abcd\") == \"Invalid\""], "model_name": "openai/gpt-5", "generated_code": "def check_char(s: str) -> bool:\n    \"\"\"\n    Check whether the given string starts and ends with the same character.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        bool: True if the first and last characters are the same and the string is non-empty, False otherwise.\n    \"\"\"\n    return bool(s) and s[0] == s[-1]"}
{"benchmark": "mbpp", "task_id": "404", "prompt": "Write a python function to find the minimum of two numbers.", "reference_code": "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b ", "test_imports": [], "test_list": ["assert minimum(1,2) == 1", "assert minimum(-5,-4) == -5", "assert minimum(0,0) == 0"], "model_name": "openai/gpt-5", "generated_code": "def minimum(a, b):\n    \"\"\"\n    Return the minimum of two numbers.\n\n    Parameters:\n    - a: First number.\n    - b: Second number.\n\n    Returns:\n    - The smaller of a and b.\n    \"\"\"\n    return a if a <= b else b"}
{"benchmark": "mbpp", "task_id": "297", "prompt": "Write a function to flatten a given nested list structure.", "reference_code": "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list ", "test_imports": [], "test_list": ["assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]", "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]", "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"], "model_name": "openai/gpt-5", "generated_code": "from typing import Any, List, Tuple\n\n\ndef flatten_list(nested: Any) -> List[Any]:\n    \"\"\"\n    Flatten a nested list/tuple structure into a single list.\n\n    - Treats lists and tuples as containers to be flattened.\n    - Leaves other types (including strings, bytes, dicts, sets) as atomic elements.\n\n    Args:\n        nested: A potentially nested list/tuple structure.\n\n    Returns:\n        A flat list containing all non-list/tuple elements in order.\n    \"\"\"\n    result: List[Any] = []\n    stack: List[Any] = [nested]\n\n    while stack:\n        current = stack.pop()\n        if isinstance(current, (list, tuple)):\n            # Maintain order by pushing children in reverse\n            for item in reversed(current):\n                stack.append(item)\n        else:\n            result.append(current)\n\n    return result"}
{"benchmark": "mbpp", "task_id": "308", "prompt": "Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.", "reference_code": "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result", "test_imports": [], "test_list": ["assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]", "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]", "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"], "model_name": "openai/gpt-5", "generated_code": "from heapq import nlargest\nfrom typing import List, Sequence, Union\n\nNumber = Union[int, float]\n\n\ndef large_product(list1: Sequence[Number], list2: Sequence[Number], n: int) -> List[Number]:\n    \"\"\"\n    Return the n largest products formed by multiplying one element from list1 and one from list2.\n\n    - If n <= 0 or either list is empty, returns [].\n    - If n exceeds the number of possible products, returns all products in descending order.\n    - Duplicates are preserved if they arise from different factor pairs producing the same product.\n    \"\"\"\n    if n <= 0 or not list1 or not list2:\n        return []\n\n    products = [a * b for a in list1 for b in list2]\n    if n >= len(products):\n        return sorted(products, reverse=True)\n    return nlargest(n, products)"}
{"benchmark": "mbpp", "task_id": "405", "prompt": "Write a function to check whether an element exists within a tuple.", "reference_code": "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False", "test_imports": [], "test_list": ["assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True", "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False", "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"], "model_name": "openai/gpt-5", "generated_code": "def check_tuplex(tuplex, element):\n    \"\"\"\n    Check whether an element exists within a tuple.\n\n    Args:\n        tuplex (tuple): The tuple to search.\n        element: The element to look for.\n\n    Returns:\n        bool: True if element exists in tuplex, False otherwise.\n    \"\"\"\n    return element in tuplex"}
{"benchmark": "mbpp", "task_id": "395", "prompt": "Write a python function to find the first non-repeated character in a given string.", "reference_code": "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None", "test_imports": [], "test_list": ["assert first_non_repeating_character(\"abcabc\") == None", "assert first_non_repeating_character(\"abc\") == \"a\"", "assert first_non_repeating_character(\"ababc\") == \"c\""], "model_name": "openai/gpt-5", "generated_code": "from collections import Counter\nfrom typing import Optional\n\ndef first_non_repeating_character(s: str) -> Optional[str]:\n    \"\"\"\n    Return the first non-repeated character in the given string.\n    If no such character exists, return None.\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n\n    counts = Counter(s)\n    for ch in s:\n        if counts[ch] == 1:\n            return ch\n    return None"}
{"benchmark": "mbpp", "task_id": "309", "prompt": "Write a python function to find the maximum of two numbers.", "reference_code": "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b ", "test_imports": [], "test_list": ["assert maximum(5,10) == 10", "assert maximum(-1,-2) == -1", "assert maximum(9,7) == 9"], "model_name": "openai/gpt-5", "generated_code": "def maximum(a, b):\n    \"\"\"\n    Return the maximum of two numbers.\n\n    Args:\n        a: First number.\n        b: Second number.\n\n    Returns:\n        The greater of a and b. If they are equal, returns a.\n    \"\"\"\n    return a if a >= b else b"}
{"benchmark": "mbpp", "task_id": "268", "prompt": "Write a function to find the n'th star number.", "reference_code": "def find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) ", "test_imports": [], "test_list": ["assert find_star_num(3) == 37", "assert find_star_num(4) == 73", "assert find_star_num(5) == 121"], "model_name": "openai/gpt-5", "generated_code": "def find_star_num(n):\n    \"\"\"\n    Compute the n-th star number (centered hexagram number).\n\n    The formula for the n-th star number is:\n        S(n) = 6 * n * (n - 1) + 1\n\n    Parameters:\n        n (int): The 1-based index of the star number.\n\n    Returns:\n        int: The n-th star number.\n    \"\"\"\n    return 6 * n * (n - 1) + 1"}
{"benchmark": "mbpp", "task_id": "278", "prompt": "Write a function to find the number of elements that occurs before the tuple element in the given tuple.", "reference_code": "def count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) ", "test_imports": [], "test_list": ["assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3", "assert count_first_elements((2, 9, (5, 7), 11) ) == 2", "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"], "model_name": "openai/gpt-5", "generated_code": "from typing import Iterable, Any\n\ndef count_first_elements(data: Iterable[Any]) -> int:\n    \"\"\"\n    Returns the number of elements that occur before the first element\n    in the input that is itself a tuple. If no tuple element is found,\n    returns 0.\n\n    Parameters:\n    - data: An iterable (typically a tuple) possibly containing a tuple element.\n\n    Example:\n    - count_first_elements((1, 2, (3, 4), 5)) -> 2\n    - count_first_elements((1, 2, 3)) -> 0\n    \"\"\"\n    for i, v in enumerate(data):\n        if isinstance(v, tuple):\n            return i\n    return 0"}
{"benchmark": "mbpp", "task_id": "392", "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).", "reference_code": "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]", "test_imports": [], "test_list": ["assert get_max_sum(60) == 106", "assert get_max_sum(10) == 12", "assert get_max_sum(2) == 2"], "model_name": "openai/gpt-5", "generated_code": "from functools import lru_cache\n\ndef get_max_sum(n):\n    \"\"\"\n    Compute the maximum sum using the recurrence:\n    f(n) = max(f(n//2) + f(n//3) + f(n//4) + f(n//5), n)\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    if n < 0:\n        # For negative inputs, returning n keeps the function well-defined;\n        # Adjust if a different behavior is required.\n        return n\n\n    @lru_cache(maxsize=None)\n    def f(x):\n        if x == 0:\n            return 0\n        split_sum = f(x // 2) + f(x // 3) + f(x // 4) + f(x // 5)\n        return split_sum if split_sum > x else x\n\n    return f(n)"}
{"benchmark": "mbpp", "task_id": "393", "prompt": "Write a function to find the list with maximum length.", "reference_code": "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)", "test_imports": [], "test_list": ["assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])", "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])", "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"], "model_name": "openai/gpt-5", "generated_code": "def max_length_list(lists):\n    \"\"\"\n    Return the element with the maximum length from an iterable of iterables.\n    If multiple elements share the maximum length, the first encountered is returned.\n    If the input is empty or None, returns an empty list.\n\n    Parameters:\n        lists (iterable): An iterable containing elements that support len().\n\n    Returns:\n        The element with the maximum length, or [] if input is empty/None.\n    \"\"\"\n    if not lists:\n        return []\n    try:\n        return max(lists, key=len)\n    except ValueError:\n        # Handles the case where 'lists' is an empty iterable (e.g., [])\n        return []"}
{"benchmark": "mbpp", "task_id": "305", "prompt": "Write a function to return two words from a list of words starting with letter 'p'.", "reference_code": "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()", "test_imports": [], "test_list": ["assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')", "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')", "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"], "model_name": "openai/gpt-5", "generated_code": "from typing import Iterable, List, Any\n\ndef start_withp(words: Iterable[Any]) -> List[str]:\n    \"\"\"\n    Return up to two words from the given iterable that start with the letter 'p' (case-insensitive).\n    Preserves the original order. Non-string items are converted to strings.\n    \"\"\"\n    result: List[str] = []\n    for w in words:\n        s = str(w)\n        if s and s[0].lower() == 'p':\n            result.append(s)\n            if len(result) == 2:\n                break\n    return result"}
{"benchmark": "mbpp", "task_id": "388", "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.", "reference_code": "def highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res ", "test_imports": [], "test_list": ["assert highest_Power_of_2(10) == 8", "assert highest_Power_of_2(19) == 16", "assert highest_Power_of_2(32) == 32"], "model_name": "openai/gpt-5", "generated_code": "def highest_Power_of_2(n):\n    \"\"\"\n    Return the highest power of 2 that is less than or equal to n.\n    If n <= 0, returns 0.\n\n    Parameters:\n        n (int): The input integer.\n\n    Returns:\n        int: The highest power of 2 <= n, or 0 if n <= 0.\n    \"\"\"\n    if n is None:\n        return 0\n    try:\n        n_int = int(n)\n    except (TypeError, ValueError):\n        return 0\n\n    if n_int <= 0:\n        return 0\n    return 1 << (n_int.bit_length() - 1)"}
{"benchmark": "mbpp", "task_id": "291", "prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.", "reference_code": "def count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]", "test_imports": [], "test_list": ["assert count_no_of_ways(2, 4) == 16", "assert count_no_of_ways(3, 2) == 6", "assert count_no_of_ways(4, 4) == 228"], "model_name": "openai/gpt-5", "generated_code": "def count_no_of_ways(n, k):\n    \"\"\"\n    Returns the number of ways to paint a fence with n posts using k colors such that\n    no more than 2 adjacent posts have the same color.\n\n    Parameters:\n    - n (int): number of fence posts\n    - k (int): number of colors\n\n    Returns:\n    - int: number of valid painting ways\n    \"\"\"\n    # Handle non-positive inputs\n    if not isinstance(n, int) or not isinstance(k, int):\n        raise TypeError(\"n and k must be integers\")\n    if n <= 0 or k <= 0:\n        return 0\n\n    # Base cases\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    # DP using the recurrence:\n    # total[i] = (k - 1) * (total[i - 1] + total[i - 2])\n    prev2 = k          # total[1]\n    prev1 = k * k      # total[2]\n    for _ in range(3, n + 1):\n        curr = (k - 1) * (prev1 + prev2)\n        prev2, prev1 = prev1, curr\n\n    return prev1"}
{"benchmark": "mbpp", "task_id": "394", "prompt": "Write a function to check if given tuple contains no duplicates.", "reference_code": "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res ", "test_imports": [], "test_list": ["assert check_distinct((1, 4, 5, 6, 1, 4)) == False", "assert check_distinct((1, 4, 5, 6)) == True", "assert check_distinct((2, 3, 4, 5, 6)) == True"], "model_name": "openai/gpt-5", "generated_code": "from typing import Tuple, Any\n\ndef check_distinct(items: Tuple[Any, ...]) -> bool:\n    \"\"\"\n    Check if the given tuple contains no duplicate elements.\n\n    Returns True if all elements are distinct, otherwise False.\n    Handles both hashable and unhashable elements.\n    \"\"\"\n    try:\n        return len(set(items)) == len(items)\n    except TypeError:\n        seen = []\n        for x in items:\n            if any(x == y for y in seen):\n                return False\n            seen.append(x)\n        return True"}
{"benchmark": "mbpp", "task_id": "123", "prompt": "Write a function to sum all amicable numbers from 1 to a specified number.", "reference_code": "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)", "test_imports": [], "test_list": ["assert amicable_numbers_sum(999)==504", "assert amicable_numbers_sum(9999)==31626", "assert amicable_numbers_sum(99)==0"], "model_name": "openai/gpt-5", "generated_code": ""}
{"benchmark": "mbpp", "task_id": "252", "prompt": "Write a python function to convert complex numbers to polar coordinates.", "reference_code": "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) ", "test_imports": [], "test_list": ["assert convert(1) == (1.0, 0.0)", "assert convert(4) == (4.0,0.0)", "assert convert(5) == (5.0,0.0)"], "model_name": "openai/gpt-5", "generated_code": "import math\nfrom numbers import Real\nfrom collections.abc import Iterable\n\n\ndef convert(z):\n    \"\"\"\n    Convert a complex number to polar coordinates (r, theta), where:\n      - r is the magnitude (non-negative float)\n      - theta is the angle in radians in the range [-pi, pi]\n\n    Accepted input formats for z:\n      - complex instance (e.g., 3+4j)\n      - real number (int/float), interpreted as real part with zero imaginary part\n      - iterable of two numbers (real, imag), e.g., (3, 4) or [3, 4]\n      - string representing a complex number using 'j' or 'i' (e.g., '3+4j', '3+4i')\n        Also accepts \"a,b\" or \"a b\" representing (real, imag)\n\n    Returns:\n      (r, theta) as a tuple of floats.\n    \"\"\"\n    a: float\n    b: float\n\n    # Direct complex instance\n    if isinstance(z, complex):\n        a = float(z.real)\n        b = float(z.imag)\n\n    # Real numbers (int/float)\n    elif isinstance(z, Real):\n        a = float(z)\n        b = 0.0\n\n    # Strings: try complex parsing, then \"a,b\" or \"a b\"\n    elif isinstance(z, str):\n        s = z.strip()\n        # Normalize 'i' to Python's 'j'\n        s_norm = (\n            s.replace(\"I\", \"j\")\n            .replace(\"J\", \"j\")\n            .replace(\"i\", \"j\")\n        )\n        try:\n            c = complex(s_norm)\n            a = float(c.real)\n            b = float(c.imag)\n        except ValueError:\n            # Try to parse as \"a,b\" or \"a b\", optionally with surrounding parentheses\n            s_clean = s.replace(\"(\", \"\").replace(\")\", \"\")\n            parts = [p for p in s_clean.replace(\",\", \" \").split() if p]\n            if len(parts) == 2:\n                try:\n                    a = float(parts[0])\n                    b = float(parts[1])\n                except Exception as e:\n                    raise ValueError(f\"Cannot parse complex number from string: {z!r}\") from e\n            else:\n                raise ValueError(f\"Cannot parse complex number from string: {z!r}\")\n\n    # Iterable of two numbers (e.g., tuple/list/array)\n    elif isinstance(z, Iterable):\n        try:\n            items = list(z)\n        except TypeError as e:\n            raise TypeError(\"Unsupported iterable type for complex conversion\") from e\n        if len(items) != 2:\n            raise ValueError(\"Iterable input must have exactly two elements (real, imag)\")\n        try:\n            a = float(items[0])\n            b = float(items[1])\n        except Exception as e:\n            raise TypeError(\"Both elements of the iterable must be numbers\") from e\n\n    # Fallback for objects with .real and .imag (e.g., numpy complex types)\n    else:\n        try:\n            a = float(getattr(z, \"real\"))\n            b = float(getattr(z, \"imag\"))\n        except Exception as e:\n            raise TypeError(\"Unsupported type for complex conversion\") from e\n\n    r = math.hypot(a, b)\n    theta = math.atan2(b, a)\n    return (r, theta)"}
{"benchmark": "mbpp", "task_id": "281", "prompt": "Write a python function to check if the elements of a given list are unique or not.", "reference_code": "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True", "test_imports": [], "test_list": ["assert all_unique([1,2,3]) == True", "assert all_unique([1,2,1,2]) == False", "assert all_unique([1,2,3,4,5]) == True"], "model_name": "openai/gpt-5", "generated_code": "def all_unique(lst):\n    \"\"\"\n    Return True if all elements in the given list are unique under Python equality semantics, else False.\n    Works with both hashable and unhashable elements.\n    \"\"\"\n    # Fast path for hashable elements\n    try:\n        return len(set(lst)) == len(lst)\n    except TypeError:\n        # Fallback for unhashable or mixed elements\n        seen = []\n        for x in lst:\n            for y in seen:\n                try:\n                    if x == y:\n                        return False\n                except Exception:\n                    # If equality comparison raises, fallback to identity check\n                    if x is y:\n                        return False\n            seen.append(x)\n        return True"}
{"benchmark": "mbpp", "task_id": "412", "prompt": "Write a python function to remove odd numbers from a given list.", "reference_code": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l", "test_imports": [], "test_list": ["assert remove_odd([1,2,3]) == [2]", "assert remove_odd([2,4,6]) == [2,4,6]", "assert remove_odd([10,20,3]) == [10,20]"], "model_name": "openai/gpt-5", "generated_code": "from typing import Any, List\n\ndef remove_odd(items: List[Any]) -> List[Any]:\n    \"\"\"\n    Return a new list with all odd integers removed from the input list.\n    - Even integers are kept.\n    - Booleans are preserved (not treated as integers).\n    - Non-integer types are preserved as-is.\n    \"\"\"\n    result = []\n    for x in items:\n        if isinstance(x, bool):\n            # Preserve booleans; don't treat True as 1 or False as 0 for this purpose\n            result.append(x)\n        elif isinstance(x, int):\n            if x % 2 == 0:\n                result.append(x)\n        else:\n            # Non-integer types are unaffected\n            result.append(x)\n    return result"}
{"benchmark": "mbpp", "task_id": "419", "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.", "reference_code": "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum", "test_imports": [], "test_list": ["assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243", "assert round_and_sum([5,2,9,24.3,29])==345", "assert round_and_sum([25.0,56.7,89.2])==513"], "model_name": "openai/gpt-5", "generated_code": "from typing import Iterable, Union\n\nNumber = Union[int, float]\n\n\ndef round_and_sum(numbers: Iterable[Number]) -> Number:\n    \"\"\"\n    Round each number in the given iterable and return the total sum\n    multiplied by the length of the iterable.\n\n    Parameters:\n    - numbers: Iterable of integers/floats.\n\n    Returns:\n    - The product of (sum of rounded numbers) and (length of the iterable).\n    \"\"\"\n    # Convert to list to compute length and iterate once\n    nums_list = list(numbers)\n    total = sum(round(x) for x in nums_list)\n    return total * len(nums_list)"}
{"benchmark": "mbpp", "task_id": "407", "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.", "reference_code": "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False", "test_imports": [], "test_list": ["assert rearrange_bigger(12)==21", "assert rearrange_bigger(10)==False", "assert rearrange_bigger(102)==120"], "model_name": "openai/gpt-5", "generated_code": "from typing import Union\n\ndef rearrange_bigger(n: int) -> int:\n    \"\"\"\n    Return the next bigger number formed by rearranging the digits of n.\n    If no such number exists, return -1.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    if n < 0:\n        return -1\n\n    s = list(str(n))\n    # Find the first index i from the right such that s[i] < s[i+1]\n    i = len(s) - 2\n    while i >= 0 and s[i] >= s[i + 1]:\n        i -= 1\n    if i < 0:\n        return -1  # digits are in non-increasing order, no larger permutation\n\n    # Find the smallest digit on right side of i that is greater than s[i]\n    j = len(s) - 1\n    while j > i and s[j] <= s[i]:\n        j -= 1\n\n    # Swap\n    s[i], s[j] = s[j], s[i]\n    # Sort the suffix after position i to get the smallest possible number\n    s[i + 1:] = sorted(s[i + 1:])\n\n    # Convert back to int\n    try:\n        return int(\"\".join(s))\n    except ValueError:\n        # Should not occur for valid digits\n        return -1"}
{"benchmark": "mbpp", "task_id": "420", "prompt": "Write a python function to find the cube sum of first n even natural numbers.", "reference_code": "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum", "test_imports": [], "test_list": ["assert cube_Sum(2) == 72", "assert cube_Sum(3) == 288", "assert cube_Sum(4) == 800"], "model_name": "openai/gpt-5", "generated_code": "def cube_Sum(n):\n    \"\"\"\n    Return the sum of cubes of the first n even natural numbers.\n    That is, sum_{k=1..n} (2k)^3 = 2 * n^2 * (n + 1)^2.\n    \n    If n <= 0, returns 0.\n    \"\"\"\n    if n <= 0:\n        return 0\n    return 2 * n * n * (n + 1) * (n + 1)"}
{"benchmark": "mbpp", "task_id": "401", "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.", "reference_code": "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ", "test_imports": [], "test_list": ["assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))", "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))", "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"], "model_name": "openai/gpt-5", "generated_code": "from typing import Any, Tuple\n\ndef add_nested_tuples(t1: Tuple[Any, ...], t2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    \"\"\"\n    Perform index-wise addition of elements in two nested tuples.\n    Supports arbitrary levels of nesting; at each tuple level, zips to the shortest length.\n    \n    Example:\n        ((1, 2), (3, 4)) + ((5, 6), (7, 8)) -> ((6, 8), (10, 12))\n    \"\"\"\n    def _add(a: Any, b: Any) -> Any:\n        if isinstance(a, tuple) and isinstance(b, tuple):\n            return tuple(_add(x, y) for x, y in zip(a, b))\n        return a + b\n    return _add(t1, t2)"}
{"benchmark": "mbpp", "task_id": "418", "prompt": "Write a python function to find the element of a list having maximum length.", "reference_code": "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList", "test_imports": [], "test_list": ["assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']", "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]", "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"], "model_name": "openai/gpt-5", "generated_code": "from typing import Any, Iterable, Optional\n\ndef Find_Max(items: Iterable[Any]) -> Optional[Any]:\n    \"\"\"\n    Return the element from the iterable with the maximum length.\n    - If multiple elements have the same maximum length, the first encountered is returned.\n    - Elements without a length are treated as having length -1.\n    - Returns None for an empty iterable.\n    \"\"\"\n    # Convert to list to support multiple passes and handle empty input reliably\n    lst = list(items)\n    if not lst:\n        return None\n\n    def safe_len(x: Any) -> int:\n        try:\n            return len(x)  # type: ignore[arg-type]\n        except TypeError:\n            return -1\n\n    return max(lst, key=safe_len)"}
{"benchmark": "mbpp", "task_id": "406", "prompt": "Write a python function to find whether the parity of a given number is odd.", "reference_code": "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False", "test_imports": [], "test_list": ["assert find_Parity(12) == False", "assert find_Parity(7) == True", "assert find_Parity(10) == False"], "model_name": "openai/gpt-5", "generated_code": "def find_Parity(n):\n    \"\"\"\n    Return True if the number of set bits (1s) in the binary representation\n    of n is odd, otherwise return False.\n    \"\"\"\n    # Work with non-negative equivalent for consistency\n    if n < 0:\n        n = -n\n\n    parity = False\n    # Brian Kernighan's algorithm: flips parity for each set bit removed\n    while n:\n        parity = not parity\n        n &= n - 1\n    return parity"}
{"benchmark": "mbpp", "task_id": "286", "prompt": "Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.", "reference_code": "def max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far", "test_imports": [], "test_list": ["assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30", "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59", "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"], "model_name": "openai/gpt-5", "generated_code": "from typing import List\n\ndef max_sub_array_sum_repeated(arr: List[int], k: int) -> int:\n    \"\"\"\n    Find the maximum subarray sum in the array formed by repeating `arr` k times.\n    \"\"\"\n    if not arr or k <= 0:\n        return 0\n\n    def kadane_times(a: List[int], times: int) -> int:\n        best = cur = a[0]\n        n = len(a)\n        for i in range(1, n * times):\n            x = a[i % n]\n            cur = max(x, cur + x)\n            best = max(best, cur)\n        return best\n\n    total_sum = sum(arr)\n    # Kadane on single array\n    best_single = kadane_times(arr, 1)\n    if k == 1:\n        return best_single\n\n    # Kadane on double array (captures any cross-boundary subarray when total_sum <= 0)\n    best_double = kadane_times(arr, 2)\n\n    # Compute best prefix and suffix sums\n    cur = 0\n    max_prefix = arr[0]\n    for x in arr:\n        cur += x\n        if cur > max_prefix:\n            max_prefix = cur\n\n    cur = 0\n    max_suffix = arr[-1]\n    for x in reversed(arr):\n        cur += x\n        if cur > max_suffix:\n            max_suffix = cur\n\n    if total_sum > 0:\n        # Using full middle arrays increases sum\n        crossing = max_suffix + (k - 2) * total_sum + max_prefix\n        return max(best_double, crossing)\n    else:\n        # No benefit from adding more than two arrays\n        return best_double"}
{"benchmark": "mbpp", "task_id": "428", "prompt": "Write a function to sort the given array by using shell sort.", "reference_code": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list", "test_imports": [], "test_list": ["assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]", "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]", "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"], "model_name": "openai/gpt-5", "generated_code": "def shell_sort(arr):\n    \"\"\"\n    Sorts the input list in ascending order using Shell sort and returns it.\n\n    Parameters:\n        arr (list): The list to be sorted. The list is sorted in place.\n\n    Returns:\n        list: The sorted list (same object as input).\n    \"\"\"\n    n = len(arr)\n    gap = n // 2\n\n    # Start with a big gap, then reduce the gap\n    while gap > 0:\n        # Do a gapped insertion sort for this gap size.\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            # Shift earlier gap-sorted elements up until the correct location for arr[i] is found\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            # Put temp (the original arr[i]) in its correct location\n            arr[j] = temp\n        gap //= 2\n\n    return arr"}
{"benchmark": "mbpp", "task_id": "414", "prompt": "Write a python function to check whether any value in a sequence exists in a sequence or not.", "reference_code": "def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False", "test_imports": [], "test_list": ["assert overlapping([1,2,3,4,5],[6,7,8,9]) == False", "assert overlapping([1,2,3],[4,5,6]) == False", "assert overlapping([1,4,5],[1,4,5]) == True"], "model_name": "openai/gpt-5", "generated_code": "def overlapping(seq1, seq2):\n    \"\"\"\n    Return True if there is at least one common element between two sequences, else False.\n    Works with any iterable supporting 'in' membership tests.\n    \"\"\"\n    for item in seq1:\n        if item in seq2:\n            return True\n    return False"}
{"benchmark": "mbpp", "task_id": "299", "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.", "reference_code": "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])", "test_imports": [], "test_list": ["assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)", "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)", "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"], "model_name": "openai/gpt-5", "generated_code": "from typing import Any, Iterable, Optional, Tuple\n\ndef max_aggregate(pairs: Iterable[Tuple[Any, Any]]) -> Optional[Tuple[Any, Any]]:\n    \"\"\"\n    Calculate the maximum aggregate from a list (or iterable) of 2-item tuples (key, value).\n    Aggregates values by key using addition and returns the (key, total) with the highest total.\n    - On ties, returns the key that appears first in the input.\n    - Returns None if no valid (key, value) pairs are found.\n\n    Example:\n    max_aggregate([('a', 5), ('b', 3), ('a', 2)]) -> ('a', 7)\n    \"\"\"\n    sums = {}\n    order = {}  # preserve first-seen order for tie-breaking\n    order_counter = 0\n\n    for item in pairs:\n        # Ensure item is a 2-length iterable\n        try:\n            key, value = item  # type: ignore[misc]\n        except Exception:\n            continue  # skip invalid entries\n\n        if key not in sums:\n            sums[key] = value\n            order[key] = order_counter\n            order_counter += 1\n        else:\n            sums[key] += value\n\n    if not sums:\n        return None\n\n    # Determine key with maximum aggregate; break ties by earliest appearance\n    max_key = None\n    max_sum = None\n    for key in order:  # dict preserves insertion order\n        total = sums[key]\n        if max_sum is None or total > max_sum:\n            max_sum = total\n            max_key = key\n\n    return (max_key, max_sum)"}
{"benchmark": "mbpp", "task_id": "162", "prompt": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).", "reference_code": "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)", "test_imports": [], "test_list": ["assert sum_series(6) == 12", "assert sum_series(10) == 30", "assert sum_series(9) == 25"], "model_name": "openai/gpt-5", "generated_code": "def sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series: n + (n - 2) + (n - 4) + ...,\n    including terms down to the first term that is <= 0.\n    Equivalent to sum_{i=0}^{n//2} (n - 2*i).\n\n    For n < 0, the sum is defined as 0 (empty sum).\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n\n    k = n // 2  # Number of decrements by 2, floor division\n    if k < 0:\n        return 0\n\n    # Closed-form: (k + 1) * (n - k)\n    return (k + 1) * (n - k)"}
{"benchmark": "mbpp", "task_id": "260", "prompt": "Write a function to find the nth newman–shanks–williams prime number.", "reference_code": "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)", "test_imports": [], "test_list": ["assert newman_prime(3) == 7", "assert newman_prime(4) == 17", "assert newman_prime(5) == 41"], "model_name": "openai/gpt-5", "generated_code": ""}
{"benchmark": "mbpp", "task_id": "426", "prompt": "Write a function to filter odd numbers.", "reference_code": "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums", "test_imports": [], "test_list": ["assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]", "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]", "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"], "model_name": "openai/gpt-5", "generated_code": "from typing import Iterable, List, Any\n\ndef filter_oddnumbers(numbers: Iterable[Any]) -> List[int]:\n    \"\"\"\n    Return a list containing only the odd integers from the input iterable.\n    - Only integers are considered; booleans are excluded.\n    - Negative odd integers are included.\n    \"\"\"\n    result: List[int] = []\n    for x in numbers:\n        if isinstance(x, bool):\n            # Exclude booleans (since bool is a subclass of int)\n            continue\n        if isinstance(x, int) and (x % 2 != 0):\n            result.append(x)\n    return result"}
{"benchmark": "mbpp", "task_id": "408", "prompt": "Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.", "reference_code": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs", "test_imports": [], "test_list": ["assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]", "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]", "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"], "model_name": "openai/gpt-5", "generated_code": "from heapq import heappush, heappop\nfrom typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n    Return k pairs [u, v] with u from nums1 and v from nums2 such that the pair sums are minimal.\n    Assumes nums1 and nums2 are sorted in non-decreasing order. If not, results may not be correct.\n    \"\"\"\n    result: List[List[int]] = []\n    if not nums1 or not nums2 or k <= 0:\n        return result\n\n    # Min-heap of tuples: (sum, i, j) where i indexes nums1 and j indexes nums2\n    heap = []\n    n1, n2 = len(nums1), len(nums2)\n\n    # Initialize heap with pairs (nums1[i], nums2[0]) for i in 0..min(k, n1)-1\n    limit = min(k, n1)\n    for i in range(limit):\n        heappush(heap, (nums1[i] + nums2[0], i, 0))\n\n    # Extract k smallest pairs\n    while heap and len(result) < k:\n        _, i, j = heappop(heap)\n        result.append([nums1[i], nums2[j]])\n        if j + 1 < n2:\n            heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n\n    return result"}
{"benchmark": "mbpp", "task_id": "421", "prompt": "Write a function to concatenate each element of tuple by the delimiter.", "reference_code": "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) ", "test_imports": [], "test_list": ["assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'", "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'", "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"], "model_name": "openai/gpt-5", "generated_code": "def concatenate_tuple(tup, delimiter):\n    \"\"\"\n    Concatenate each element of the given tuple into a single string, separated by the provided delimiter.\n\n    Args:\n        tup (tuple): Tuple containing elements to concatenate.\n        delimiter (str): The delimiter to insert between elements.\n\n    Returns:\n        str: The concatenated string.\n\n    Raises:\n        TypeError: If the first argument is not a tuple.\n    \"\"\"\n    if not isinstance(tup, tuple):\n        raise TypeError(\"First argument must be a tuple\")\n    if delimiter is None:\n        delimiter = \"\"\n    else:\n        delimiter = str(delimiter)\n    return delimiter.join(\"\" if x is None else str(x) for x in tup)"}
{"benchmark": "mbpp", "task_id": "433", "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.", "reference_code": "def check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]", "test_imports": [], "test_list": ["assert check_greater([1, 2, 3, 4, 5], 4) == False", "assert check_greater([2, 3, 4, 5, 6], 8) == True", "assert check_greater([9, 7, 4, 8, 6, 1], 11) == True"], "model_name": "openai/gpt-5", "generated_code": "from typing import Iterable, Any\n\ndef check_greater(arr: Iterable[Any], num: Any) -> bool:\n    \"\"\"\n    Check whether the given number is greater than all elements in the array.\n\n    Args:\n        arr: An iterable of comparable elements.\n        num: The number to compare against each element in arr.\n\n    Returns:\n        True if num is greater than every element in arr, otherwise False.\n        For an empty array, returns True.\n    \"\"\"\n    for element in arr:\n        if num <= element:\n            return False\n    return True"}
{"benchmark": "mbpp", "task_id": "422", "prompt": "Write a python function to find the average of cubes of first n natural numbers.", "reference_code": "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) ", "test_imports": [], "test_list": ["assert find_Average_Of_Cube(2) == 4.5", "assert find_Average_Of_Cube(3) == 12", "assert find_Average_Of_Cube(1) == 1"], "model_name": "openai/gpt-5", "generated_code": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Return the average of cubes of the first n natural numbers.\n    For n <= 0, returns 0.0.\n\n    Average = (1^3 + 2^3 + ... + n^3) / n = n*(n+1)^2 / 4\n    \"\"\"\n    if n is None or n <= 0:\n        return 0.0\n    # Use float division to handle non-integer averages\n    return (n * (n + 1) * (n + 1)) / 4.0"}
{"benchmark": "mbpp", "task_id": "411", "prompt": "Write a function to convert the given snake case string to camel case string.", "reference_code": "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))", "test_imports": [], "test_list": ["assert snake_to_camel('android_tv') == 'AndroidTv'", "assert snake_to_camel('google_pixel') == 'GooglePixel'", "assert snake_to_camel('apple_watch') == 'AppleWatch'"], "model_name": "openai/gpt-5", "generated_code": "def snake_to_camel(s: str) -> str:\n    \"\"\"\n    Convert a snake_case string to camelCase.\n    - Splits on underscores\n    - Ignores empty segments caused by consecutive/edge underscores\n    - First meaningful segment is lowercased\n    - Subsequent segments are capitalized (first letter upper, rest lower)\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n\n    if not s:\n        return \"\"\n\n    parts = [p for p in s.split(\"_\") if p != \"\"]\n    if not parts:\n        return \"\"\n\n    first = parts[0].lower()\n    rest = [(p[:1].upper() + p[1:].lower()) if p else \"\" for p in parts[1:]]\n    return first + \"\".join(rest)"}
{"benchmark": "mbpp", "task_id": "431", "prompt": "Write a function that takes two lists and returns true if they have at least one common element.", "reference_code": "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result", "test_imports": [], "test_list": ["assert common_element([1,2,3,4,5], [5,6,7,8,9])==True", "assert common_element([1,2,3,4,5], [6,7,8,9])==None", "assert common_element(['a','b','c'], ['d','b','e'])==True"], "model_name": "openai/gpt-5", "generated_code": "from typing import Any, Iterable\n\ndef common_element(l1: Iterable[Any], l2: Iterable[Any]) -> bool:\n    \"\"\"\n    Return True if l1 and l2 have at least one common element, else False.\n    Works for both hashable and unhashable elements.\n    \"\"\"\n    # Convert to sequences to allow len and repeated iteration\n    a = list(l1)\n    b = list(l2)\n\n    # Put the smaller list in 'a' for efficiency\n    if len(a) > len(b):\n        a, b = b, a\n\n    # Try set-based lookup for efficiency if elements are hashable\n    try:\n        s = set(a)\n    except TypeError:\n        # Elements not hashable; fallback to O(n*m) comparison\n        for x in a:\n            for y in b:\n                if x == y:\n                    return True\n        return False\n\n    # Efficient membership checks using the set\n    for y in b:\n        if y in s:\n            return True\n    return False"}
{"benchmark": "mbpp", "task_id": "301", "prompt": "Write a function to find the depth of a dictionary.", "reference_code": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0", "test_imports": [], "test_list": ["assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4", "assert dict_depth({'a':1, 'b': {'c':'python'}})==2", "assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3"], "model_name": "openai/gpt-5", "generated_code": "from typing import Any, Set\n\ndef dict_depth(d: Any) -> int:\n    \"\"\"\n    Compute the depth of a dictionary.\n\n    Definition:\n    - The depth of a dictionary with no nested dictionaries is 1.\n    - Each level of nested dictionary increases the depth by 1.\n    - Dictionaries nested inside containers (list/tuple/set/frozenset) are counted.\n    - Non-dictionary inputs return 0.\n    - Cycles are safely handled to avoid infinite recursion.\n\n    Examples:\n    - dict_depth({}) == 1\n    - dict_depth({'a': 1}) == 1\n    - dict_depth({'a': {'b': 2}}) == 2\n    - dict_depth({'a': [{'b': {'c': 3}}]}) == 3\n    \"\"\"\n\n    visited: Set[int] = set()\n\n    def depth_from_dict(obj: Any) -> int:\n        if not isinstance(obj, dict):\n            return 0\n\n        oid = id(obj)\n        if oid in visited:\n            # Cycle detected; treat as no further depth\n            return 0\n        visited.add(oid)\n\n        if not obj:\n            return 1\n\n        max_child = 0\n        for v in obj.values():\n            sub = depth_from_value(v)\n            if sub > max_child:\n                max_child = sub\n        return 1 + max_child\n\n    def depth_from_value(val: Any) -> int:\n        if isinstance(val, dict):\n            return depth_from_dict(val)\n        if isinstance(val, (list, tuple, set, frozenset)):\n            max_child = 0\n            for item in val:\n                sub = depth_from_value(item)\n                if sub > max_child:\n                    max_child = sub\n            return max_child\n        return 0\n\n    return depth_from_dict(d)"}
{"benchmark": "mbpp", "task_id": "436", "prompt": "Write a python function to return the negative numbers in a list.", "reference_code": "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out ", "test_imports": [], "test_list": ["assert neg_nos([-1,4,5,-6]) == [-1,-6]", "assert neg_nos([-1,-2,3,4]) == [-1,-2]", "assert neg_nos([-7,-6,8,9]) == [-7,-6]"], "model_name": "openai/gpt-5", "generated_code": "from typing import Iterable, List, Any\n\ndef neg_nos(values: Iterable[Any]) -> List[Any]:\n    \"\"\"\n    Return a list of negative numbers from the given iterable.\n    Non-comparable or non-numeric items are ignored.\n\n    Args:\n        values: An iterable containing elements to filter.\n\n    Returns:\n        List of elements from `values` that are less than zero.\n    \"\"\"\n    negatives = []\n    for x in values:\n        try:\n            if x < 0:\n                negatives.append(x)\n        except Exception:\n            # Ignore items that cannot be compared to zero\n            continue\n    return negatives"}
{"benchmark": "mbpp", "task_id": "391", "prompt": "Write a function to convert more than one list to nested dictionary.", "reference_code": "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result", "test_imports": [], "test_list": ["assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]", "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]", "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"], "model_name": "openai/gpt-5", "generated_code": "from typing import List, Any, Dict\n\ndef convert_list_dictionary(keys: List[Any], names: List[Any], scores: List[Any]) -> List[Dict[Any, Dict[str, Any]]]:\n    \"\"\"\n    Convert three parallel lists into a list of nested dictionaries.\n    Each element is of the form: {key: {\"name\": name, \"score\": score}}\n    \n    Example:\n    keys = [\"S001\", \"S002\"]\n    names = [\"Adina Park\", \"Leyton Marsh\"]\n    scores = [85, 98]\n    -> [{'S001': {'name': 'Adina Park', 'score': 85}},\n        {'S002': {'name': 'Leyton Marsh', 'score': 98}}]\n    \"\"\"\n    return [{k: {\"name\": n, \"score\": s}} for k, n, s in zip(keys, names, scores)]"}
{"benchmark": "mbpp", "task_id": "429", "prompt": "Write a function to extract the elementwise and tuples from the given two tuples.", "reference_code": "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "test_imports": [], "test_list": ["assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)", "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)", "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"], "model_name": "openai/gpt-5", "generated_code": "from typing import Tuple, Any\n\ndef and_tuples(tup1: Tuple[Any, ...], tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    \"\"\"\n    Return a tuple containing the element-wise bitwise AND of two tuples.\n    The operation is performed up to the length of the shorter tuple.\n\n    Example:\n    and_tuples((1, 2, 3), (3, 1, 1)) -> (1, 0, 1)\n    and_tuples((True, False), (True, True)) -> (True, False)\n    \"\"\"\n    return tuple(a & b for a, b in zip(tup1, tup2))"}
{"benchmark": "mbpp", "task_id": "427", "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.", "reference_code": "import re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)", "test_imports": [], "test_list": ["assert change_date_format(\"2026-01-02\") == '02-01-2026'", "assert change_date_format(\"2020-11-13\") == '13-11-2020'", "assert change_date_format(\"2021-04-26\") == '26-04-2021'"], "model_name": "openai/gpt-5", "generated_code": "def change_date_format(date_str: str) -> str:\n    \"\"\"\n    Convert a date from 'yyyy-mm-dd' format to 'dd-mm-yyyy' format.\n\n    Parameters:\n        date_str (str): Date string in 'yyyy-mm-dd' format.\n\n    Returns:\n        str: Date string in 'dd-mm-yyyy' format.\n\n    Raises:\n        TypeError: If input is not a string.\n        ValueError: If input is not in the expected format or contains invalid values.\n    \"\"\"\n    if not isinstance(date_str, str):\n        raise TypeError(\"date_str must be a string\")\n\n    date_str = date_str.strip()\n    parts = date_str.split('-')\n    if len(parts) != 3:\n        raise ValueError(\"Invalid date format, expected 'yyyy-mm-dd'\")\n\n    year, month, day = parts\n\n    if not (len(year) == 4 and year.isdigit()):\n        raise ValueError(\"Invalid year in date\")\n    if not (len(month) == 2 and month.isdigit()):\n        raise ValueError(\"Invalid month in date\")\n    if not (len(day) == 2 and day.isdigit()):\n        raise ValueError(\"Invalid day in date\")\n\n    m = int(month)\n    d = int(day)\n    if not (1 <= m <= 12):\n        raise ValueError(\"Month must be between 01 and 12\")\n    if not (1 <= d <= 31):\n        raise ValueError(\"Day must be between 01 and 31\")\n\n    return f\"{day}-{month}-{year}\""}
{"benchmark": "mbpp", "task_id": "434", "prompt": "Write a function that matches a string that has an a followed by one or more b's.", "reference_code": "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n", "test_imports": [], "test_list": ["assert text_match_one(\"ac\")==False", "assert text_match_one(\"dc\")==False", "assert text_match_one(\"abba\")==True"], "model_name": "openai/gpt-5", "generated_code": "import re\n\ndef text_match_one(text: str) -> bool:\n    \"\"\"\n    Check if the input string contains an 'a' followed by one or more 'b's.\n\n    Args:\n        text (str): The input string to check.\n\n    Returns:\n        bool: True if pattern 'ab+' is found, otherwise False.\n    \"\"\"\n    return bool(re.search(r\"ab+\", text))"}
{"benchmark": "mbpp", "task_id": "398", "prompt": "Write a function to compute the sum of digits of each number of a given list.", "reference_code": "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())", "test_imports": [], "test_list": ["assert sum_of_digits([10,2,56])==14", "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19", "assert sum_of_digits([10,20,-4,5,-70])==19"], "model_name": "openai/gpt-5", "generated_code": "def sum_of_digits(lst):\n    \"\"\"\n    Compute the sum of digits for each number in the given list.\n    For negative numbers, the sign is ignored.\n    Returns a list of sums corresponding to each input element.\n    \"\"\"\n    result = []\n    for x in lst:\n        try:\n            n = int(x)\n        except (TypeError, ValueError):\n            raise TypeError(\"All elements must be integers or integer-coercible values\")\n        s = sum(int(ch) for ch in str(abs(n)))\n        result.append(s)\n    return result"}
{"benchmark": "mbpp", "task_id": "447", "prompt": "Write a function to find cubes of individual elements in a list.", "reference_code": "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums", "test_imports": [], "test_list": ["assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]", "assert cube_nums([10,20,30])==([1000, 8000, 27000])", "assert cube_nums([12,15])==([1728, 3375])"], "model_name": "openai/gpt-5", "generated_code": "def cube_nums(nums):\n    \"\"\"\n    Return a list containing the cubes of the input numbers.\n\n    Args:\n        nums (list): A list of numeric values.\n\n    Returns:\n        list: A list where each element is the cube of the corresponding input element.\n    \"\"\"\n    return [x ** 3 for x in nums]"}
{"benchmark": "mbpp", "task_id": "389", "prompt": "Write a function to find the n'th lucas number.", "reference_code": "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ", "test_imports": [], "test_list": ["assert find_lucas(9) == 76", "assert find_lucas(4) == 7", "assert find_lucas(3) == 4"], "model_name": "openai/gpt-5", "generated_code": "def find_lucas(n):\n    \"\"\"\n    Return the nth Lucas number with 0-based indexing:\n    L0 = 2, L1 = 1, and Ln = Ln-1 + Ln-2 for n >= 2.\n\n    Supports negative indices via L_{-n} = (-1)^n * L_n.\n\n    Parameters:\n        n (int): The index of the Lucas number (can be negative).\n\n    Returns:\n        int: The nth Lucas number.\n\n    Raises:\n        TypeError: If n is not an integer.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n\n    # Handle base cases for non-negative n\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n\n    # If n is negative, use identity L_{-n} = (-1)^n * L_n\n    if n < 0:\n        m = -n\n        # Compute L_m iteratively\n        a, b = 2, 1  # L0, L1\n        for _ in range(2, m + 1):\n            a, b = b, a + b\n        return -b if (m % 2 == 1) else b\n\n    # Iterative computation for n >= 2\n    a, b = 2, 1  # L0, L1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}
{"benchmark": "mbpp", "task_id": "424", "prompt": "Write a function to extract only the rear index element of each string in the given tuple.", "reference_code": "def extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) ", "test_imports": [], "test_list": ["assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']", "assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']", "assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"], "model_name": "openai/gpt-5", "generated_code": "from typing import Tuple, List\n\ndef extract_rear(strings: Tuple[str, ...]) -> List[str]:\n    \"\"\"\n    Extract the last character of each string in the given tuple.\n\n    For empty strings, an empty string is included in the result.\n\n    Args:\n        strings: A tuple of strings.\n\n    Returns:\n        A list containing the last character of each string.\n    \"\"\"\n    return [s[-1] if s else '' for s in strings]"}
{"benchmark": "mbpp", "task_id": "397", "prompt": "Write a function to find the median of three numbers.", "reference_code": "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median", "test_imports": [], "test_list": ["assert median_numbers(25,55,65)==55.0", "assert median_numbers(20,10,30)==20.0", "assert median_numbers(15,45,75)==45.0"], "model_name": "openai/gpt-5", "generated_code": "def median_numbers(a, b=None, c=None):\n    \"\"\"\n    Return the median (middle value) of three numbers.\n\n    Usage:\n    - median_numbers(x, y, z)\n    - median_numbers([x, y, z]) or median_numbers((x, y, z))\n\n    Raises:\n    - TypeError if arguments are invalid.\n    - ValueError if iterable does not contain exactly three elements.\n    \"\"\"\n    if b is None and c is None:\n        # Allow passing an iterable of exactly three numbers\n        try:\n            values = list(a)\n        except TypeError:\n            raise TypeError(\"Provide three numbers or an iterable with exactly three numbers.\")\n        if len(values) != 3:\n            raise ValueError(\"Iterable must contain exactly three numbers.\")\n        x, y, z = values\n    else:\n        if b is None or c is None:\n            raise TypeError(\"Provide exactly three numbers.\")\n        x, y, z = a, b, c\n\n    return sorted((x, y, z))[1]"}
{"benchmark": "mbpp", "task_id": "400", "prompt": "Write a function to extract the number of unique tuples in the given list.", "reference_code": "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)", "test_imports": [], "test_list": ["assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3", "assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4", "assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"], "model_name": "openai/gpt-5", "generated_code": "from typing import Any\n\ndef extract_freq(tuples_list: Any) -> int:\n    \"\"\"\n    Return the number of unique tuples in the given list.\n\n    The function attempts to handle elements that are lists by converting them to tuples.\n    If elements contain nested unhashable structures, it converts them into hashable\n    equivalents recursively to ensure uniqueness can be determined.\n    \"\"\"\n    # Fast path for typical case: list of tuples/lists\n    try:\n        return len(set(map(tuple, tuples_list)))\n    except TypeError:\n        # Fallback: recursively convert elements to hashable forms\n        def to_hashable(obj):\n            if isinstance(obj, (list, tuple)):\n                return tuple(to_hashable(e) for e in obj)\n            if isinstance(obj, dict):\n                return tuple(sorted((to_hashable(k), to_hashable(v)) for k, v in obj.items()))\n            if isinstance(obj, set):\n                return tuple(sorted(to_hashable(e) for e in obj))\n            return obj\n\n        return len({to_hashable(item) for item in tuples_list})"}
{"benchmark": "mbpp", "task_id": "239", "prompt": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.", "reference_code": "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]", "test_imports": [], "test_list": ["assert get_total_number_of_sequences(10, 4) == 4", "assert get_total_number_of_sequences(5, 2) == 6", "assert get_total_number_of_sequences(16, 3) == 84"], "model_name": "openai/gpt-5", "generated_code": ""}
{"benchmark": "mbpp", "task_id": "441", "prompt": "Write a function to find the surface area of a cube of a given size.", "reference_code": "def surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea", "test_imports": [], "test_list": ["assert surfacearea_cube(5)==150", "assert surfacearea_cube(3)==54", "assert surfacearea_cube(10)==600"], "model_name": "openai/gpt-5", "generated_code": "def surfacearea_cube(size):\n    \"\"\"\n    Calculate the surface area of a cube given the length of its side.\n\n    Parameters:\n        size (int or float): The length of one side of the cube.\n\n    Returns:\n        int or float: The surface area of the cube, computed as 6 * size^2.\n    \"\"\"\n    return 6 * (size ** 2)"}
{"benchmark": "mbpp", "task_id": "437", "prompt": "Write a function to remove odd characters in a string.", "reference_code": "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2", "test_imports": [], "test_list": ["assert remove_odd(\"python\")==(\"yhn\")", "assert remove_odd(\"program\")==(\"rga\")", "assert remove_odd(\"language\")==(\"agae\")"], "model_name": "openai/gpt-5", "generated_code": "def remove_odd(s: str) -> str:\n    \"\"\"\n    Remove characters at odd indices (0-based) from the input string.\n    Returns a new string containing characters at even indices.\n    \"\"\"\n    if not isinstance(s, str):\n        s = str(s)\n    return s[::2]"}
{"benchmark": "mbpp", "task_id": "425", "prompt": "Write a function to count the number of sublists containing a particular element.", "reference_code": "def count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr", "test_imports": [], "test_list": ["assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3", "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3", "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"], "model_name": "openai/gpt-5", "generated_code": "from typing import Any, List\n\ndef count_element_in_list(lst: List[List[Any]], element: Any) -> int:\n    \"\"\"\n    Count how many sublists in 'lst' contain 'element'.\n    Only items that are instances of list are considered sublists.\n    \"\"\"\n    if not isinstance(lst, list):\n        return 0\n    count = 0\n    for sub in lst:\n        if isinstance(sub, list) and element in sub:\n            count += 1\n    return count"}
{"benchmark": "mbpp", "task_id": "409", "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.", "reference_code": "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min", "test_imports": [], "test_list": ["assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8", "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30", "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100"], "model_name": "openai/gpt-5", "generated_code": "from typing import Iterable, Tuple, Optional, Union\n\nNumber = Union[int, float]\n\ndef min_product_tuple(tuples_list: Iterable[Tuple[Number, ...]]) -> Optional[Number]:\n    \"\"\"\n    Find the minimum product from the tuples within a given list.\n\n    Parameters:\n    - tuples_list: An iterable of tuples containing numeric values.\n\n    Returns:\n    - The minimum product value among all tuples, or None if the input is empty.\n    \"\"\"\n    iterator = iter(tuples_list)\n    min_prod: Optional[Number] = None\n\n    for t in iterator:\n        prod: Number = 1  # Product identity\n        has_elem = False\n        for x in t:\n            prod *= x\n            has_elem = True\n        if not has_elem:\n            # If a tuple is empty, by convention treat its product as 1.\n            prod = 1\n        if min_prod is None or prod < min_prod:\n            min_prod = prod\n\n    return min_prod"}
{"benchmark": "mbpp", "task_id": "417", "prompt": "Write a function to find common first element in given list of tuple.", "reference_code": "def group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] ", "test_imports": [], "test_list": ["assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]", "assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]", "assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]"], "model_name": "openai/gpt-5", "generated_code": "from typing import Any, Dict, Iterable, List, Tuple, Union\n\n\ndef group_tuples(tuples_list: Iterable[Tuple[Any, ...]]) -> Dict[Any, List[Union[Any, Tuple[Any, ...]]]]:\n    \"\"\"\n    Group items by the first element of each tuple.\n\n    For each tuple:\n    - If length is 1: stores an empty tuple as the value.\n    - If length is 2: stores the second element directly.\n    - If length > 2: stores a tuple of the remaining elements.\n\n    Example:\n    - [(\"V\", 1), (\"V\", 2), (\"VI\", 1), (\"VI\", 5), (\"VII\", 1)]\n      -> {\"V\": [1, 2], \"VI\": [1, 5], \"VII\": [1]}\n\n    - [(\"A\", 1, 2), (\"A\", 3, 4), (\"B\", 5, 6)]\n      -> {\"A\": [(1, 2), (3, 4)], \"B\": [(5, 6)]}\n    \"\"\"\n    grouped: Dict[Any, List[Union[Any, Tuple[Any, ...]]]] = {}\n    for item in tuples_list:\n        if not isinstance(item, tuple) or len(item) == 0:\n            # Skip non-tuples or empty tuples\n            continue\n        key = item[0]\n        if len(item) == 1:\n            value: Union[Any, Tuple[Any, ...]] = ()\n        elif len(item) == 2:\n            value = item[1]\n        else:\n            value = item[1:]\n        grouped.setdefault(key, []).append(value)\n    return grouped"}
{"benchmark": "mbpp", "task_id": "432", "prompt": "Write a function to find the median length of a trapezium.", "reference_code": "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median", "test_imports": [], "test_list": ["assert median_trapezium(15,25,35)==20", "assert median_trapezium(10,20,30)==15", "assert median_trapezium(6,9,4)==7.5"], "model_name": "openai/gpt-5", "generated_code": "def median_trapezium(a, b):\n    \"\"\"\n    Calculate the median (midline) length of a trapezium given the lengths\n    of its two parallel sides (bases) a and b.\n\n    The median length m is (a + b) / 2.\n\n    Args:\n        a (float or int): Length of one base.\n        b (float or int): Length of the other base.\n\n    Returns:\n        float: The length of the median.\n    \"\"\"\n    return (a + b) / 2"}
{"benchmark": "mbpp", "task_id": "461", "prompt": "Write a python function to count the upper case characters in a given string.", "reference_code": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr", "test_imports": [], "test_list": ["assert upper_ctr('PYthon') == 1", "assert upper_ctr('BigData') == 1", "assert upper_ctr('program') == 0"], "model_name": "openai/gpt-5", "generated_code": "def upper_ctr(s):\n    \"\"\"\n    Count the number of uppercase alphabetic characters in the given string.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        int: The count of uppercase characters.\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    return sum(1 for ch in s if ch.isupper())"}
{"benchmark": "mbpp", "task_id": "446", "prompt": "Write a python function to count the occurence of all elements of list in a tuple.", "reference_code": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  ", "test_imports": [], "test_list": ["assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3", "assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6", "assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2"], "model_name": "openai/gpt-5", "generated_code": "from collections import Counter\nfrom typing import Any, Dict, Iterable, Tuple, List\n\ndef count_Occurrence(lst: Iterable[Any], tup: Tuple[Any, ...]) -> Dict[Any, int]:\n    \"\"\"\n    Count the occurrence of each element from 'lst' within the tuple 'tup'.\n\n    Args:\n        lst: Iterable of elements to count.\n        tup: Tuple in which to count occurrences.\n\n    Returns:\n        A dictionary mapping each element from 'lst' to its count in 'tup'.\n    \"\"\"\n    counts = Counter(tup)\n    return {elem: counts.get(elem, 0) for elem in lst}"}
{"benchmark": "mbpp", "task_id": "307", "prompt": "Write a function to get a colon of a tuple.", "reference_code": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon", "test_imports": [], "test_list": ["assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)", "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))", "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"], "model_name": "openai/gpt-5", "generated_code": ""}
{"benchmark": "mbpp", "task_id": "415", "prompt": "Write a python function to find a pair with highest product from a given array of integers.", "reference_code": "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    ", "test_imports": [], "test_list": ["assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)", "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)", "assert max_Product([1,2,3]) == (2,3)"], "model_name": "openai/gpt-5", "generated_code": "from typing import List, Optional, Tuple\n\ndef max_Product(nums: List[int]) -> Optional[Tuple[int, int]]:\n    \"\"\"\n    Find a pair with the highest product from the given list of integers.\n    Returns a tuple (a, b) in non-decreasing order. If input has fewer than\n    two elements, returns None.\n    \"\"\"\n    if not nums or len(nums) < 2:\n        return None\n\n    max1 = float('-inf')\n    max2 = float('-inf')\n    min1 = float('inf')\n    min2 = float('inf')\n\n    for x in nums:\n        # Update top two maximums\n        if x >= max1:\n            max2 = max1\n            max1 = x\n        elif x > max2:\n            max2 = x\n\n        # Update bottom two minimums\n        if x <= min1:\n            min2 = min1\n            min1 = x\n        elif x < min2:\n            min2 = x\n\n    prod_max = max1 * max2\n    prod_min = min1 * min2\n\n    if prod_min > prod_max:\n        a, b = min1, min2\n    else:\n        a, b = max2, max1  # max2 <= max1 by construction\n\n    # Ensure non-decreasing order\n    return (a, b) if a <= b else (b, a)"}
{"benchmark": "mbpp", "task_id": "451", "prompt": "Write a function to remove all whitespaces from the given string.", "reference_code": "import re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))", "test_imports": [], "test_list": ["assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'", "assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'", "assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"], "model_name": "openai/gpt-5", "generated_code": "def remove_whitespaces(s: str) -> str:\n    \"\"\"\n    Remove all whitespace characters from the given string.\n    Whitespace includes spaces, tabs, newlines, and all Unicode whitespace.\n\n    Args:\n        s (str): Input string.\n\n    Returns:\n        str: String with all whitespace characters removed.\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    return \"\".join(ch for ch in s if not ch.isspace())"}
{"benchmark": "mbpp", "task_id": "443", "prompt": "Write a python function to find the largest negative number from the given list.", "reference_code": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max", "test_imports": [], "test_list": ["assert largest_neg([1,2,3,-4,-6]) == -6", "assert largest_neg([1,2,3,-8,-9]) == -9", "assert largest_neg([1,2,3,4,-1]) == -1"], "model_name": "openai/gpt-5", "generated_code": "from math import isnan\n\ndef largest_neg(lst):\n    \"\"\"\n    Return the largest (closest to zero) negative number from the given list.\n    If no negative numbers are present, return None.\n    Non-numeric values and booleans are ignored.\n    \"\"\"\n    best = None\n    for x in lst:\n        # Skip booleans explicitly (since bool is a subclass of int)\n        if isinstance(x, bool):\n            continue\n        # Consider ints and floats only\n        if isinstance(x, (int, float)):\n            # Skip NaN values\n            if isinstance(x, float) and isnan(x):\n                continue\n            if x < 0:\n                if best is None or x > best:\n                    best = x\n    return best"}
{"benchmark": "mbpp", "task_id": "311", "prompt": "Write a python function to set the left most unset bit.", "reference_code": "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) ", "test_imports": [], "test_list": ["assert set_left_most_unset_bit(10) == 14", "assert set_left_most_unset_bit(12) == 14", "assert set_left_most_unset_bit(15) == 15"], "model_name": "openai/gpt-5", "generated_code": "from typing import Optional\n\ndef set_left_most_unset_bit(n: int) -> int:\n    \"\"\"\n    Set the leftmost (most significant within current bit-length) unset bit of a non-negative integer.\n    If all bits up to the most significant bit are set (i.e., n is of the form 2^k - 1), return n unchanged.\n\n    Examples:\n    - n = 10 (1010b) -> 14 (1110b)\n    - n = 7  (0111b) -> 7  (0111b)  [unchanged]\n    - n = 0  (0b)    -> 1  (1b)\n    \"\"\"\n    if n < 0:\n        # Behavior undefined for negatives in two's complement; keep unchanged\n        return n\n    if n == 0:\n        return 1\n\n    # Scan from most significant bit to least significant bit\n    for i in range(n.bit_length() - 1, -1, -1):\n        if ((n >> i) & 1) == 0:\n            return n | (1 << i)\n\n    return n"}
{"benchmark": "mbpp", "task_id": "460", "prompt": "Write a python function to get the first element of each sublist.", "reference_code": "def Extract(lst): \n    return [item[0] for item in lst] ", "test_imports": [], "test_list": ["assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]", "assert Extract([[1,2,3],[4, 5]]) == [1,4]", "assert Extract([[9,8,1],[1,2]]) == [9,1]"], "model_name": "openai/gpt-5", "generated_code": "def Extract(lst):\n    \"\"\"\n    Return a list containing the first element from each sublist in lst.\n    Assumes each element of lst is an indexable sequence with at least one item.\n    \"\"\"\n    return [sublist[0] for sublist in lst]"}
{"benchmark": "mbpp", "task_id": "455", "prompt": "Write a function to check whether the given month number contains 31 days or not.", "reference_code": "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False", "test_imports": [], "test_list": ["assert check_monthnumb_number(5)==True", "assert check_monthnumb_number(2)==False", "assert check_monthnumb_number(6)==False"], "model_name": "openai/gpt-5", "generated_code": "def check_monthnumb_number(month):\n    \"\"\"\n    Return True if the given month number (1-12) has 31 days, else False.\n    Non-integer or out-of-range values return False.\n    \"\"\"\n    try:\n        m = int(month)\n    except Exception:\n        return False\n    if m < 1 or m > 12:\n        return False\n    return m in {1, 3, 5, 7, 8, 10, 12}"}
{"benchmark": "mbpp", "task_id": "445", "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.", "reference_code": "def index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ", "test_imports": [], "test_list": ["assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))", "assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))", "assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"], "model_name": "openai/gpt-5", "generated_code": "def index_multiplication(t1, t2):\n    \"\"\"\n    Perform index-wise multiplication of elements from two tuples.\n    Returns a tuple where each element is the product of elements at the same index.\n    If tuples have different lengths, only pairs up to the shorter length are multiplied.\n\n    Example:\n    index_multiplication((1, 2, 3), (4, 5, 6)) -> (4, 10, 18)\n    index_multiplication((1, 2), (3, 4, 5)) -> (3, 8)\n    \"\"\"\n    return tuple(a * b for a, b in zip(t1, t2))"}
{"benchmark": "mbpp", "task_id": "464", "prompt": "Write a function to check if all values are same in a dictionary.", "reference_code": "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result", "test_imports": [], "test_list": ["assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False", "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True", "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False"], "model_name": "openai/gpt-5", "generated_code": "from collections.abc import Mapping\n\ndef check_value(d):\n    \"\"\"\n    Check if all values in the given dictionary-like mapping are the same.\n    \n    Returns True if the mapping is empty or all values are equal, otherwise False.\n    Raises TypeError if the input does not provide a values() method like a mapping.\n    \"\"\"\n    if not isinstance(d, Mapping):\n        # Attempt to be flexible: if the object has values() method, use it; else raise.\n        if not hasattr(d, \"values\"):\n            raise TypeError(\"Input must be a mapping (dictionary-like) object.\")\n    \n    values_iter = iter(d.values())\n    try:\n        first = next(values_iter)\n    except StopIteration:\n        # Empty mapping: trivially all values are the same\n        return True\n    \n    for v in values_iter:\n        if v != first:\n            return False\n    return True"}
{"benchmark": "mbpp", "task_id": "456", "prompt": "Write a function to reverse each string in a given list of string values.", "reference_code": "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result", "test_imports": [], "test_list": ["assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']", "assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']", "assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"], "model_name": "openai/gpt-5", "generated_code": "def reverse_string_list(strings):\n    \"\"\"\n    Reverse each string in a given list of string values.\n\n    Args:\n        strings (list[str]): A list of strings to be reversed.\n\n    Returns:\n        list[str]: A list containing the reversed versions of the input strings.\n    \"\"\"\n    return [s[::-1] for s in strings]"}
{"benchmark": "mbpp", "task_id": "450", "prompt": "Write a function to extract specified size of strings from a given list of string values.", "reference_code": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result", "test_imports": [], "test_list": ["assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']", "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']", "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"], "model_name": "openai/gpt-5", "generated_code": "from typing import List, Iterable\n\n\ndef extract_string(strings: Iterable[str], size: int) -> List[str]:\n    \"\"\"\n    Extract strings of a specified length from a given iterable of string values.\n\n    Args:\n        strings: An iterable containing string elements (non-string elements are ignored).\n        size: The target length for strings to extract.\n\n    Returns:\n        A list of strings whose length equals 'size', preserving original order.\n    \"\"\"\n    if not isinstance(size, int) or size < 0:\n        return []\n\n    return [s for s in strings if isinstance(s, str) and len(s) == size]"}
{"benchmark": "mbpp", "task_id": "440", "prompt": "Write a function to find the first adverb and their positions in a given sentence.", "reference_code": "import re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))", "test_imports": [], "test_list": ["assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')", "assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')", "assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"], "model_name": "openai/gpt-5", "generated_code": "import re\n\ndef find_adverb_position(sentence):\n    \"\"\"\n    Find the first adverb (a word ending with 'ly') in the given sentence.\n    Returns a tuple: (adverb, start_index, end_index).\n    If no adverb is found, returns (None, -1, -1).\n    \"\"\"\n    if not isinstance(sentence, str):\n        return (None, -1, -1)\n\n    match = re.search(r'\\b[a-zA-Z]+ly\\b', sentence, re.IGNORECASE)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    return (None, -1, -1)"}
{"benchmark": "mbpp", "task_id": "442", "prompt": "Write a function to find the ration of positive numbers in an array of integers.", "reference_code": "from array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)", "test_imports": [], "test_list": ["assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54", "assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69", "assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56"], "model_name": "openai/gpt-5", "generated_code": "from typing import Iterable, Union\n\nNumber = Union[int, float, bool]\n\n\ndef positive_count(arr: Iterable[Number]) -> float:\n    \"\"\"\n    Compute the ratio of positive numbers (> 0) in the given iterable.\n\n    - Returns 0.0 for an empty iterable or if arr is None.\n    - Elements that cannot be compared to 0 are ignored.\n\n    Parameters:\n        arr: An iterable of numeric values.\n\n    Returns:\n        float: count_of_positive / total_count\n    \"\"\"\n    if arr is None:\n        return 0.0\n\n    try:\n        sequence = list(arr)\n    except TypeError:\n        # Not iterable\n        return 0.0\n\n    total = len(sequence)\n    if total == 0:\n        return 0.0\n\n    positives = 0\n    for x in sequence:\n        try:\n            if x > 0:\n                positives += 1\n        except Exception:\n            # Skip elements that cannot be compared\n            continue\n\n    return positives / total"}
{"benchmark": "mbpp", "task_id": "470", "prompt": "Write a function to find the pairwise addition of the neighboring elements of the given tuple.", "reference_code": "def add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ", "test_imports": [], "test_list": ["assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)", "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)", "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"], "model_name": "openai/gpt-5", "generated_code": "def add_pairwise(t):\n    \"\"\"\n    Return a new tuple where each element is the sum (or addition) of neighboring elements\n    from the input tuple t. For a tuple of length n, the result has length n-1.\n\n    Examples:\n    - add_pairwise((1, 2, 3, 4)) -> (3, 5, 7)\n    - add_pairwise(()) -> ()\n    - add_pairwise((5,)) -> ()\n    \"\"\"\n    # Using zip to pair each element with its neighbor; works for all lengths\n    return tuple(a + b for a, b in zip(t, t[1:]))"}
{"benchmark": "mbpp", "task_id": "399", "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.", "reference_code": "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "test_imports": [], "test_list": ["assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)", "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)", "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"], "model_name": "openai/gpt-5", "generated_code": "from typing import Tuple, Any\n\n\ndef bitwise_xor(*args: Tuple[int, ...]) -> Tuple[int, ...]:\n    \"\"\"\n    Perform element-wise bitwise XOR across the given tuples.\n\n    Supports:\n    - Multiple tuple arguments: bitwise_xor((1,2,3), (4,5,6))\n    - A single tuple of tuples: bitwise_xor(((1,2,3), (4,5,6)))\n    - A single tuple of scalars returns itself (XOR identity over one tuple)\n\n    All tuples must be of equal length. Elements must be integers (bool allowed).\n    \"\"\"\n    # Normalize input to a tuple of tuples named 'tups'\n    if not args:\n        return ()\n\n    if len(args) == 1 and isinstance(args[0], tuple):\n        first = args[0]\n        if not first:\n            return ()\n        # If it's a tuple of tuples, use those as the input tuples\n        if all(isinstance(x, tuple) for x in first):\n            tups = first\n        else:\n            # Single tuple of scalars: validate and return as-is\n            for v in first:\n                if not isinstance(v, int):\n                    raise TypeError(\"All items must be integers.\")\n            return tuple(first)\n    else:\n        tups = args  # multiple tuple arguments\n\n    # Validation: all args must be tuples of equal length and contain ints\n    length = len(tups[0])\n    for t in tups:\n        if not isinstance(t, tuple):\n            raise TypeError(\"All arguments must be tuples.\")\n        if len(t) != length:\n            raise ValueError(\"All tuples must be of the same length.\")\n        for v in t:\n            if not isinstance(v, int):\n                raise TypeError(\"All items must be integers.\")\n\n    # Compute element-wise XOR across all tuples\n    result = []\n    for i in range(length):\n        acc = 0\n        for t in tups:\n            acc ^= t[i]\n        result.append(acc)\n\n    return tuple(result)"}
{"benchmark": "mbpp", "task_id": "452", "prompt": "Write a function that gives loss amount on a sale if the given amount has loss else return 0.", "reference_code": "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0", "test_imports": [], "test_list": ["assert loss_amount(1500,1200)==0", "assert loss_amount(100,200)==100", "assert loss_amount(2000,5000)==3000"], "model_name": "openai/gpt-5", "generated_code": "def loss_amount(*args):\n    \"\"\"\n    Returns the loss amount on a sale.\n    - If called with two numbers: loss_amount(cost_price, selling_price)\n      returns (cost_price - selling_price) if selling_price < cost_price, else 0.\n    - If called with one number: loss_amount(amount)\n      treats the number as net profit/loss; returns -amount if amount < 0, else 0.\n    \"\"\"\n    if len(args) == 2:\n        cost_price, selling_price = args\n        diff = cost_price - selling_price\n        return diff if diff > 0 else 0\n    elif len(args) == 1:\n        amount = args[0]\n        return -amount if amount < 0 else 0\n    else:\n        raise TypeError(\"loss_amount expects 1 or 2 arguments.\")"}
{"benchmark": "mbpp", "task_id": "390", "prompt": "Write a function to apply a given format string to all of the elements in a list.", "reference_code": "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string", "test_imports": [], "test_list": ["assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']", "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']", "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"], "model_name": "openai/gpt-5", "generated_code": ""}
{"benchmark": "mbpp", "task_id": "471", "prompt": "Write a python function to find the product of the array multiplication modulo n.", "reference_code": "def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n ", "test_imports": [], "test_list": ["assert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9", "assert find_remainder([1,1,1],1) == 0", "assert find_remainder([1,2,1],2) == 0"], "model_name": "openai/gpt-5", "generated_code": "def find_remainder(arr, n):\n    \"\"\"\n    Compute the product of all elements in 'arr' modulo 'n'.\n\n    Args:\n        arr (iterable of int): The array of integers.\n        n (int): The modulus (non-zero).\n\n    Returns:\n        int: The remainder of the product modulo n.\n\n    Raises:\n        ValueError: If n is zero.\n    \"\"\"\n    if n == 0:\n        raise ValueError(\"Modulus n must be non-zero\")\n    result = 1 % n\n    for x in arr:\n        result = (result * (x % n)) % n\n    return result"}
{"benchmark": "mbpp", "task_id": "435", "prompt": "Write a python function to find the last digit of a given number.", "reference_code": "def last_Digit(n) :\n    return (n % 10) ", "test_imports": [], "test_list": ["assert last_Digit(123) == 3", "assert last_Digit(25) == 5", "assert last_Digit(30) == 0"], "model_name": "openai/gpt-5", "generated_code": "def last_Digit(number):\n    \"\"\"\n    Return the last digit of the given number.\n    - For negative numbers, returns the last digit of the absolute value.\n    - Accepts integers, floats (uses integer part), and numeric strings.\n    - If a string contains mixed characters, returns the last digit character found.\n    \"\"\"\n    # Direct handling for integers and booleans\n    if isinstance(number, int) or isinstance(number, bool):\n        return abs(int(number)) % 10\n\n    # Try to convert typical numeric types (e.g., float, numeric strings)\n    try:\n        n = int(number)\n        return abs(n) % 10\n    except Exception:\n        # Fallback: if it's a string with mixed content, find the last digit character\n        if isinstance(number, str):\n            for ch in reversed(number.strip()):\n                if ch.isdigit():\n                    return int(ch)\n        # If unsupported type, raise a clear error\n        raise TypeError(\"Unsupported input type for last_Digit\")"}
{"benchmark": "mbpp", "task_id": "459", "prompt": "Write a function to remove uppercase substrings from a given string.", "reference_code": "import re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)", "test_imports": [], "test_list": ["assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'", "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'", "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"], "model_name": "openai/gpt-5", "generated_code": "def remove_uppercase(s: str) -> str:\n    \"\"\"\n    Remove all uppercase ASCII letter substrings (i.e., any uppercase letters) from the given string.\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    return ''.join(ch for ch in s if not ('A' <= ch <= 'Z'))"}
{"benchmark": "mbpp", "task_id": "477", "prompt": "Write a python function to convert the given string to lower case.", "reference_code": "def is_lower(string):\n  return (string.lower())", "test_imports": [], "test_list": ["assert is_lower(\"InValid\") == \"invalid\"", "assert is_lower(\"TruE\") == \"true\"", "assert is_lower(\"SenTenCE\") == \"sentence\""], "model_name": "openai/gpt-5", "generated_code": "def is_lower(s):\n    \"\"\"\n    Convert the given string to lower case.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    str: The lowercased version of the input string.\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    return s.lower()"}
{"benchmark": "mbpp", "task_id": "453", "prompt": "Write a python function to find the sum of even factors of a number.", "reference_code": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res", "test_imports": [], "test_list": ["assert sumofFactors(18) == 26", "assert sumofFactors(30) == 48", "assert sumofFactors(6) == 8"], "model_name": "openai/gpt-5", "generated_code": "def sumofFactors(n):\n    \"\"\"\n    Return the sum of even factors of the given number n.\n    For n <= 0, returns 0. Only positive divisors of |n| are considered.\n    \"\"\"\n    # Ensure integer and non-negative handling\n    if not isinstance(n, int):\n        try:\n            n = int(n)\n        except Exception as e:\n            raise TypeError(\"Input must be an integer or convertible to integer.\") from e\n\n    n = abs(n)\n    if n == 0 or n % 2 == 1:\n        return 0\n\n    # Sum of even divisors of n equals 2 * (sum of all divisors of n//2)\n    m = n // 2\n    total = 0\n    i = 1\n    while i * i <= m:\n        if m % i == 0:\n            total += i\n            j = m // i\n            if j != i:\n                total += j\n        i += 1\n    return 2 * total"}
{"benchmark": "mbpp", "task_id": "478", "prompt": "Write a function to remove lowercase substrings from a given string.", "reference_code": "import re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)", "test_imports": [], "test_list": ["assert remove_lowercase(\"PYTHon\")==('PYTH')", "assert remove_lowercase(\"FInD\")==('FID')", "assert remove_lowercase(\"STRinG\")==('STRG')"], "model_name": "openai/gpt-5", "generated_code": "import re\n\ndef remove_lowercase(s: str) -> str:\n    \"\"\"\n    Remove all substrings consisting solely of lowercase ASCII letters from the input string.\n    Contiguous sequences of [a-z] are removed entirely; other characters are left unchanged.\n\n    Example:\n        \"Hello WoRLd123!\" -> \"H WRL123!\"\n    \"\"\"\n    return re.sub(r'[a-z]+', '', s)"}
{"benchmark": "mbpp", "task_id": "476", "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.", "reference_code": "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum", "test_imports": [], "test_list": ["assert big_sum([1,2,3]) == 4", "assert big_sum([-1,2,3,4]) == 3", "assert big_sum([2,3,6]) == 8"], "model_name": "openai/gpt-5", "generated_code": "def big_sum(arr):\n    \"\"\"\n    Return the sum of the smallest and largest values in the given array (iterable).\n    If the array is empty or None, return 0.\n\n    Parameters:\n    - arr: Iterable of comparable numeric values.\n\n    Returns:\n    - Sum of the smallest and largest values in arr, or 0 if arr is empty/None.\n    \"\"\"\n    if arr is None:\n        return 0\n\n    try:\n        it = iter(arr)\n    except TypeError:\n        raise TypeError(\"Input must be an iterable\")\n\n    try:\n        first = next(it)\n    except StopIteration:\n        return 0\n\n    min_val = first\n    max_val = first\n\n    for x in it:\n        if x < min_val:\n            min_val = x\n        if x > max_val:\n            max_val = x\n\n    return min_val + max_val"}
{"benchmark": "mbpp", "task_id": "438", "prompt": "Write a function to count bidirectional tuple pairs.", "reference_code": "def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res", "test_imports": [], "test_list": ["assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3", "assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 2", "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == 4"], "model_name": "openai/gpt-5", "generated_code": "from typing import Iterable, Any\n\n\ndef count_bidirectional(pairs: Iterable[Iterable[Any]]) -> int:\n    \"\"\"\n    Count unique bidirectional tuple pairs in the input.\n\n    A bidirectional pair is defined as a pair of distinct elements (a, b)\n    such that both (a, b) and (b, a) appear at least once in the input.\n    Each unordered pair {a, b} is counted at most once, regardless of duplicates.\n\n    - Ignores self-pairs where a == b.\n    - Ignores items that are not 2-length iterables.\n    - Skips pairs containing unhashable elements.\n\n    Parameters:\n        pairs: An iterable of 2-length iterables (e.g., tuples/lists).\n\n    Returns:\n        The count of unique bidirectional unordered pairs.\n    \"\"\"\n    set_pairs = set()\n    for p in pairs:\n        # Ensure it's a 2-length iterable\n        try:\n            if p is None:\n                continue\n            if len(p) != 2:\n                continue\n            a, b = p[0], p[1]\n        except Exception:\n            # Not an indexable/len-able 2-length item\n            continue\n\n        # Ensure hashability of elements (so that tuple/frozenset are hashable)\n        try:\n            hash(a)\n            hash(b)\n        except TypeError:\n            continue\n\n        set_pairs.add((a, b))\n\n    bidirs = set()\n    for a, b in set_pairs:\n        if a == b:\n            continue  # exclude self-pairs\n        if (b, a) in set_pairs:\n            # Use frozenset to normalize unordered pair without relying on ordering\n            bidirs.add(frozenset((a, b)))\n\n    return len(bidirs)"}
{"benchmark": "mbpp", "task_id": "444", "prompt": "Write a function to trim each tuple by k in the given tuple list.", "reference_code": "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) ", "test_imports": [], "test_list": ["assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'", "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'", "assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"], "model_name": "openai/gpt-5", "generated_code": "from typing import List, Tuple, Iterable\n\ndef trim_tuple(tuple_list: List[Tuple], k: int) -> List[Tuple]:\n    \"\"\"\n    Trim each tuple in the given list by removing k elements from both the start and the end.\n    If 2*k >= len(tuple), the resulting tuple will be empty.\n\n    Args:\n        tuple_list: List of tuples to trim.\n        k: Non-negative integer specifying how many elements to remove from both ends.\n\n    Returns:\n        A new list of tuples with each tuple trimmed by k from both ends.\n    \"\"\"\n    try:\n        k = int(k)\n    except (TypeError, ValueError):\n        raise ValueError(\"k must be an integer\")\n    if k < 0:\n        k = 0\n\n    result: List[Tuple] = []\n    for t in tuple_list:\n        # Ensure we operate as if on a tuple and return a tuple\n        trimmed = tuple(t)[k: len(t) - k]\n        result.append(trimmed)\n    return result"}
{"benchmark": "mbpp", "task_id": "410", "prompt": "Write a function to find the minimum value in a given heterogeneous list.", "reference_code": "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val", "test_imports": [], "test_list": ["assert min_val(['Python', 3, 2, 4, 5, 'version'])==2", "assert min_val(['Python', 15, 20, 25])==15", "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"], "model_name": "openai/gpt-5", "generated_code": ""}
{"benchmark": "mbpp", "task_id": "304", "prompt": "Write a python function to find element at a given index after number of rotations.", "reference_code": "def find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] ", "test_imports": [], "test_list": ["assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3", "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3", "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"], "model_name": "openai/gpt-5", "generated_code": ""}
{"benchmark": "mbpp", "task_id": "458", "prompt": "Write a function to find the area of a rectangle.", "reference_code": "def rectangle_area(l,b):\n  area=l*b\n  return area", "test_imports": [], "test_list": ["assert rectangle_area(10,20)==200", "assert rectangle_area(10,5)==50", "assert rectangle_area(4,2)==8"], "model_name": "openai/gpt-5", "generated_code": "def rectangle_area(length, width):\n    \"\"\"\n    Calculate the area of a rectangle.\n\n    Parameters:\n    - length: numeric length of the rectangle\n    - width: numeric width of the rectangle\n\n    Returns:\n    - The area as the product of length and width.\n    \"\"\"\n    return length * width"}
{"benchmark": "mbpp", "task_id": "448", "prompt": "Write a function to calculate the sum of perrin numbers.", "reference_code": "def cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum", "test_imports": [], "test_list": ["assert cal_sum(9) == 49", "assert cal_sum(10) == 66", "assert cal_sum(11) == 88"], "model_name": "openai/gpt-5", "generated_code": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of the first n Perrin numbers.\n    Perrin sequence: P0=3, P1=0, P2=2, and Pn = P(n-2) + P(n-3) for n>=3.\n\n    Args:\n        n (int): Number of initial Perrin terms to sum. If n<=0, returns 0.\n\n    Returns:\n        int: Sum of the first n Perrin numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 3  # 3\n    if n == 2:\n        return 3  # 3 + 0\n\n    # Initialize first three Perrin numbers\n    p0, p1, p2 = 3, 0, 2  # P0, P1, P2\n    total = p0 + p1 + p2  # sum of first 3 terms\n\n    count = 3\n    while count < n:\n        nxt = p1 + p0  # P(n) = P(n-2) + P(n-3)\n        total += nxt\n        # shift window\n        p0, p1, p2 = p1, p2, nxt\n        count += 1\n\n    return total"}
{"benchmark": "mbpp", "task_id": "413", "prompt": "Write a function to extract the nth element from a given list of tuples.", "reference_code": "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result", "test_imports": [], "test_list": ["assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']", "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]", "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"], "model_name": "openai/gpt-5", "generated_code": "from typing import Any, Iterable, List, Tuple\n\ndef extract_nth_element(tuples_list: Iterable[Tuple[Any, ...]], n: int) -> List[Any]:\n    \"\"\"\n    Extract the nth element from each tuple in the given iterable of tuples.\n\n    - Uses Python indexing (0-based). Negative indices are supported.\n    - Tuples that do not have the requested index are skipped.\n\n    Args:\n        tuples_list: An iterable containing tuples.\n        n: The index of the element to extract from each tuple.\n\n    Returns:\n        A list containing the nth element from each tuple where available.\n\n    Raises:\n        TypeError: If n is not an integer.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n\n    result: List[Any] = []\n    for t in tuples_list:\n        # Ensure the item is a tuple; if not, skip it\n        if not isinstance(t, tuple):\n            continue\n        length = len(t)\n        # Determine if index n is valid for this tuple\n        if (n >= 0 and length > n) or (n < 0 and length >= -n):\n            result.append(t[n])\n    return result"}
{"benchmark": "mbpp", "task_id": "479", "prompt": "Write a python function to find the first digit of a given number.", "reference_code": "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) ", "test_imports": [], "test_list": ["assert first_Digit(123) == 1", "assert first_Digit(456) == 4", "assert first_Digit(12) == 1"], "model_name": "openai/gpt-5", "generated_code": "def first_Digit(n):\n    \"\"\"\n    Return the first (most significant) digit of the given number.\n    - Accepts integers or strings convertible to integers.\n    - Handles negative numbers by using their absolute value.\n    \"\"\"\n    # Convert input to integer if possible\n    if isinstance(n, bool):\n        n = int(n)\n    elif not isinstance(n, int):\n        try:\n            n = int(str(n).strip())\n        except Exception as e:\n            raise ValueError(\"Input must be an integer or a string representing an integer.\") from e\n\n    n = abs(n)\n    if n == 0:\n        return 0\n\n    while n >= 10:\n        n //= 10\n    return n"}
{"benchmark": "mbpp", "task_id": "430", "prompt": "Write a function to find the directrix of a parabola.", "reference_code": "def parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix", "test_imports": [], "test_list": ["assert parabola_directrix(5,3,2)==-198", "assert parabola_directrix(9,8,4)==-2336", "assert parabola_directrix(2,4,6)==-130"], "model_name": "openai/gpt-5", "generated_code": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Compute the directrix of the parabola y = a*x^2 + b*x + c.\n\n    Returns the y-value of the horizontal directrix line (i.e., the line is y = return_value).\n\n    Parameters:\n    - a (float): quadratic coefficient (must be non-zero)\n    - b (float): linear coefficient\n    - c (float): constant term\n\n    Returns:\n    - float: y-coordinate of the directrix\n\n    Raises:\n    - ValueError: if a == 0 (not a parabola)\n    \"\"\"\n    a = float(a)\n    b = float(b)\n    c = float(c)\n\n    if a == 0.0:\n        raise ValueError(\"Coefficient 'a' must be non-zero for a parabola.\")\n\n    # Vertex coordinates\n    h = -b / (2.0 * a)\n    k = a * h * h + b * h + c\n\n    # For y = a(x - h)^2 + k, p = 1/(4a); directrix is y = k - p\n    return k - 1.0 / (4.0 * a)"}
{"benchmark": "mbpp", "task_id": "462", "prompt": "Write a function to find all possible combinations of the elements of a given list.", "reference_code": "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result", "test_imports": [], "test_list": ["assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]", "assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]", "assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"], "model_name": "openai/gpt-5", "generated_code": "import itertools\nfrom typing import List, Any\n\ndef combinations_list(lst: List[Any]) -> List[List[Any]]:\n    \"\"\"\n    Return all non-empty combinations of the elements of the given list.\n    The combinations are returned as a flat list of lists, ordered by increasing size.\n\n    Example:\n    combinations_list([1, 2, 3]) -> [[1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\n    \"\"\"\n    result: List[List[Any]] = []\n    for r in range(1, len(lst) + 1):\n        result.extend([list(c) for c in itertools.combinations(lst, r)])\n    return result"}
{"benchmark": "mbpp", "task_id": "457", "prompt": "Write a python function to find the sublist having minimum length.", "reference_code": "def Find_Min(lst): \n    return min(lst, key=len) ", "test_imports": [], "test_list": ["assert Find_Min([[1],[1,2],[1,2,3]]) == [1]", "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]", "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"], "model_name": "openai/gpt-5", "generated_code": "from typing import Any, List\n\ndef Find_Min(sublists: List[Any]) -> Any:\n    \"\"\"\n    Return the sublist (or sequence) with the minimum length from the given list.\n    - On ties, returns the first occurring sublist with the minimal length.\n    - If the input list is empty, returns an empty list.\n    - Elements without a definable length are treated as having infinite length (ignored unless all are such).\n    \"\"\"\n    if not sublists:\n        return []\n\n    def _safe_len(x: Any) -> float:\n        try:\n            return len(x)  # type: ignore[arg-type]\n        except Exception:\n            return float(\"inf\")\n\n    min_index = 0\n    min_length = _safe_len(sublists[0])\n\n    for i in range(1, len(sublists)):\n        current_len = _safe_len(sublists[i])\n        if current_len < min_length:\n            min_length = current_len\n            min_index = i\n\n    return sublists[min_index]"}
{"benchmark": "mbpp", "task_id": "454", "prompt": "Write a function that matches a word containing 'z'.", "reference_code": "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False", "test_imports": [], "test_list": ["assert text_match_wordz(\"pythonz.\")==True", "assert text_match_wordz(\"xyz.\")==True", "assert text_match_wordz(\"  lang  .\")==False"], "model_name": "openai/gpt-5", "generated_code": "import re\n\ndef text_match_wordz(text):\n    \"\"\"\n    Return 'Found a match!' if the input string contains any word with the letter 'z' (case-insensitive),\n    otherwise return 'Not matched!'.\n    \"\"\"\n    pattern = r'\\b\\w*z\\w*\\b'\n    return 'Found a match!' if re.search(pattern, text, re.IGNORECASE) else 'Not matched!'"}
{"benchmark": "mbpp", "task_id": "463", "prompt": "Write a function to find the maximum product subarray of the given array.", "reference_code": "def max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far", "test_imports": [], "test_list": ["assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112", "assert max_subarray_product([6, -3, -10, 0, 2]) == 180", "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"], "model_name": "openai/gpt-5", "generated_code": "def max_subarray_product(arr):\n    \"\"\"\n    Compute the maximum product of any contiguous subarray within the given array.\n\n    Args:\n        arr (Sequence[Number]): A list or sequence of numeric values (ints or floats).\n\n    Returns:\n        Number: The maximum product value of a contiguous subarray.\n                Returns 0 if the input array is empty.\n    \"\"\"\n    if not arr:\n        return 0\n\n    max_prod = min_prod = result = arr[0]\n\n    for x in arr[1:]:\n        # When x is negative, swap max and min because sign flips\n        if x < 0:\n            max_prod, min_prod = min_prod, max_prod\n\n        # Update max_prod and min_prod for the current position\n        max_prod = x if x > max_prod * x else max_prod * x\n        min_prod = x if x < min_prod * x else min_prod * x\n\n        # Update result with the best seen so far\n        result = max(result, max_prod)\n\n    return result"}
{"benchmark": "mbpp", "task_id": "293", "prompt": "Write a function to find the third side of a right angled triangle.", "reference_code": "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s", "test_imports": [], "test_list": ["assert otherside_rightangle(7,8)==10.63014581273465", "assert otherside_rightangle(3,4)==5", "assert otherside_rightangle(7,15)==16.55294535724685"], "model_name": "openai/gpt-5", "generated_code": ""}
{"benchmark": "mbpp", "task_id": "472", "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.", "reference_code": "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) ", "test_imports": [], "test_list": ["assert check_Consecutive([1,2,3,4,5]) == True", "assert check_Consecutive([1,2,3,5,6]) == False", "assert check_Consecutive([1,2,1]) == False"], "model_name": "openai/gpt-5", "generated_code": "def check_Consecutive(lst):\n    \"\"\"\n    Check whether the given list contains consecutive numbers (order-insensitive).\n    Returns True if the unique elements can be arranged so each adjacent pair differs by 1.\n    Examples:\n      [1, 2, 3, 4] -> True\n      [4, 2, 1, 3] -> True\n      [1, 2, 4]    -> False\n      [1, 1, 2]    -> False\n      []           -> True\n      [5]          -> True\n    \"\"\"\n    items = list(lst)\n    # Empty or single element lists are trivially consecutive\n    if len(items) <= 1:\n        return True\n\n    # Disallow duplicates\n    if len(set(items)) != len(items):\n        return False\n\n    # Ensure all values are integer-like numbers (ints or floats equal to an int), and not bools\n    int_like = []\n    for v in items:\n        if isinstance(v, bool):\n            return False\n        if isinstance(v, int):\n            int_like.append(v)\n        elif isinstance(v, float) and v.is_integer():\n            int_like.append(int(v))\n        else:\n            return False\n\n    mn = min(int_like)\n    mx = max(int_like)\n\n    # Range size must match number of unique elements\n    if mx - mn + 1 != len(int_like):\n        return False\n\n    # Check that set matches the expected consecutive range\n    return set(int_like) == set(range(mn, mx + 1))"}
{"benchmark": "mbpp", "task_id": "468", "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.", "reference_code": "def max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)", "test_imports": [], "test_list": ["assert max_product([3, 100, 4, 5, 150, 6]) == 3000", "assert max_product([4, 42, 55, 68, 80]) == 50265600", "assert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460"], "model_name": "openai/gpt-5", "generated_code": "from typing import List, Union\n\nNumber = Union[int, float]\n\n\ndef max_product(arr: List[Number]) -> Number:\n    \"\"\"\n    Find the maximum product formed by multiplying numbers of an increasing subsequence.\n    Returns 0 for an empty list.\n    \"\"\"\n    if not arr:\n        return 0\n\n    n = len(arr)\n    # dp_max[i]: maximum product of an increasing subsequence ending at i\n    # dp_min[i]: minimum product of an increasing subsequence ending at i (to handle negatives)\n    dp_max = arr[:]  # start with the element itself\n    dp_min = arr[:]  # start with the element itself\n\n    for i in range(n):\n        ai = arr[i]\n        for j in range(i):\n            if arr[j] < ai:\n                # Possible products extending subsequences ending at j\n                cand1 = dp_max[j] * ai\n                cand2 = dp_min[j] * ai\n\n                if cand1 > dp_max[i]:\n                    dp_max[i] = cand1\n                if cand2 > dp_max[i]:\n                    dp_max[i] = cand2\n\n                if cand1 < dp_min[i]:\n                    dp_min[i] = cand1\n                if cand2 < dp_min[i]:\n                    dp_min[i] = cand2\n\n    return max(dp_max)"}
{"benchmark": "mbpp", "task_id": "475", "prompt": "Write a function to sort a dictionary by value.", "reference_code": "from collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter", "test_imports": [], "test_list": ["assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]", "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]", "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"], "model_name": "openai/gpt-5", "generated_code": "from collections.abc import Mapping\nfrom typing import Any, List, Tuple\n\n\ndef sort_counter(counter: Mapping) -> List[Tuple[Any, Any]]:\n    \"\"\"\n    Sort a dictionary (or any mapping) by value in descending order.\n    Ties are broken by key in ascending order when keys are comparable.\n\n    Returns a list of (key, value) tuples.\n    \"\"\"\n    if not isinstance(counter, Mapping):\n        raise TypeError(\"sort_counter expects a mapping\")\n\n    items = list(counter.items())\n\n    # Tie-break by key ascending when possible (stable sort).\n    try:\n        items.sort(key=lambda kv: kv[0])\n    except Exception:\n        # If keys are not mutually comparable, skip explicit key sort.\n        pass\n\n    # Primary sort by value descending.\n    try:\n        items.sort(key=lambda kv: kv[1], reverse=True)\n    except TypeError:\n        # If values are not directly comparable, fall back to their string form.\n        items.sort(key=lambda kv: str(kv[1]), reverse=True)\n\n    return items"}
{"benchmark": "mbpp", "task_id": "439", "prompt": "Write a function to join a list of multiple integers into a single integer.", "reference_code": "def multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x", "test_imports": [], "test_list": ["assert multiple_to_single([11, 33, 50])==113350", "assert multiple_to_single([-1,2,3,4,5,6])==-123456", "assert multiple_to_single([10,15,20,25])==10152025"], "model_name": "openai/gpt-5", "generated_code": ""}
{"benchmark": "mbpp", "task_id": "473", "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.", "reference_code": "def tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)", "test_imports": [], "test_list": ["assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}", "assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}", "assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"], "model_name": "openai/gpt-5", "generated_code": "from typing import List, Tuple, Any\n\ndef tuple_intersection(tuples_list: List[Tuple[Any, ...]]) -> Tuple[Any, ...]:\n    \"\"\"\n    Find the intersection of elements across all tuples in the given list,\n    irrespective of their order within each tuple. The result preserves the\n    order of first appearance from the first tuple and contains unique elements.\n\n    Examples:\n    - [(1, 2), (2, 3), (2, 4)] -> (2,)\n    - [('a', 'b', 'c'), ('c', 'a'), ('a', 'd', 'c')] -> ('a', 'c')\n    - [] -> ()\n    \"\"\"\n    if not tuples_list:\n        return ()\n\n    # Convert all subsequent tuples to sets for O(1) membership tests\n    other_sets = [set(t) for t in tuples_list[1:]]\n\n    seen = set()\n    result = []\n\n    for item in tuples_list[0]:\n        if item in seen:\n            continue\n        # Check presence in all other tuples (order within those tuples doesn't matter)\n        if all(item in s for s in other_sets):\n            result.append(item)\n            seen.add(item)\n\n    return tuple(result)"}
{"benchmark": "mbpp", "task_id": "306", "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .", "reference_code": "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]", "test_imports": [], "test_list": ["assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11", "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7", "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"], "model_name": "openai/gpt-5", "generated_code": ""}
{"benchmark": "mbpp", "task_id": "474", "prompt": "Write a function to replace characters in a string.", "reference_code": "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2", "test_imports": [], "test_list": ["assert replace_char(\"polygon\",'y','l')==(\"pollgon\")", "assert replace_char(\"character\",'c','a')==(\"aharaater\")", "assert replace_char(\"python\",'l','a')==(\"python\")"], "model_name": "openai/gpt-5", "generated_code": ""}
{"benchmark": "mbpp", "task_id": "465", "prompt": "Write a function to drop empty items from a given dictionary.", "reference_code": "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1", "test_imports": [], "test_list": ["assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}", "assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}", "assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}"], "model_name": "openai/gpt-5", "generated_code": ""}
